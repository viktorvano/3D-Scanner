
STM32F103C8T6_3D_Scanner_VL53L0X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000673c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08006848  08006848  00016848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069dc  080069dc  00020434  2**0
                  CONTENTS
  4 .ARM          00000000  080069dc  080069dc  00020434  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069dc  080069dc  00020434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069dc  080069dc  000169dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069e0  080069e0  000169e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000434  20000000  080069e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b0  20000434  08006e18  00020434  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016e4  08006e18  000216e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021deb  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b88  00000000  00000000  00042248  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00010a3f  00000000  00000000  00045dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001308  00000000  00000000  00056810  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001550  00000000  00000000  00057b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001c36f  00000000  00000000  00059068  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000131ca  00000000  00000000  000753d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000916f6  00000000  00000000  000885a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00119c97  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003754  00000000  00000000  00119d14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000434 	.word	0x20000434
 8000128:	00000000 	.word	0x00000000
 800012c:	08006830 	.word	0x08006830

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000438 	.word	0x20000438
 8000148:	08006830 	.word	0x08006830

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000218:	f1a2 0201 	sub.w	r2, r2, #1
 800021c:	d1ed      	bne.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2uiz>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	d20e      	bcs.n	800063a <__aeabi_f2uiz+0x22>
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30b      	bcc.n	800063a <__aeabi_f2uiz+0x22>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d409      	bmi.n	8000640 <__aeabi_f2uiz+0x28>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	fa23 f002 	lsr.w	r0, r3, r2
 8000638:	4770      	bx	lr
 800063a:	f04f 0000 	mov.w	r0, #0
 800063e:	4770      	bx	lr
 8000640:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000644:	d101      	bne.n	800064a <__aeabi_f2uiz+0x32>
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	d102      	bne.n	8000650 <__aeabi_f2uiz+0x38>
 800064a:	f04f 30ff 	mov.w	r0, #4294967295
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b530      	push	{r4, r5, lr}
 800065a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	2400      	movs	r4, #0
 800065e:	9404      	str	r4, [sp, #16]
 8000660:	9405      	str	r4, [sp, #20]
 8000662:	9406      	str	r4, [sp, #24]
 8000664:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800066e:	699a      	ldr	r2, [r3, #24]
 8000670:	f042 0220 	orr.w	r2, r2, #32
 8000674:	619a      	str	r2, [r3, #24]
 8000676:	699a      	ldr	r2, [r3, #24]
 8000678:	f002 0220 	and.w	r2, r2, #32
 800067c:	9201      	str	r2, [sp, #4]
 800067e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	699a      	ldr	r2, [r3, #24]
 8000682:	f042 0204 	orr.w	r2, r2, #4
 8000686:	619a      	str	r2, [r3, #24]
 8000688:	699a      	ldr	r2, [r3, #24]
 800068a:	f002 0204 	and.w	r2, r2, #4
 800068e:	9202      	str	r2, [sp, #8]
 8000690:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	699a      	ldr	r2, [r3, #24]
 8000694:	f042 0208 	orr.w	r2, r2, #8
 8000698:	619a      	str	r2, [r3, #24]
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	9303      	str	r3, [sp, #12]
 80006a2:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ToF_Enable_Pin|USB_Enable_Pin, GPIO_PIN_RESET);
 80006a4:	f44f 6540 	mov.w	r5, #3072	; 0xc00
 80006a8:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80006ac:	4622      	mov	r2, r4
 80006ae:	210a      	movs	r1, #10
 80006b0:	4628      	mov	r0, r5
 80006b2:	f001 fa75 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ToF_Enable_Pin USB_Enable_Pin */
  GPIO_InitStruct.Pin = ToF_Enable_Pin|USB_Enable_Pin;
 80006b6:	230a      	movs	r3, #10
 80006b8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2302      	movs	r3, #2
 80006c2:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c4:	a904      	add	r1, sp, #16
 80006c6:	4628      	mov	r0, r5
 80006c8:	f001 f8cf 	bl	800186a <HAL_GPIO_Init>

}
 80006cc:	b009      	add	sp, #36	; 0x24
 80006ce:	bd30      	pop	{r4, r5, pc}

080006d0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
 80006d2:	e7fe      	b.n	80006d2 <Error_Handler+0x2>

080006d4 <MX_TIM2_Init>:
{
 80006d4:	b500      	push	{lr}
 80006d6:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d8:	2300      	movs	r3, #0
 80006da:	930a      	str	r3, [sp, #40]	; 0x28
 80006dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80006de:	930c      	str	r3, [sp, #48]	; 0x30
 80006e0:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e2:	9308      	str	r3, [sp, #32]
 80006e4:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e6:	9301      	str	r3, [sp, #4]
 80006e8:	9302      	str	r3, [sp, #8]
 80006ea:	9303      	str	r3, [sp, #12]
 80006ec:	9304      	str	r3, [sp, #16]
 80006ee:	9305      	str	r3, [sp, #20]
 80006f0:	9306      	str	r3, [sp, #24]
 80006f2:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 80006f4:	f240 7018 	movw	r0, #1816	; 0x718
 80006f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80006fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000700:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 400;
 8000702:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000706:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000708:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 3599;
 800070a:	f640 620f 	movw	r2, #3599	; 0xe0f
 800070e:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000710:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000712:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000714:	f003 fd2e 	bl	8004174 <HAL_TIM_Base_Init>
 8000718:	2800      	cmp	r0, #0
 800071a:	d144      	bne.n	80007a6 <MX_TIM2_Init+0xd2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071c:	a90e      	add	r1, sp, #56	; 0x38
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000726:	f240 7018 	movw	r0, #1816	; 0x718
 800072a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800072e:	f003 fe20 	bl	8004372 <HAL_TIM_ConfigClockSource>
 8000732:	2800      	cmp	r0, #0
 8000734:	d139      	bne.n	80007aa <MX_TIM2_Init+0xd6>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000736:	f240 7018 	movw	r0, #1816	; 0x718
 800073a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800073e:	f003 fd44 	bl	80041ca <HAL_TIM_PWM_Init>
 8000742:	bba0      	cbnz	r0, 80007ae <MX_TIM2_Init+0xda>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000744:	2300      	movs	r3, #0
 8000746:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000748:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800074a:	a908      	add	r1, sp, #32
 800074c:	f240 7018 	movw	r0, #1816	; 0x718
 8000750:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000754:	f003 ff05 	bl	8004562 <HAL_TIMEx_MasterConfigSynchronization>
 8000758:	bb58      	cbnz	r0, 80007b2 <MX_TIM2_Init+0xde>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800075a:	2360      	movs	r3, #96	; 0x60
 800075c:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 270;
 800075e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000762:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000764:	2200      	movs	r2, #0
 8000766:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000768:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800076a:	a901      	add	r1, sp, #4
 800076c:	f240 7018 	movw	r0, #1816	; 0x718
 8000770:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000774:	f003 fd8a 	bl	800428c <HAL_TIM_PWM_ConfigChannel>
 8000778:	b9e8      	cbnz	r0, 80007b6 <MX_TIM2_Init+0xe2>
  sConfigOC.Pulse = 445;
 800077a:	f240 13bd 	movw	r3, #445	; 0x1bd
 800077e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000780:	2204      	movs	r2, #4
 8000782:	eb0d 0102 	add.w	r1, sp, r2
 8000786:	f240 7018 	movw	r0, #1816	; 0x718
 800078a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800078e:	f003 fd7d 	bl	800428c <HAL_TIM_PWM_ConfigChannel>
 8000792:	b990      	cbnz	r0, 80007ba <MX_TIM2_Init+0xe6>
  HAL_TIM_MspPostInit(&htim2);
 8000794:	f240 7018 	movw	r0, #1816	; 0x718
 8000798:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800079c:	f000 fa60 	bl	8000c60 <HAL_TIM_MspPostInit>
}
 80007a0:	b00f      	add	sp, #60	; 0x3c
 80007a2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80007a6:	f7ff ff93 	bl	80006d0 <Error_Handler>
    Error_Handler();
 80007aa:	f7ff ff91 	bl	80006d0 <Error_Handler>
    Error_Handler();
 80007ae:	f7ff ff8f 	bl	80006d0 <Error_Handler>
    Error_Handler();
 80007b2:	f7ff ff8d 	bl	80006d0 <Error_Handler>
    Error_Handler();
 80007b6:	f7ff ff8b 	bl	80006d0 <Error_Handler>
    Error_Handler();
 80007ba:	f7ff ff89 	bl	80006d0 <Error_Handler>

080007be <MX_TIM3_Init>:
{
 80007be:	b500      	push	{lr}
 80007c0:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	2300      	movs	r3, #0
 80007c4:	9302      	str	r3, [sp, #8]
 80007c6:	9303      	str	r3, [sp, #12]
 80007c8:	9304      	str	r3, [sp, #16]
 80007ca:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	9301      	str	r3, [sp, #4]
  htim3.Instance = TIM3;
 80007d0:	f240 60d0 	movw	r0, #1744	; 0x6d0
 80007d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80007d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007dc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80007e0:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 7200;
 80007e2:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80007e6:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 9999;
 80007ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80007ee:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f0:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007f4:	f003 fcbe 	bl	8004174 <HAL_TIM_Base_Init>
 80007f8:	b9c8      	cbnz	r0, 800082e <MX_TIM3_Init+0x70>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fa:	a906      	add	r1, sp, #24
 80007fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000800:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000804:	f240 60d0 	movw	r0, #1744	; 0x6d0
 8000808:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800080c:	f003 fdb1 	bl	8004372 <HAL_TIM_ConfigClockSource>
 8000810:	b978      	cbnz	r0, 8000832 <MX_TIM3_Init+0x74>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000816:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000818:	4669      	mov	r1, sp
 800081a:	f240 60d0 	movw	r0, #1744	; 0x6d0
 800081e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000822:	f003 fe9e 	bl	8004562 <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	b930      	cbnz	r0, 8000836 <MX_TIM3_Init+0x78>
}
 8000828:	b007      	add	sp, #28
 800082a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800082e:	f7ff ff4f 	bl	80006d0 <Error_Handler>
    Error_Handler();
 8000832:	f7ff ff4d 	bl	80006d0 <Error_Handler>
    Error_Handler();
 8000836:	f7ff ff4b 	bl	80006d0 <Error_Handler>

0800083a <MX_I2C2_Init>:
{
 800083a:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 800083c:	f240 607c 	movw	r0, #1660	; 0x67c
 8000840:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000844:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8000848:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800084c:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800084e:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8000852:	f2c0 0301 	movt	r3, #1
 8000856:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000858:	2300      	movs	r3, #0
 800085a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800085c:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000862:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000866:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000868:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800086c:	f001 fbbe 	bl	8001fec <HAL_I2C_Init>
 8000870:	b900      	cbnz	r0, 8000874 <MX_I2C2_Init+0x3a>
}
 8000872:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000874:	f7ff ff2c 	bl	80006d0 <Error_Handler>

08000878 <SystemClock_Config>:
{
 8000878:	b500      	push	{lr}
 800087a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087c:	2300      	movs	r3, #0
 800087e:	930c      	str	r3, [sp, #48]	; 0x30
 8000880:	930d      	str	r3, [sp, #52]	; 0x34
 8000882:	930f      	str	r3, [sp, #60]	; 0x3c
 8000884:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000886:	9305      	str	r3, [sp, #20]
 8000888:	9306      	str	r3, [sp, #24]
 800088a:	9307      	str	r3, [sp, #28]
 800088c:	9308      	str	r3, [sp, #32]
 800088e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	9302      	str	r3, [sp, #8]
 8000894:	9303      	str	r3, [sp, #12]
 8000896:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000898:	2201      	movs	r2, #1
 800089a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800089c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008a0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a2:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a4:	2202      	movs	r2, #2
 80008a6:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008ae:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	a80a      	add	r0, sp, #40	; 0x28
 80008b2:	f002 fdd4 	bl	800345e <HAL_RCC_OscConfig>
 80008b6:	b9c0      	cbnz	r0, 80008ea <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2102      	movs	r1, #2
 80008be:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c8:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ca:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008cc:	a805      	add	r0, sp, #20
 80008ce:	f003 f880 	bl	80039d2 <HAL_RCC_ClockConfig>
 80008d2:	b960      	cbnz	r0, 80008ee <SystemClock_Config+0x76>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80008d4:	2310      	movs	r3, #16
 80008d6:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80008d8:	2300      	movs	r3, #0
 80008da:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008dc:	a801      	add	r0, sp, #4
 80008de:	f003 f970 	bl	8003bc2 <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	b930      	cbnz	r0, 80008f2 <SystemClock_Config+0x7a>
}
 80008e4:	b015      	add	sp, #84	; 0x54
 80008e6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80008ea:	f7ff fef1 	bl	80006d0 <Error_Handler>
    Error_Handler();
 80008ee:	f7ff feef 	bl	80006d0 <Error_Handler>
    Error_Handler();
 80008f2:	f7ff feed 	bl	80006d0 <Error_Handler>

080008f6 <main>:
{
 80008f6:	b530      	push	{r4, r5, lr}
 80008f8:	b087      	sub	sp, #28
  HAL_Init();
 80008fa:	f000 ff0e 	bl	800171a <HAL_Init>
  SystemClock_Config();
 80008fe:	f7ff ffbb 	bl	8000878 <SystemClock_Config>
  MX_GPIO_Init();
 8000902:	f7ff fea9 	bl	8000658 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000906:	f7ff fee5 	bl	80006d4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800090a:	f005 fbe5 	bl	80060d8 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800090e:	f7ff ff56 	bl	80007be <MX_TIM3_Init>
  MX_I2C2_Init();
 8000912:	f7ff ff92 	bl	800083a <MX_I2C2_Init>
	HAL_TIM_Base_Start(&htim2);
 8000916:	f240 7418 	movw	r4, #1816	; 0x718
 800091a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800091e:	4620      	mov	r0, r4
 8000920:	f003 fab2 	bl	8003e88 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8000924:	f240 60d0 	movw	r0, #1744	; 0x6d0
 8000928:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800092c:	f003 fadf 	bl	8003eee <HAL_TIM_Base_Start_IT>
	setPitch(pitch);
 8000930:	f240 4352 	movw	r3, #1106	; 0x452
 8000934:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000938:	8818      	ldrh	r0, [r3, #0]
 800093a:	f000 f89b 	bl	8000a74 <setPitch>
	setYaw(yaw);
 800093e:	f240 0300 	movw	r3, #0
 8000942:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000946:	8818      	ldrh	r0, [r3, #0]
 8000948:	f000 f8af 	bl	8000aaa <setYaw>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800094c:	2100      	movs	r1, #0
 800094e:	4620      	mov	r0, r4
 8000950:	f003 fd8c 	bl	800446c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000954:	2104      	movs	r1, #4
 8000956:	4620      	mov	r0, r4
 8000958:	f003 fd88 	bl	800446c <HAL_TIM_PWM_Start>
	int model = 0, revision = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	9305      	str	r3, [sp, #20]
 8000960:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(ToF_Enable_GPIO_Port, ToF_Enable_Pin, SET);
 8000962:	2201      	movs	r2, #1
 8000964:	2102      	movs	r1, #2
 8000966:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800096a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800096e:	f001 f917 	bl	8001ba0 <HAL_GPIO_WritePin>
	while(I2C2->SR2==2)
 8000972:	e00f      	b.n	8000994 <main+0x9e>
	  while(HAL_I2C_DeInit(&hi2c2) != HAL_OK);
 8000974:	f240 607c 	movw	r0, #1660	; 0x67c
 8000978:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800097c:	f001 fc1b 	bl	80021b6 <HAL_I2C_DeInit>
 8000980:	2800      	cmp	r0, #0
 8000982:	d1f7      	bne.n	8000974 <main+0x7e>
	  while(HAL_I2C_Init(&hi2c2) != HAL_OK);
 8000984:	f240 607c 	movw	r0, #1660	; 0x67c
 8000988:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800098c:	f001 fb2e 	bl	8001fec <HAL_I2C_Init>
 8000990:	2800      	cmp	r0, #0
 8000992:	d1f7      	bne.n	8000984 <main+0x8e>
	while(I2C2->SR2==2)
 8000994:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8000998:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d0e8      	beq.n	8000974 <main+0x7e>
	tofInit(1); // set long range mode (up to 2m)
 80009a2:	2001      	movs	r0, #1
 80009a4:	f000 fdd6 	bl	8001554 <tofInit>
	tofGetModel(&model, &revision);
 80009a8:	a904      	add	r1, sp, #16
 80009aa:	a805      	add	r0, sp, #20
 80009ac:	f000 fe29 	bl	8001602 <tofGetModel>
	while(model != 238 || revision != 16)
 80009b0:	e016      	b.n	80009e0 <main+0xea>
	  while(HAL_I2C_DeInit(&hi2c2) != HAL_OK);
 80009b2:	f240 607c 	movw	r0, #1660	; 0x67c
 80009b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80009ba:	f001 fbfc 	bl	80021b6 <HAL_I2C_DeInit>
 80009be:	2800      	cmp	r0, #0
 80009c0:	d1f7      	bne.n	80009b2 <main+0xbc>
	  while(HAL_I2C_Init(&hi2c2) != HAL_OK);
 80009c2:	f240 607c 	movw	r0, #1660	; 0x67c
 80009c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80009ca:	f001 fb0f 	bl	8001fec <HAL_I2C_Init>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d1f7      	bne.n	80009c2 <main+0xcc>
	  tofInit(1); // set long range mode (up to 2m)
 80009d2:	2001      	movs	r0, #1
 80009d4:	f000 fdbe 	bl	8001554 <tofInit>
	  tofGetModel(&model, &revision);
 80009d8:	a904      	add	r1, sp, #16
 80009da:	a805      	add	r0, sp, #20
 80009dc:	f000 fe11 	bl	8001602 <tofGetModel>
	while(model != 238 || revision != 16)
 80009e0:	9b05      	ldr	r3, [sp, #20]
 80009e2:	2bee      	cmp	r3, #238	; 0xee
 80009e4:	d1e5      	bne.n	80009b2 <main+0xbc>
 80009e6:	9b04      	ldr	r3, [sp, #16]
 80009e8:	2b10      	cmp	r3, #16
 80009ea:	d1e2      	bne.n	80009b2 <main+0xbc>
	HAL_Delay(2000);
 80009ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009f0:	f000 feb9 	bl	8001766 <HAL_Delay>
	HAL_GPIO_WritePin(USB_Enable_GPIO_Port, USB_Enable_Pin, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2108      	movs	r1, #8
 80009f8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80009fc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000a00:	f001 f8ce 	bl	8001ba0 <HAL_GPIO_WritePin>
	  if(measureFlag == 1)
 8000a04:	f240 4351 	movw	r3, #1105	; 0x451
 8000a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d1f8      	bne.n	8000a04 <main+0x10e>
		  measureFlag = 0;
 8000a12:	f240 4351 	movw	r3, #1105	; 0x451
 8000a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	701d      	strb	r5, [r3, #0]
		  homingCounter = 0;
 8000a1e:	f240 4350 	movw	r3, #1104	; 0x450
 8000a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a26:	701d      	strb	r5, [r3, #0]
		  uint16_t distance = measureDistanceAt(pitch, yaw);
 8000a28:	f240 4352 	movw	r3, #1106	; 0x452
 8000a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a30:	f240 0200 	movw	r2, #0
 8000a34:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a38:	8811      	ldrh	r1, [r2, #0]
 8000a3a:	8818      	ldrh	r0, [r3, #0]
 8000a3c:	f000 f850 	bl	8000ae0 <measureDistanceAt>
		  memset(message, 0, 10);
 8000a40:	ac01      	add	r4, sp, #4
 8000a42:	9501      	str	r5, [sp, #4]
 8000a44:	9502      	str	r5, [sp, #8]
 8000a46:	f8ad 500c 	strh.w	r5, [sp, #12]
		  itoa(distance, (char*)&message[0], 10);
 8000a4a:	220a      	movs	r2, #10
 8000a4c:	4621      	mov	r1, r4
 8000a4e:	f005 fdf1 	bl	8006634 <itoa>
		  strcat(message, "\n");
 8000a52:	4620      	mov	r0, r4
 8000a54:	f7ff fb7a 	bl	800014c <strlen>
 8000a58:	f646 035c 	movw	r3, #26716	; 0x685c
 8000a5c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	5223      	strh	r3, [r4, r0]
		  CDC_Transmit_FS((uint8_t*)&message[0], strlen(message));
 8000a64:	4620      	mov	r0, r4
 8000a66:	f7ff fb71 	bl	800014c <strlen>
 8000a6a:	b281      	uxth	r1, r0
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	f005 fba9 	bl	80061c4 <CDC_Transmit_FS>
 8000a72:	e7c7      	b.n	8000a04 <main+0x10e>

08000a74 <setPitch>:

uint16_t pitch = 0, yaw = 90;
uint8_t measureFlag = 0, homingCounter = 0;

void setPitch(uint16_t degrees)
{
 8000a74:	b508      	push	{r3, lr}
	if(degrees > 90)
 8000a76:	285a      	cmp	r0, #90	; 0x5a
 8000a78:	d900      	bls.n	8000a7c <setPitch+0x8>
		degrees = 90;
 8000a7a:	205a      	movs	r0, #90	; 0x5a
	if(degrees < 0)
		degrees = 0;
	uint16_t pitch = ((float)(pitchMax-pitchMin)/90.0f)*degrees + pitchMin;
 8000a7c:	f7ff fc28 	bl	80002d0 <__aeabi_i2f>
 8000a80:	f243 3133 	movw	r1, #13107	; 0x3333
 8000a84:	f6c3 71f3 	movt	r1, #16371	; 0x3ff3
 8000a88:	f7ff fc76 	bl	8000378 <__aeabi_fmul>
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	f2c4 3182 	movt	r1, #17282	; 0x4382
 8000a92:	f7ff fb69 	bl	8000168 <__addsf3>
 8000a96:	f7ff fdbf 	bl	8000618 <__aeabi_f2uiz>
 8000a9a:	b280      	uxth	r0, r0
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, pitch);
 8000a9c:	f240 7318 	movw	r3, #1816	; 0x718
 8000aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	6358      	str	r0, [r3, #52]	; 0x34
}
 8000aa8:	bd08      	pop	{r3, pc}

08000aaa <setYaw>:

void setYaw(uint16_t degrees)
{
 8000aaa:	b508      	push	{r3, lr}
	if(degrees > 180)
 8000aac:	28b4      	cmp	r0, #180	; 0xb4
 8000aae:	d900      	bls.n	8000ab2 <setYaw+0x8>
		degrees = 180;
 8000ab0:	20b4      	movs	r0, #180	; 0xb4
	if(degrees < 0)
		degrees = 0;
	uint16_t yaw = ((float)(yawMax-yawMin)/180.0f)*degrees + yawMin;
 8000ab2:	f7ff fc0d 	bl	80002d0 <__aeabi_i2f>
 8000ab6:	f64d 51de 	movw	r1, #56798	; 0xddde
 8000aba:	f6c3 71fd 	movt	r1, #16381	; 0x3ffd
 8000abe:	f7ff fc5b 	bl	8000378 <__aeabi_fmul>
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f2c4 21c4 	movt	r1, #17092	; 0x42c4
 8000ac8:	f7ff fb4e 	bl	8000168 <__addsf3>
 8000acc:	f7ff fda4 	bl	8000618 <__aeabi_f2uiz>
 8000ad0:	b280      	uxth	r0, r0
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, yaw);
 8000ad2:	f240 7318 	movw	r3, #1816	; 0x718
 8000ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	6398      	str	r0, [r3, #56]	; 0x38
}
 8000ade:	bd08      	pop	{r3, pc}

08000ae0 <measureDistanceAt>:

uint16_t measureDistanceAt(uint16_t pitch, uint16_t yaw)
{
 8000ae0:	b538      	push	{r3, r4, r5, lr}
 8000ae2:	4605      	mov	r5, r0
 8000ae4:	460c      	mov	r4, r1
	setPitch(pitch);
 8000ae6:	f7ff ffc5 	bl	8000a74 <setPitch>
	setYaw(yaw);
 8000aea:	4620      	mov	r0, r4
 8000aec:	f7ff ffdd 	bl	8000aaa <setYaw>
	if(pitch==0 && yaw==0)
 8000af0:	b905      	cbnz	r5, 8000af4 <measureDistanceAt+0x14>
 8000af2:	b134      	cbz	r4, 8000b02 <measureDistanceAt+0x22>
		HAL_Delay(2000);
	else
		HAL_Delay(50);
 8000af4:	2032      	movs	r0, #50	; 0x32
 8000af6:	f000 fe36 	bl	8001766 <HAL_Delay>

	return (uint16_t)tofReadDistance();
 8000afa:	f000 fd4a 	bl	8001592 <tofReadDistance>
}
 8000afe:	b280      	uxth	r0, r0
 8000b00:	bd38      	pop	{r3, r4, r5, pc}
		HAL_Delay(2000);
 8000b02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b06:	f000 fe2e 	bl	8001766 <HAL_Delay>
 8000b0a:	e7f6      	b.n	8000afa <measureDistanceAt+0x1a>

08000b0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b16:	699a      	ldr	r2, [r3, #24]
 8000b18:	f042 0201 	orr.w	r2, r2, #1
 8000b1c:	619a      	str	r2, [r3, #24]
 8000b1e:	699a      	ldr	r2, [r3, #24]
 8000b20:	f002 0201 	and.w	r2, r2, #1
 8000b24:	9200      	str	r2, [sp, #0]
 8000b26:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b28:	69da      	ldr	r2, [r3, #28]
 8000b2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b2e:	61da      	str	r2, [r3, #28]
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	9301      	str	r3, [sp, #4]
 8000b38:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000b40:	6853      	ldr	r3, [r2, #4]
 8000b42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b4a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4c:	b002      	add	sp, #8
 8000b4e:	4770      	bx	lr

08000b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b50:	b510      	push	{r4, lr}
 8000b52:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	2300      	movs	r3, #0
 8000b56:	9302      	str	r3, [sp, #8]
 8000b58:	9303      	str	r3, [sp, #12]
 8000b5a:	9304      	str	r3, [sp, #16]
 8000b5c:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C2)
 8000b5e:	6802      	ldr	r2, [r0, #0]
 8000b60:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8000b64:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d001      	beq.n	8000b70 <HAL_I2C_MspInit+0x20>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000b6c:	b006      	add	sp, #24
 8000b6e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b70:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000b74:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000b78:	69a3      	ldr	r3, [r4, #24]
 8000b7a:	f043 0308 	orr.w	r3, r3, #8
 8000b7e:	61a3      	str	r3, [r4, #24]
 8000b80:	69a3      	ldr	r3, [r4, #24]
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b8e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b90:	2312      	movs	r3, #18
 8000b92:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	a902      	add	r1, sp, #8
 8000b9a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000b9e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000ba2:	f000 fe62 	bl	800186a <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ba6:	69e3      	ldr	r3, [r4, #28]
 8000ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bac:	61e3      	str	r3, [r4, #28]
 8000bae:	69e3      	ldr	r3, [r4, #28]
 8000bb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bb4:	9301      	str	r3, [sp, #4]
 8000bb6:	9b01      	ldr	r3, [sp, #4]
}
 8000bb8:	e7d8      	b.n	8000b6c <HAL_I2C_MspInit+0x1c>

08000bba <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C2)
 8000bba:	6802      	ldr	r2, [r0, #0]
 8000bbc:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8000bc0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d000      	beq.n	8000bca <HAL_I2C_MspDeInit+0x10>
 8000bc8:	4770      	bx	lr
{
 8000bca:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bd4:	69da      	ldr	r2, [r3, #28]
 8000bd6:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000bda:	61da      	str	r2, [r3, #28]

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8000bdc:	f44f 6440 	mov.w	r4, #3072	; 0xc00
 8000be0:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000be4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be8:	4620      	mov	r0, r4
 8000bea:	f000 ff56 	bl	8001a9a <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8000bee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	f000 ff51 	bl	8001a9a <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8000bf8:	bd10      	pop	{r4, pc}

08000bfa <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bfa:	b500      	push	{lr}
 8000bfc:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 8000bfe:	6802      	ldr	r2, [r0, #0]
 8000c00:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8000c04:	d008      	beq.n	8000c18 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8000c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d010      	beq.n	8000c34 <HAL_TIM_Base_MspInit+0x3a>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c12:	b003      	add	sp, #12
 8000c14:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c20:	69da      	ldr	r2, [r3, #28]
 8000c22:	f042 0201 	orr.w	r2, r2, #1
 8000c26:	61da      	str	r2, [r3, #28]
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	9b00      	ldr	r3, [sp, #0]
 8000c32:	e7ee      	b.n	8000c12 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c3c:	69da      	ldr	r2, [r3, #28]
 8000c3e:	f042 0202 	orr.w	r2, r2, #2
 8000c42:	61da      	str	r2, [r3, #28]
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	9301      	str	r3, [sp, #4]
 8000c4c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4611      	mov	r1, r2
 8000c52:	201d      	movs	r0, #29
 8000c54:	f000 fdae 	bl	80017b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c58:	201d      	movs	r0, #29
 8000c5a:	f000 fde1 	bl	8001820 <HAL_NVIC_EnableIRQ>
}
 8000c5e:	e7d8      	b.n	8000c12 <HAL_TIM_Base_MspInit+0x18>

08000c60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c60:	b500      	push	{lr}
 8000c62:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	2300      	movs	r3, #0
 8000c66:	9302      	str	r3, [sp, #8]
 8000c68:	9303      	str	r3, [sp, #12]
 8000c6a:	9304      	str	r3, [sp, #16]
 8000c6c:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM2)
 8000c6e:	6803      	ldr	r3, [r0, #0]
 8000c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c74:	d002      	beq.n	8000c7c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c76:	b007      	add	sp, #28
 8000c78:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c84:	699a      	ldr	r2, [r3, #24]
 8000c86:	f042 0204 	orr.w	r2, r2, #4
 8000c8a:	619a      	str	r2, [r3, #24]
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c96:	2303      	movs	r3, #3
 8000c98:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	a902      	add	r1, sp, #8
 8000ca2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ca6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000caa:	f000 fdde 	bl	800186a <HAL_GPIO_Init>
}
 8000cae:	e7e2      	b.n	8000c76 <HAL_TIM_MspPostInit+0x16>

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	e7fe      	b.n	8000cb6 <BusFault_Handler>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler>

08000cba <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	4770      	bx	lr

08000cbe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	4770      	bx	lr

08000cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc2:	f000 fd3d 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc6:	bd08      	pop	{r3, pc}

08000cc8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000cc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000cca:	f241 30f8 	movw	r0, #5112	; 0x13f8
 8000cce:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000cd2:	f002 f978 	bl	8002fc6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000cd6:	bd08      	pop	{r3, pc}

08000cd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cd8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(homingCounter < 10)
 8000cda:	f240 4350 	movw	r3, #1104	; 0x450
 8000cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b09      	cmp	r3, #9
 8000ce6:	d805      	bhi.n	8000cf4 <TIM3_IRQHandler+0x1c>
		homingCounter++;
 8000ce8:	f240 4250 	movw	r2, #1104	; 0x450
 8000cec:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	7013      	strb	r3, [r2, #0]

	if(homingCounter > 5 && (pitch != 0 || yaw != 90))
 8000cf4:	f240 4350 	movw	r3, #1104	; 0x450
 8000cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b05      	cmp	r3, #5
 8000d00:	d91d      	bls.n	8000d3e <TIM3_IRQHandler+0x66>
 8000d02:	f240 4352 	movw	r3, #1106	; 0x452
 8000d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	b933      	cbnz	r3, 8000d1c <TIM3_IRQHandler+0x44>
 8000d0e:	f240 0300 	movw	r3, #0
 8000d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	2b5a      	cmp	r3, #90	; 0x5a
 8000d1a:	d010      	beq.n	8000d3e <TIM3_IRQHandler+0x66>
	{
		pitch = 0;
 8000d1c:	f240 4352 	movw	r3, #1106	; 0x452
 8000d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d24:	2000      	movs	r0, #0
 8000d26:	8018      	strh	r0, [r3, #0]
		yaw = 90;
 8000d28:	f240 0400 	movw	r4, #0
 8000d2c:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000d30:	235a      	movs	r3, #90	; 0x5a
 8000d32:	8023      	strh	r3, [r4, #0]
		setPitch(pitch);
 8000d34:	f7ff fe9e 	bl	8000a74 <setPitch>
		setYaw(yaw);
 8000d38:	8820      	ldrh	r0, [r4, #0]
 8000d3a:	f7ff feb6 	bl	8000aaa <setYaw>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d3e:	f240 60d0 	movw	r0, #1744	; 0x6d0
 8000d42:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000d46:	f003 f910 	bl	8003f6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d4a:	bd10      	pop	{r4, pc}

08000d4c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d4c:	4770      	bx	lr

08000d4e <decodeTimeout>:
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
static uint16_t decodeTimeout(uint16_t reg_val)
{
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8000d4e:	b2c3      	uxtb	r3, r0
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8000d50:	0a00      	lsrs	r0, r0, #8
  return (uint16_t)((reg_val & 0x00FF) <<
 8000d52:	fa03 f000 	lsl.w	r0, r3, r0
 8000d56:	b280      	uxth	r0, r0
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8000d58:	3001      	adds	r0, #1
}
 8000d5a:	b280      	uxth	r0, r0
 8000d5c:	4770      	bx	lr

08000d5e <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
static uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8000d5e:	f44f 533c 	mov.w	r3, #12032	; 0x2f00
 8000d62:	f2c0 033a 	movt	r3, #58	; 0x3a
 8000d66:	fb03 f101 	mul.w	r1, r3, r1
 8000d6a:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
 8000d6e:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 8000d72:	f2c1 0262 	movt	r2, #4194	; 0x1062
 8000d76:	fba2 3101 	umull	r3, r1, r2, r1
 8000d7a:	098b      	lsrs	r3, r1, #6

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8000d7c:	09c9      	lsrs	r1, r1, #7
 8000d7e:	fb03 1000 	mla	r0, r3, r0, r1
 8000d82:	fba2 3000 	umull	r3, r0, r2, r0
}
 8000d86:	0980      	lsrs	r0, r0, #6
 8000d88:	4770      	bx	lr

08000d8a <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
static uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8000d8a:	f44f 533c 	mov.w	r3, #12032	; 0x2f00
 8000d8e:	f2c0 033a 	movt	r3, #58	; 0x3a
 8000d92:	fb03 f101 	mul.w	r1, r3, r1
 8000d96:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
 8000d9a:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8000d9e:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8000da2:	fba3 3101 	umull	r3, r1, r3, r1
 8000da6:	098a      	lsrs	r2, r1, #6

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8000da8:	09c9      	lsrs	r1, r1, #7
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	fb03 1000 	mla	r0, r3, r0, r1
}
 8000db2:	fbb0 f0f2 	udiv	r0, r0, r2
 8000db6:	4770      	bx	lr

08000db8 <encodeTimeout>:
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
 8000db8:	b168      	cbz	r0, 8000dd6 <encodeTimeout+0x1e>
  {
    ls_byte = timeout_mclks - 1;
 8000dba:	3801      	subs	r0, #1
  uint16_t ms_byte = 0;
 8000dbc:	2300      	movs	r3, #0

    while ((ls_byte & 0xFFFFFF00) > 0)
 8000dbe:	e002      	b.n	8000dc6 <encodeTimeout+0xe>
    {
      ls_byte >>= 1;
 8000dc0:	0840      	lsrs	r0, r0, #1
      ms_byte++;
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b29b      	uxth	r3, r3
    while ((ls_byte & 0xFFFFFF00) > 0)
 8000dc6:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
 8000dca:	d1f9      	bne.n	8000dc0 <encodeTimeout+0x8>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	b2c0      	uxtb	r0, r0
 8000dd2:	4318      	orrs	r0, r3
 8000dd4:	4770      	bx	lr
  }
  else { return 0; }
}
 8000dd6:	4770      	bx	lr

08000dd8 <writeRegList>:
{
 8000dd8:	b530      	push	{r4, r5, lr}
 8000dda:	b083      	sub	sp, #12
	uint8_t ucCount = *ucList++; // count is the first element in the list
 8000ddc:	1c45      	adds	r5, r0, #1
 8000dde:	7804      	ldrb	r4, [r0, #0]
	while (ucCount)
 8000de0:	e00e      	b.n	8000e00 <writeRegList+0x28>
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucList, 2, 1000);
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2302      	movs	r3, #2
 8000dea:	462a      	mov	r2, r5
 8000dec:	2152      	movs	r1, #82	; 0x52
 8000dee:	f240 607c 	movw	r0, #1660	; 0x67c
 8000df2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000df6:	f001 f9f7 	bl	80021e8 <HAL_I2C_Master_Transmit>
		ucList += 2;
 8000dfa:	3502      	adds	r5, #2
		ucCount--;
 8000dfc:	3c01      	subs	r4, #1
 8000dfe:	b2e4      	uxtb	r4, r4
	while (ucCount)
 8000e00:	2c00      	cmp	r4, #0
 8000e02:	d1ee      	bne.n	8000de2 <writeRegList+0xa>
} /* writeRegList() */
 8000e04:	b003      	add	sp, #12
 8000e06:	bd30      	pop	{r4, r5, pc}

08000e08 <writeReg16>:
{
 8000e08:	b500      	push	{lr}
 8000e0a:	b085      	sub	sp, #20
	ucTemp[0] = ucAddr;
 8000e0c:	f88d 000c 	strb.w	r0, [sp, #12]
	ucTemp[1] = (uint8_t)(usValue >> 8); // MSB first
 8000e10:	0a0b      	lsrs	r3, r1, #8
 8000e12:	f88d 300d 	strb.w	r3, [sp, #13]
	ucTemp[2] = (uint8_t)usValue;
 8000e16:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, 3, 1000);
 8000e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2303      	movs	r3, #3
 8000e22:	aa03      	add	r2, sp, #12
 8000e24:	2152      	movs	r1, #82	; 0x52
 8000e26:	f240 607c 	movw	r0, #1660	; 0x67c
 8000e2a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000e2e:	f001 f9db 	bl	80021e8 <HAL_I2C_Master_Transmit>
} /* writeReg16() */
 8000e32:	b005      	add	sp, #20
 8000e34:	f85d fb04 	ldr.w	pc, [sp], #4

08000e38 <writeReg>:
{
 8000e38:	b500      	push	{lr}
 8000e3a:	b085      	sub	sp, #20
	ucTemp[0] = ucAddr;
 8000e3c:	f88d 000c 	strb.w	r0, [sp, #12]
	ucTemp[1] = ucValue;
 8000e40:	f88d 100d 	strb.w	r1, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, 2, 1000);
 8000e44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	aa03      	add	r2, sp, #12
 8000e4e:	2152      	movs	r1, #82	; 0x52
 8000e50:	f240 607c 	movw	r0, #1660	; 0x67c
 8000e54:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000e58:	f001 f9c6 	bl	80021e8 <HAL_I2C_Master_Transmit>
} /* writeReg() */
 8000e5c:	b005      	add	sp, #20
 8000e5e:	f85d fb04 	ldr.w	pc, [sp], #4

08000e62 <readMulti>:
{
 8000e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e64:	b085      	sub	sp, #20
 8000e66:	460e      	mov	r6, r1
 8000e68:	4617      	mov	r7, r2
 8000e6a:	aa04      	add	r2, sp, #16
 8000e6c:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8000e70:	f240 647c 	movw	r4, #1660	; 0x67c
 8000e74:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000e78:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000e7c:	9500      	str	r5, [sp, #0]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	2152      	movs	r1, #82	; 0x52
 8000e82:	4620      	mov	r0, r4
 8000e84:	f001 f9b0 	bl	80021e8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, pBuf, iCount, 1000);
 8000e88:	9500      	str	r5, [sp, #0]
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4632      	mov	r2, r6
 8000e8e:	2153      	movs	r1, #83	; 0x53
 8000e90:	4620      	mov	r0, r4
 8000e92:	f001 fa61 	bl	8002358 <HAL_I2C_Master_Receive>
} /* readMulti() */
 8000e96:	b005      	add	sp, #20
 8000e98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e9a <readReg16>:
{
 8000e9a:	b530      	push	{r4, r5, lr}
 8000e9c:	b087      	sub	sp, #28
 8000e9e:	aa06      	add	r2, sp, #24
 8000ea0:	f802 0d09 	strb.w	r0, [r2, #-9]!
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8000ea4:	f240 647c 	movw	r4, #1660	; 0x67c
 8000ea8:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000eac:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000eb0:	9500      	str	r5, [sp, #0]
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	2152      	movs	r1, #82	; 0x52
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f001 f996 	bl	80021e8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, ucTemp, 2, 1000);
 8000ebc:	9500      	str	r5, [sp, #0]
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	aa05      	add	r2, sp, #20
 8000ec2:	2153      	movs	r1, #83	; 0x53
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	f001 fa47 	bl	8002358 <HAL_I2C_Master_Receive>
	return (unsigned short)((ucTemp[0]<<8) + ucTemp[1]);
 8000eca:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8000ece:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8000ed2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
} /* readReg16() */
 8000ed6:	b280      	uxth	r0, r0
 8000ed8:	b007      	add	sp, #28
 8000eda:	bd30      	pop	{r4, r5, pc}

08000edc <readReg>:
{
 8000edc:	b530      	push	{r4, r5, lr}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	aa06      	add	r2, sp, #24
 8000ee2:	f802 0d09 	strb.w	r0, [r2, #-9]!
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8000ee6:	f240 647c 	movw	r4, #1660	; 0x67c
 8000eea:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000eee:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000ef2:	9500      	str	r5, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	2152      	movs	r1, #82	; 0x52
 8000ef8:	4620      	mov	r0, r4
 8000efa:	f001 f975 	bl	80021e8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 8000efe:	9500      	str	r5, [sp, #0]
 8000f00:	2301      	movs	r3, #1
 8000f02:	f10d 0217 	add.w	r2, sp, #23
 8000f06:	2153      	movs	r1, #83	; 0x53
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f001 fa25 	bl	8002358 <HAL_I2C_Master_Receive>
} /* ReadReg() */
 8000f0e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000f12:	b007      	add	sp, #28
 8000f14:	bd30      	pop	{r4, r5, pc}

08000f16 <getSpadInfo>:
{
 8000f16:	b570      	push	{r4, r5, r6, lr}
 8000f18:	4606      	mov	r6, r0
 8000f1a:	460d      	mov	r5, r1
  writeRegList(ucSPAD0);
 8000f1c:	f240 00cc 	movw	r0, #204	; 0xcc
 8000f20:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000f24:	f7ff ff58 	bl	8000dd8 <writeRegList>
  writeReg(0x83, readReg(0x83) | 0x04);
 8000f28:	2083      	movs	r0, #131	; 0x83
 8000f2a:	f7ff ffd7 	bl	8000edc <readReg>
 8000f2e:	f040 0104 	orr.w	r1, r0, #4
 8000f32:	b2c9      	uxtb	r1, r1
 8000f34:	2083      	movs	r0, #131	; 0x83
 8000f36:	f7ff ff7f 	bl	8000e38 <writeReg>
  writeRegList(ucSPAD1);
 8000f3a:	f240 00d8 	movw	r0, #216	; 0xd8
 8000f3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000f42:	f7ff ff49 	bl	8000dd8 <writeRegList>
  iTimeout = 0;
 8000f46:	2400      	movs	r4, #0
  while(iTimeout < MAX_TIMEOUT)
 8000f48:	2c31      	cmp	r4, #49	; 0x31
 8000f4a:	dc08      	bgt.n	8000f5e <getSpadInfo+0x48>
    if (readReg(0x83) != 0x00) break;
 8000f4c:	2083      	movs	r0, #131	; 0x83
 8000f4e:	f7ff ffc5 	bl	8000edc <readReg>
 8000f52:	b920      	cbnz	r0, 8000f5e <getSpadInfo+0x48>
    iTimeout++;
 8000f54:	3401      	adds	r4, #1
    HAL_Delay(5);//usleep(5000);
 8000f56:	2005      	movs	r0, #5
 8000f58:	f000 fc05 	bl	8001766 <HAL_Delay>
 8000f5c:	e7f4      	b.n	8000f48 <getSpadInfo+0x32>
  if (iTimeout == MAX_TIMEOUT)
 8000f5e:	2c32      	cmp	r4, #50	; 0x32
 8000f60:	d024      	beq.n	8000fac <getSpadInfo+0x96>
  writeReg(0x83,0x01);
 8000f62:	2101      	movs	r1, #1
 8000f64:	2083      	movs	r0, #131	; 0x83
 8000f66:	f7ff ff67 	bl	8000e38 <writeReg>
  ucTemp = readReg(0x92);
 8000f6a:	2092      	movs	r0, #146	; 0x92
 8000f6c:	f7ff ffb6 	bl	8000edc <readReg>
  *pCount = (ucTemp & 0x7f);
 8000f70:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8000f74:	7033      	strb	r3, [r6, #0]
  *pTypeIsAperture = (ucTemp & 0x80);
 8000f76:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8000f7a:	7028      	strb	r0, [r5, #0]
  writeReg(0x81,0x00);
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2081      	movs	r0, #129	; 0x81
 8000f80:	f7ff ff5a 	bl	8000e38 <writeReg>
  writeReg(0xff,0x06);
 8000f84:	2106      	movs	r1, #6
 8000f86:	20ff      	movs	r0, #255	; 0xff
 8000f88:	f7ff ff56 	bl	8000e38 <writeReg>
  writeReg(0x83, readReg(0x83) & ~0x04);
 8000f8c:	2083      	movs	r0, #131	; 0x83
 8000f8e:	f7ff ffa5 	bl	8000edc <readReg>
 8000f92:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8000f96:	2083      	movs	r0, #131	; 0x83
 8000f98:	f7ff ff4e 	bl	8000e38 <writeReg>
  writeRegList(ucSPAD2);
 8000f9c:	f240 00e4 	movw	r0, #228	; 0xe4
 8000fa0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000fa4:	f7ff ff18 	bl	8000dd8 <writeRegList>
  return 1;
 8000fa8:	2001      	movs	r0, #1
} /* getSpadInfo() */
 8000faa:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8000fac:	2000      	movs	r0, #0
 8000fae:	e7fc      	b.n	8000faa <getSpadInfo+0x94>

08000fb0 <getSequenceStepTimeouts>:

static void getSequenceStepTimeouts(uint8_t enables, SequenceStepTimeouts * timeouts)
{
 8000fb0:	b538      	push	{r3, r4, r5, lr}
 8000fb2:	4605      	mov	r5, r0
 8000fb4:	460c      	mov	r4, r1
  timeouts->pre_range_vcsel_period_pclks = ((readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8000fb6:	2050      	movs	r0, #80	; 0x50
 8000fb8:	f7ff ff90 	bl	8000edc <readReg>
 8000fbc:	b280      	uxth	r0, r0
 8000fbe:	3001      	adds	r0, #1
 8000fc0:	b280      	uxth	r0, r0
 8000fc2:	0040      	lsls	r0, r0, #1
 8000fc4:	8020      	strh	r0, [r4, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8000fc6:	2046      	movs	r0, #70	; 0x46
 8000fc8:	f7ff ff88 	bl	8000edc <readReg>
 8000fcc:	b280      	uxth	r0, r0
 8000fce:	3001      	adds	r0, #1
 8000fd0:	b280      	uxth	r0, r0
 8000fd2:	80a0      	strh	r0, [r4, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8000fd4:	7821      	ldrb	r1, [r4, #0]
 8000fd6:	f7ff fec2 	bl	8000d5e <timeoutMclksToMicroseconds>
  timeouts->msrc_dss_tcc_us =
 8000fda:	60e0      	str	r0, [r4, #12]
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8000fdc:	2051      	movs	r0, #81	; 0x51
 8000fde:	f7ff ff5c 	bl	8000e9a <readReg16>
 8000fe2:	f7ff feb4 	bl	8000d4e <decodeTimeout>
  timeouts->pre_range_mclks =
 8000fe6:	80e0      	strh	r0, [r4, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8000fe8:	7821      	ldrb	r1, [r4, #0]
 8000fea:	f7ff feb8 	bl	8000d5e <timeoutMclksToMicroseconds>
  timeouts->pre_range_us =
 8000fee:	6120      	str	r0, [r4, #16]
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->final_range_vcsel_period_pclks = ((readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 8000ff0:	2070      	movs	r0, #112	; 0x70
 8000ff2:	f7ff ff73 	bl	8000edc <readReg>
 8000ff6:	b280      	uxth	r0, r0
 8000ff8:	3001      	adds	r0, #1
 8000ffa:	b280      	uxth	r0, r0
 8000ffc:	0040      	lsls	r0, r0, #1
 8000ffe:	8060      	strh	r0, [r4, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001000:	2071      	movs	r0, #113	; 0x71
 8001002:	f7ff ff4a 	bl	8000e9a <readReg16>
 8001006:	f7ff fea2 	bl	8000d4e <decodeTimeout>
  timeouts->final_range_mclks =
 800100a:	8120      	strh	r0, [r4, #8]

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 800100c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001010:	d002      	beq.n	8001018 <getSequenceStepTimeouts+0x68>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8001012:	88e3      	ldrh	r3, [r4, #6]
 8001014:	1ac0      	subs	r0, r0, r3
 8001016:	8120      	strh	r0, [r4, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001018:	78a1      	ldrb	r1, [r4, #2]
 800101a:	8920      	ldrh	r0, [r4, #8]
 800101c:	f7ff fe9f 	bl	8000d5e <timeoutMclksToMicroseconds>
  timeouts->final_range_us =
 8001020:	6160      	str	r0, [r4, #20]
                               timeouts->final_range_vcsel_period_pclks);
} /* getSequenceStepTimeouts() */
 8001022:	bd38      	pop	{r3, r4, r5, pc}

08001024 <getMeasurementTimingBudget>:
  }
  return 1;
}

static uint32_t getMeasurementTimingBudget(void)
{
 8001024:	b510      	push	{r4, lr}
 8001026:	b086      	sub	sp, #24
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001028:	2001      	movs	r0, #1
 800102a:	f7ff ff57 	bl	8000edc <readReg>
 800102e:	4604      	mov	r4, r0
  getSequenceStepTimeouts(enables, &timeouts);
 8001030:	4669      	mov	r1, sp
 8001032:	f7ff ffbd 	bl	8000fb0 <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 8001036:	f014 0f10 	tst.w	r4, #16
 800103a:	d01b      	beq.n	8001074 <getMeasurementTimingBudget+0x50>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 800103c:	9803      	ldr	r0, [sp, #12]
 800103e:	f600 5084 	addw	r0, r0, #3460	; 0xd84
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 8001042:	f014 0f08 	tst.w	r4, #8
 8001046:	d018      	beq.n	800107a <getMeasurementTimingBudget+0x56>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001048:	9b03      	ldr	r3, [sp, #12]
 800104a:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 800104e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
  else if (enables & SEQUENCE_ENABLE_MSRC)
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001052:	f014 0f40 	tst.w	r4, #64	; 0x40
 8001056:	d003      	beq.n	8001060 <getMeasurementTimingBudget+0x3c>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001058:	9b04      	ldr	r3, [sp, #16]
 800105a:	4418      	add	r0, r3
 800105c:	f500 7025 	add.w	r0, r0, #660	; 0x294
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 8001060:	f014 0f80 	tst.w	r4, #128	; 0x80
 8001064:	d111      	bne.n	800108a <getMeasurementTimingBudget+0x66>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 8001066:	f240 4354 	movw	r3, #1108	; 0x454
 800106a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800106e:	6018      	str	r0, [r3, #0]
  return budget_us;
}
 8001070:	b006      	add	sp, #24
 8001072:	bd10      	pop	{r4, pc}
  uint32_t budget_us = StartOverhead + EndOverhead;
 8001074:	f640 3036 	movw	r0, #2870	; 0xb36
 8001078:	e7e3      	b.n	8001042 <getMeasurementTimingBudget+0x1e>
  else if (enables & SEQUENCE_ENABLE_MSRC)
 800107a:	f014 0f04 	tst.w	r4, #4
 800107e:	d0e8      	beq.n	8001052 <getMeasurementTimingBudget+0x2e>
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001080:	9b03      	ldr	r3, [sp, #12]
 8001082:	4418      	add	r0, r3
 8001084:	f500 7025 	add.w	r0, r0, #660	; 0x294
 8001088:	e7e3      	b.n	8001052 <getMeasurementTimingBudget+0x2e>
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 800108a:	9b05      	ldr	r3, [sp, #20]
 800108c:	4418      	add	r0, r3
 800108e:	f200 2026 	addw	r0, r0, #550	; 0x226
 8001092:	e7e8      	b.n	8001066 <getMeasurementTimingBudget+0x42>

08001094 <setMeasurementTimingBudget>:
  if (budget_us < MinTimingBudget) { return 0; }
 8001094:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8001098:	4298      	cmp	r0, r3
 800109a:	d801      	bhi.n	80010a0 <setMeasurementTimingBudget+0xc>
 800109c:	2000      	movs	r0, #0
}
 800109e:	4770      	bx	lr
{
 80010a0:	b570      	push	{r4, r5, r6, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	4605      	mov	r5, r0
  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff ff18 	bl	8000edc <readReg>
 80010ac:	4604      	mov	r4, r0
  getSequenceStepTimeouts(enables, &timeouts);
 80010ae:	4669      	mov	r1, sp
 80010b0:	f7ff ff7e 	bl	8000fb0 <getSequenceStepTimeouts>
  if (enables & SEQUENCE_ENABLE_TCC)
 80010b4:	f014 0f10 	tst.w	r4, #16
 80010b8:	d017      	beq.n	80010ea <setMeasurementTimingBudget+0x56>
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80010ba:	9b03      	ldr	r3, [sp, #12]
 80010bc:	f603 3336 	addw	r3, r3, #2870	; 0xb36
  if (enables & SEQUENCE_ENABLE_DSS)
 80010c0:	f014 0f08 	tst.w	r4, #8
 80010c4:	d014      	beq.n	80010f0 <setMeasurementTimingBudget+0x5c>
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80010c6:	9a03      	ldr	r2, [sp, #12]
 80010c8:	f202 22b2 	addw	r2, r2, #690	; 0x2b2
 80010cc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 80010d0:	f014 0640 	ands.w	r6, r4, #64	; 0x40
 80010d4:	d003      	beq.n	80010de <setMeasurementTimingBudget+0x4a>
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80010d6:	9804      	ldr	r0, [sp, #16]
 80010d8:	4403      	add	r3, r0
 80010da:	f503 7325 	add.w	r3, r3, #660	; 0x294
  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 80010de:	f014 0f80 	tst.w	r4, #128	; 0x80
 80010e2:	d10d      	bne.n	8001100 <setMeasurementTimingBudget+0x6c>
  return 1;
 80010e4:	2001      	movs	r0, #1
}
 80010e6:	b006      	add	sp, #24
 80010e8:	bd70      	pop	{r4, r5, r6, pc}
  used_budget_us = StartOverhead + EndOverhead;
 80010ea:	f640 03e8 	movw	r3, #2280	; 0x8e8
 80010ee:	e7e7      	b.n	80010c0 <setMeasurementTimingBudget+0x2c>
  else if (enables & SEQUENCE_ENABLE_MSRC)
 80010f0:	f014 0f04 	tst.w	r4, #4
 80010f4:	d0ec      	beq.n	80010d0 <setMeasurementTimingBudget+0x3c>
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80010f6:	9803      	ldr	r0, [sp, #12]
 80010f8:	4403      	add	r3, r0
 80010fa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80010fe:	e7e7      	b.n	80010d0 <setMeasurementTimingBudget+0x3c>
    used_budget_us += FinalRangeOverhead;
 8001100:	f203 2326 	addw	r3, r3, #550	; 0x226
    if (used_budget_us > budget_us)
 8001104:	429d      	cmp	r5, r3
 8001106:	d317      	bcc.n	8001138 <setMeasurementTimingBudget+0xa4>
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8001108:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800110c:	1ae8      	subs	r0, r5, r3
 800110e:	f7ff fe3c 	bl	8000d8a <timeoutMicrosecondsToMclks>
    final_range_timeout_mclks =
 8001112:	b280      	uxth	r0, r0
    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8001114:	b11e      	cbz	r6, 800111e <setMeasurementTimingBudget+0x8a>
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001116:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800111a:	4418      	add	r0, r3
 800111c:	b280      	uxth	r0, r0
    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800111e:	f7ff fe4b 	bl	8000db8 <encodeTimeout>
 8001122:	4601      	mov	r1, r0
 8001124:	2071      	movs	r0, #113	; 0x71
 8001126:	f7ff fe6f 	bl	8000e08 <writeReg16>
    measurement_timing_budget_us = budget_us; // store for internal reuse
 800112a:	f240 4354 	movw	r3, #1108	; 0x454
 800112e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001132:	601d      	str	r5, [r3, #0]
  return 1;
 8001134:	2001      	movs	r0, #1
 8001136:	e7d6      	b.n	80010e6 <setMeasurementTimingBudget+0x52>
      return 0;
 8001138:	2000      	movs	r0, #0
 800113a:	e7d4      	b.n	80010e6 <setMeasurementTimingBudget+0x52>

0800113c <performSingleRefCalibration>:

static int performSingleRefCalibration(uint8_t vhv_init_byte)
{
 800113c:	b510      	push	{r4, lr}
int iTimeout;
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 800113e:	f040 0101 	orr.w	r1, r0, #1
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fe78 	bl	8000e38 <writeReg>

  iTimeout = 0;
 8001148:	2400      	movs	r4, #0
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 800114a:	2013      	movs	r0, #19
 800114c:	f7ff fec6 	bl	8000edc <readReg>
 8001150:	f010 0f07 	tst.w	r0, #7
 8001154:	d107      	bne.n	8001166 <performSingleRefCalibration+0x2a>
  {
    iTimeout++;
 8001156:	3401      	adds	r4, #1
    HAL_Delay(5);//usleep(5000);
 8001158:	2005      	movs	r0, #5
 800115a:	f000 fb04 	bl	8001766 <HAL_Delay>
    if (iTimeout > 100) { return 0; }
 800115e:	2c64      	cmp	r4, #100	; 0x64
 8001160:	ddf3      	ble.n	800114a <performSingleRefCalibration+0xe>
 8001162:	2000      	movs	r0, #0
 8001164:	e008      	b.n	8001178 <performSingleRefCalibration+0x3c>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001166:	2101      	movs	r1, #1
 8001168:	200b      	movs	r0, #11
 800116a:	f7ff fe65 	bl	8000e38 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 800116e:	2100      	movs	r1, #0
 8001170:	4608      	mov	r0, r1
 8001172:	f7ff fe61 	bl	8000e38 <writeReg>

  return 1;
 8001176:	2001      	movs	r0, #1
} /* performSingleRefCalibration() */
 8001178:	bd10      	pop	{r4, pc}

0800117a <setVcselPulsePeriod>:
{
 800117a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117c:	b087      	sub	sp, #28
 800117e:	4606      	mov	r6, r0
 8001180:	460d      	mov	r5, r1
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8001182:	0849      	lsrs	r1, r1, #1
 8001184:	3901      	subs	r1, #1
 8001186:	b2cc      	uxtb	r4, r1
  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001188:	2001      	movs	r0, #1
 800118a:	f7ff fea7 	bl	8000edc <readReg>
 800118e:	4607      	mov	r7, r0
  getSequenceStepTimeouts(enables, &timeouts);
 8001190:	4669      	mov	r1, sp
 8001192:	f7ff ff0d 	bl	8000fb0 <getSequenceStepTimeouts>
  if (type == VcselPeriodPreRange)
 8001196:	2e00      	cmp	r6, #0
 8001198:	d159      	bne.n	800124e <setVcselPulsePeriod+0xd4>
    switch (period_pclks)
 800119a:	f1a5 030c 	sub.w	r3, r5, #12
 800119e:	2b06      	cmp	r3, #6
 80011a0:	f200 80ee 	bhi.w	8001380 <setVcselPulsePeriod+0x206>
 80011a4:	e8df f003 	tbb	[pc, r3]
 80011a8:	ec42ec04 	.word	0xec42ec04
 80011ac:	ec47      	.short	0xec47
 80011ae:	4c          	.byte	0x4c
 80011af:	00          	.byte	0x00
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 80011b0:	2118      	movs	r1, #24
 80011b2:	2057      	movs	r0, #87	; 0x57
 80011b4:	f7ff fe40 	bl	8000e38 <writeReg>
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 80011b8:	2108      	movs	r1, #8
 80011ba:	2056      	movs	r0, #86	; 0x56
 80011bc:	f7ff fe3c 	bl	8000e38 <writeReg>
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 80011c0:	4621      	mov	r1, r4
 80011c2:	2050      	movs	r0, #80	; 0x50
 80011c4:	f7ff fe38 	bl	8000e38 <writeReg>
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 80011c8:	4629      	mov	r1, r5
 80011ca:	9804      	ldr	r0, [sp, #16]
 80011cc:	f7ff fddd 	bl	8000d8a <timeoutMicrosecondsToMclks>
    writeReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80011d0:	b280      	uxth	r0, r0
 80011d2:	f7ff fdf1 	bl	8000db8 <encodeTimeout>
 80011d6:	4601      	mov	r1, r0
 80011d8:	2051      	movs	r0, #81	; 0x51
 80011da:	f7ff fe15 	bl	8000e08 <writeReg16>
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 80011de:	4629      	mov	r1, r5
 80011e0:	9803      	ldr	r0, [sp, #12]
 80011e2:	f7ff fdd2 	bl	8000d8a <timeoutMicrosecondsToMclks>
    uint16_t new_msrc_timeout_mclks =
 80011e6:	b283      	uxth	r3, r0
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 80011e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011ec:	d82d      	bhi.n	800124a <setVcselPulsePeriod+0xd0>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 80011ee:	b2c1      	uxtb	r1, r0
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 80011f0:	3901      	subs	r1, #1
 80011f2:	b2c9      	uxtb	r1, r1
 80011f4:	2046      	movs	r0, #70	; 0x46
 80011f6:	f7ff fe1f 	bl	8000e38 <writeReg>
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80011fa:	f240 4354 	movw	r3, #1108	; 0x454
 80011fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	f7ff ff46 	bl	8001094 <setMeasurementTimingBudget>
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff fe67 	bl	8000edc <readReg>
 800120e:	4604      	mov	r4, r0
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001210:	2102      	movs	r1, #2
 8001212:	2001      	movs	r0, #1
 8001214:	f7ff fe10 	bl	8000e38 <writeReg>
  performSingleRefCalibration(0x0);
 8001218:	2000      	movs	r0, #0
 800121a:	f7ff ff8f 	bl	800113c <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 800121e:	4621      	mov	r1, r4
 8001220:	2001      	movs	r0, #1
 8001222:	f7ff fe09 	bl	8000e38 <writeReg>
  return 1;
 8001226:	2001      	movs	r0, #1
}
 8001228:	b007      	add	sp, #28
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 800122c:	2130      	movs	r1, #48	; 0x30
 800122e:	2057      	movs	r0, #87	; 0x57
 8001230:	f7ff fe02 	bl	8000e38 <writeReg>
        break;
 8001234:	e7c0      	b.n	80011b8 <setVcselPulsePeriod+0x3e>
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8001236:	2140      	movs	r1, #64	; 0x40
 8001238:	2057      	movs	r0, #87	; 0x57
 800123a:	f7ff fdfd 	bl	8000e38 <writeReg>
        break;
 800123e:	e7bb      	b.n	80011b8 <setVcselPulsePeriod+0x3e>
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8001240:	2150      	movs	r1, #80	; 0x50
 8001242:	2057      	movs	r0, #87	; 0x57
 8001244:	f7ff fdf8 	bl	8000e38 <writeReg>
        break;
 8001248:	e7b6      	b.n	80011b8 <setVcselPulsePeriod+0x3e>
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 800124a:	21ff      	movs	r1, #255	; 0xff
 800124c:	e7d2      	b.n	80011f4 <setVcselPulsePeriod+0x7a>
  else if (type == VcselPeriodFinalRange)
 800124e:	2e01      	cmp	r6, #1
 8001250:	d001      	beq.n	8001256 <setVcselPulsePeriod+0xdc>
    return 0;
 8001252:	2000      	movs	r0, #0
 8001254:	e7e8      	b.n	8001228 <setVcselPulsePeriod+0xae>
    switch (period_pclks)
 8001256:	f1a5 0308 	sub.w	r3, r5, #8
 800125a:	2b06      	cmp	r3, #6
 800125c:	f200 8092 	bhi.w	8001384 <setVcselPulsePeriod+0x20a>
 8001260:	e8df f003 	tbb	[pc, r3]
 8001264:	90379004 	.word	0x90379004
 8001268:	9054      	.short	0x9054
 800126a:	71          	.byte	0x71
 800126b:	00          	.byte	0x00
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 800126c:	2110      	movs	r1, #16
 800126e:	2048      	movs	r0, #72	; 0x48
 8001270:	f7ff fde2 	bl	8000e38 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001274:	2108      	movs	r1, #8
 8001276:	2047      	movs	r0, #71	; 0x47
 8001278:	f7ff fdde 	bl	8000e38 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 800127c:	2102      	movs	r1, #2
 800127e:	2032      	movs	r0, #50	; 0x32
 8001280:	f7ff fdda 	bl	8000e38 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8001284:	210c      	movs	r1, #12
 8001286:	2030      	movs	r0, #48	; 0x30
 8001288:	f7ff fdd6 	bl	8000e38 <writeReg>
        writeReg(0xFF, 0x01);
 800128c:	2101      	movs	r1, #1
 800128e:	20ff      	movs	r0, #255	; 0xff
 8001290:	f7ff fdd2 	bl	8000e38 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 8001294:	2130      	movs	r1, #48	; 0x30
 8001296:	4608      	mov	r0, r1
 8001298:	f7ff fdce 	bl	8000e38 <writeReg>
        writeReg(0xFF, 0x00);
 800129c:	2100      	movs	r1, #0
 800129e:	20ff      	movs	r0, #255	; 0xff
 80012a0:	f7ff fdca 	bl	8000e38 <writeReg>
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 80012a4:	4621      	mov	r1, r4
 80012a6:	2070      	movs	r0, #112	; 0x70
 80012a8:	f7ff fdc6 	bl	8000e38 <writeReg>
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 80012ac:	4629      	mov	r1, r5
 80012ae:	9805      	ldr	r0, [sp, #20]
 80012b0:	f7ff fd6b 	bl	8000d8a <timeoutMicrosecondsToMclks>
    uint16_t new_final_range_timeout_mclks =
 80012b4:	b280      	uxth	r0, r0
    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 80012b6:	f017 0f40 	tst.w	r7, #64	; 0x40
 80012ba:	d003      	beq.n	80012c4 <setVcselPulsePeriod+0x14a>
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 80012bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80012c0:	4418      	add	r0, r3
 80012c2:	b280      	uxth	r0, r0
    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80012c4:	f7ff fd78 	bl	8000db8 <encodeTimeout>
 80012c8:	4601      	mov	r1, r0
 80012ca:	2071      	movs	r0, #113	; 0x71
 80012cc:	f7ff fd9c 	bl	8000e08 <writeReg16>
 80012d0:	e793      	b.n	80011fa <setVcselPulsePeriod+0x80>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 80012d2:	2128      	movs	r1, #40	; 0x28
 80012d4:	2048      	movs	r0, #72	; 0x48
 80012d6:	f7ff fdaf 	bl	8000e38 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80012da:	2108      	movs	r1, #8
 80012dc:	2047      	movs	r0, #71	; 0x47
 80012de:	f7ff fdab 	bl	8000e38 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80012e2:	2103      	movs	r1, #3
 80012e4:	2032      	movs	r0, #50	; 0x32
 80012e6:	f7ff fda7 	bl	8000e38 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 80012ea:	2109      	movs	r1, #9
 80012ec:	2030      	movs	r0, #48	; 0x30
 80012ee:	f7ff fda3 	bl	8000e38 <writeReg>
        writeReg(0xFF, 0x01);
 80012f2:	2101      	movs	r1, #1
 80012f4:	20ff      	movs	r0, #255	; 0xff
 80012f6:	f7ff fd9f 	bl	8000e38 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 80012fa:	2120      	movs	r1, #32
 80012fc:	2030      	movs	r0, #48	; 0x30
 80012fe:	f7ff fd9b 	bl	8000e38 <writeReg>
        writeReg(0xFF, 0x00);
 8001302:	2100      	movs	r1, #0
 8001304:	20ff      	movs	r0, #255	; 0xff
 8001306:	f7ff fd97 	bl	8000e38 <writeReg>
        break;
 800130a:	e7cb      	b.n	80012a4 <setVcselPulsePeriod+0x12a>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 800130c:	2138      	movs	r1, #56	; 0x38
 800130e:	2048      	movs	r0, #72	; 0x48
 8001310:	f7ff fd92 	bl	8000e38 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001314:	2108      	movs	r1, #8
 8001316:	2047      	movs	r0, #71	; 0x47
 8001318:	f7ff fd8e 	bl	8000e38 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 800131c:	2103      	movs	r1, #3
 800131e:	2032      	movs	r0, #50	; 0x32
 8001320:	f7ff fd8a 	bl	8000e38 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 8001324:	2108      	movs	r1, #8
 8001326:	2030      	movs	r0, #48	; 0x30
 8001328:	f7ff fd86 	bl	8000e38 <writeReg>
        writeReg(0xFF, 0x01);
 800132c:	2101      	movs	r1, #1
 800132e:	20ff      	movs	r0, #255	; 0xff
 8001330:	f7ff fd82 	bl	8000e38 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001334:	2120      	movs	r1, #32
 8001336:	2030      	movs	r0, #48	; 0x30
 8001338:	f7ff fd7e 	bl	8000e38 <writeReg>
        writeReg(0xFF, 0x00);
 800133c:	2100      	movs	r1, #0
 800133e:	20ff      	movs	r0, #255	; 0xff
 8001340:	f7ff fd7a 	bl	8000e38 <writeReg>
        break;
 8001344:	e7ae      	b.n	80012a4 <setVcselPulsePeriod+0x12a>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8001346:	2148      	movs	r1, #72	; 0x48
 8001348:	4608      	mov	r0, r1
 800134a:	f7ff fd75 	bl	8000e38 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800134e:	2108      	movs	r1, #8
 8001350:	2047      	movs	r0, #71	; 0x47
 8001352:	f7ff fd71 	bl	8000e38 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001356:	2103      	movs	r1, #3
 8001358:	2032      	movs	r0, #50	; 0x32
 800135a:	f7ff fd6d 	bl	8000e38 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 800135e:	2107      	movs	r1, #7
 8001360:	2030      	movs	r0, #48	; 0x30
 8001362:	f7ff fd69 	bl	8000e38 <writeReg>
        writeReg(0xFF, 0x01);
 8001366:	2101      	movs	r1, #1
 8001368:	20ff      	movs	r0, #255	; 0xff
 800136a:	f7ff fd65 	bl	8000e38 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 800136e:	2120      	movs	r1, #32
 8001370:	2030      	movs	r0, #48	; 0x30
 8001372:	f7ff fd61 	bl	8000e38 <writeReg>
        writeReg(0xFF, 0x00);
 8001376:	2100      	movs	r1, #0
 8001378:	20ff      	movs	r0, #255	; 0xff
 800137a:	f7ff fd5d 	bl	8000e38 <writeReg>
        break;
 800137e:	e791      	b.n	80012a4 <setVcselPulsePeriod+0x12a>
        return 0;
 8001380:	2000      	movs	r0, #0
 8001382:	e751      	b.n	8001228 <setVcselPulsePeriod+0xae>
        return 0;
 8001384:	2000      	movs	r0, #0
 8001386:	e74f      	b.n	8001228 <setVcselPulsePeriod+0xae>

08001388 <writeMulti>:
{
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af02      	add	r7, sp, #8
 800138e:	4613      	mov	r3, r2
	uint8_t ucTemp[iCount+1];
 8001390:	1c55      	adds	r5, r2, #1
 8001392:	3308      	adds	r3, #8
 8001394:	08db      	lsrs	r3, r3, #3
 8001396:	466c      	mov	r4, sp
 8001398:	eba4 03c3 	sub.w	r3, r4, r3, lsl #3
 800139c:	469d      	mov	sp, r3
 800139e:	ac02      	add	r4, sp, #8
	ucTemp[0] = ucAddr;
 80013a0:	f88d 0008 	strb.w	r0, [sp, #8]
	memcpy(&ucTemp[1], pBuf, iCount);
 80013a4:	f10d 0009 	add.w	r0, sp, #9
 80013a8:	f005 f946 	bl	8006638 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, ucTemp, iCount+1, 1000);
 80013ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	b2ab      	uxth	r3, r5
 80013b4:	4622      	mov	r2, r4
 80013b6:	2152      	movs	r1, #82	; 0x52
 80013b8:	f240 607c 	movw	r0, #1660	; 0x67c
 80013bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80013c0:	f000 ff12 	bl	80021e8 <HAL_I2C_Master_Transmit>
} /* writeMulti() */
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bdb0      	pop	{r4, r5, r7, pc}

080013c8 <initSensor>:

//
// Initialize the vl53l0x
//
static int initSensor(int bLongRangeMode)
{
 80013c8:	b570      	push	{r4, r5, r6, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	4604      	mov	r4, r0
unsigned char spad_count=0, spad_type_is_aperture=0, ref_spad_map[6];
 80013ce:	2300      	movs	r3, #0
 80013d0:	f88d 3007 	strb.w	r3, [sp, #7]
 80013d4:	ad02      	add	r5, sp, #8
 80013d6:	f805 3d02 	strb.w	r3, [r5, #-2]!
unsigned char ucFirstSPAD, ucSPADsEnabled;
int i;

// set 2.8V mode
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
  readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80013da:	2089      	movs	r0, #137	; 0x89
 80013dc:	f7ff fd7e 	bl	8000edc <readReg>
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 80013e0:	f040 0101 	orr.w	r1, r0, #1
 80013e4:	b2c9      	uxtb	r1, r1
 80013e6:	2089      	movs	r0, #137	; 0x89
 80013e8:	f7ff fd26 	bl	8000e38 <writeReg>
// Set I2C standard mode
  writeRegList(ucI2CMode);
 80013ec:	f240 00ac 	movw	r0, #172	; 0xac
 80013f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80013f4:	f7ff fcf0 	bl	8000dd8 <writeRegList>
  stop_variable = readReg(0x91);
 80013f8:	2091      	movs	r0, #145	; 0x91
 80013fa:	f7ff fd6f 	bl	8000edc <readReg>
 80013fe:	f240 4358 	movw	r3, #1112	; 0x458
 8001402:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001406:	7018      	strb	r0, [r3, #0]
  writeRegList(ucI2CMode2);
 8001408:	f240 00b8 	movw	r0, #184	; 0xb8
 800140c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001410:	f7ff fce2 	bl	8000dd8 <writeRegList>
// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(REG_MSRC_CONFIG_CONTROL, readReg(REG_MSRC_CONFIG_CONTROL) | 0x12);
 8001414:	2060      	movs	r0, #96	; 0x60
 8001416:	f7ff fd61 	bl	8000edc <readReg>
 800141a:	f040 0112 	orr.w	r1, r0, #18
 800141e:	b2c9      	uxtb	r1, r1
 8001420:	2060      	movs	r0, #96	; 0x60
 8001422:	f7ff fd09 	bl	8000e38 <writeReg>
  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 32); // 0.25
 8001426:	2120      	movs	r1, #32
 8001428:	2044      	movs	r0, #68	; 0x44
 800142a:	f7ff fced 	bl	8000e08 <writeReg16>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 800142e:	21ff      	movs	r1, #255	; 0xff
 8001430:	2001      	movs	r0, #1
 8001432:	f7ff fd01 	bl	8000e38 <writeReg>
  getSpadInfo(&spad_count, &spad_type_is_aperture);
 8001436:	4629      	mov	r1, r5
 8001438:	f10d 0007 	add.w	r0, sp, #7
 800143c:	f7ff fd6b 	bl	8000f16 <getSpadInfo>

  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8001440:	2206      	movs	r2, #6
 8001442:	4669      	mov	r1, sp
 8001444:	20b0      	movs	r0, #176	; 0xb0
 8001446:	f7ff fd0c 	bl	8000e62 <readMulti>
//printf("initial spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0], ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);
  writeRegList(ucSPAD);
 800144a:	f240 00c0 	movw	r0, #192	; 0xc0
 800144e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001452:	f7ff fcc1 	bl	8000dd8 <writeRegList>
  ucFirstSPAD = (spad_type_is_aperture) ? 12: 0;
 8001456:	f89d 6006 	ldrb.w	r6, [sp, #6]
 800145a:	b106      	cbz	r6, 800145e <initSensor+0x96>
 800145c:	260c      	movs	r6, #12
  ucSPADsEnabled = 0;
// clear bits for unused SPADs
  for (i=0; i<48; i++)
 800145e:	2300      	movs	r3, #0
  ucSPADsEnabled = 0;
 8001460:	461d      	mov	r5, r3
  for (i=0; i<48; i++)
 8001462:	e00e      	b.n	8001482 <initSensor+0xba>
  {
    if (i < ucFirstSPAD || ucSPADsEnabled == spad_count)
    {
      ref_spad_map[i>>3] &= ~(1<<(i & 7));
 8001464:	f003 0107 	and.w	r1, r3, #7
 8001468:	2201      	movs	r2, #1
 800146a:	fa02 f101 	lsl.w	r1, r2, r1
 800146e:	aa02      	add	r2, sp, #8
 8001470:	eb02 00e3 	add.w	r0, r2, r3, asr #3
 8001474:	f810 2c08 	ldrb.w	r2, [r0, #-8]
 8001478:	ea22 0201 	bic.w	r2, r2, r1
 800147c:	f800 2c08 	strb.w	r2, [r0, #-8]
  for (i=0; i<48; i++)
 8001480:	3301      	adds	r3, #1
 8001482:	2b2f      	cmp	r3, #47	; 0x2f
 8001484:	dc13      	bgt.n	80014ae <initSensor+0xe6>
    if (i < ucFirstSPAD || ucSPADsEnabled == spad_count)
 8001486:	429e      	cmp	r6, r3
 8001488:	dcec      	bgt.n	8001464 <initSensor+0x9c>
 800148a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800148e:	42aa      	cmp	r2, r5
 8001490:	d0e8      	beq.n	8001464 <initSensor+0x9c>
    }
    else if (ref_spad_map[i>>3] & (1<< (i & 7)))
 8001492:	aa02      	add	r2, sp, #8
 8001494:	eb02 02e3 	add.w	r2, r2, r3, asr #3
 8001498:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800149c:	f003 0107 	and.w	r1, r3, #7
 80014a0:	410a      	asrs	r2, r1
 80014a2:	f012 0f01 	tst.w	r2, #1
 80014a6:	d0eb      	beq.n	8001480 <initSensor+0xb8>
    {
      ucSPADsEnabled++;
 80014a8:	3501      	adds	r5, #1
 80014aa:	b2ed      	uxtb	r5, r5
 80014ac:	e7e8      	b.n	8001480 <initSensor+0xb8>
    }
  } // for i
  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80014ae:	2206      	movs	r2, #6
 80014b0:	4669      	mov	r1, sp
 80014b2:	20b0      	movs	r0, #176	; 0xb0
 80014b4:	f7ff ff68 	bl	8001388 <writeMulti>
//printf("final spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0], 
//ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);

// load default tuning settings
  writeRegList(ucDefTuning); // long list of magic numbers
 80014b8:	f240 0008 	movw	r0, #8
 80014bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80014c0:	f7ff fc8a 	bl	8000dd8 <writeRegList>

// change some settings for long range mode
  if (bLongRangeMode)
 80014c4:	bb4c      	cbnz	r4, 800151a <initSensor+0x152>
	setVcselPulsePeriod(VcselPeriodPreRange, 18);
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
  }

// set interrupt configuration to "new sample ready"
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80014c6:	2104      	movs	r1, #4
 80014c8:	200a      	movs	r0, #10
 80014ca:	f7ff fcb5 	bl	8000e38 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80014ce:	2084      	movs	r0, #132	; 0x84
 80014d0:	f7ff fd04 	bl	8000edc <readReg>
 80014d4:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 80014d8:	2084      	movs	r0, #132	; 0x84
 80014da:	f7ff fcad 	bl	8000e38 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80014de:	2101      	movs	r1, #1
 80014e0:	200b      	movs	r0, #11
 80014e2:	f7ff fca9 	bl	8000e38 <writeReg>
  measurement_timing_budget_us = getMeasurementTimingBudget();
 80014e6:	f7ff fd9d 	bl	8001024 <getMeasurementTimingBudget>
 80014ea:	f240 4454 	movw	r4, #1108	; 0x454
 80014ee:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80014f2:	6020      	str	r0, [r4, #0]
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 80014f4:	21e8      	movs	r1, #232	; 0xe8
 80014f6:	2001      	movs	r0, #1
 80014f8:	f7ff fc9e 	bl	8000e38 <writeReg>
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80014fc:	6820      	ldr	r0, [r4, #0]
 80014fe:	f7ff fdc9 	bl	8001094 <setMeasurementTimingBudget>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001502:	2101      	movs	r1, #1
 8001504:	4608      	mov	r0, r1
 8001506:	f7ff fc97 	bl	8000e38 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return 0; }
 800150a:	2040      	movs	r0, #64	; 0x40
 800150c:	f7ff fe16 	bl	800113c <performSingleRefCalibration>
 8001510:	4603      	mov	r3, r0
 8001512:	b978      	cbnz	r0, 8001534 <initSensor+0x16c>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
  if (!performSingleRefCalibration(0x00)) { return 0; }
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
  return 1;
} /* initSensor() */
 8001514:	4618      	mov	r0, r3
 8001516:	b002      	add	sp, #8
 8001518:	bd70      	pop	{r4, r5, r6, pc}
	writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 13); // 0.1
 800151a:	210d      	movs	r1, #13
 800151c:	2044      	movs	r0, #68	; 0x44
 800151e:	f7ff fc73 	bl	8000e08 <writeReg16>
	setVcselPulsePeriod(VcselPeriodPreRange, 18);
 8001522:	2112      	movs	r1, #18
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff fe28 	bl	800117a <setVcselPulsePeriod>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 800152a:	210e      	movs	r1, #14
 800152c:	2001      	movs	r0, #1
 800152e:	f7ff fe24 	bl	800117a <setVcselPulsePeriod>
 8001532:	e7c8      	b.n	80014c6 <initSensor+0xfe>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001534:	2102      	movs	r1, #2
 8001536:	2001      	movs	r0, #1
 8001538:	f7ff fc7e 	bl	8000e38 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return 0; }
 800153c:	2000      	movs	r0, #0
 800153e:	f7ff fdfd 	bl	800113c <performSingleRefCalibration>
 8001542:	4603      	mov	r3, r0
 8001544:	2800      	cmp	r0, #0
 8001546:	d0e5      	beq.n	8001514 <initSensor+0x14c>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 8001548:	21e8      	movs	r1, #232	; 0xe8
 800154a:	2001      	movs	r0, #1
 800154c:	f7ff fc74 	bl	8000e38 <writeReg>
  return 1;
 8001550:	2301      	movs	r3, #1
 8001552:	e7df      	b.n	8001514 <initSensor+0x14c>

08001554 <tofInit>:
{
 8001554:	b508      	push	{r3, lr}
	return initSensor(bLongRange); // finally, initialize the magic numbers in the sensor
 8001556:	f7ff ff37 	bl	80013c8 <initSensor>
} /* tofInit() */
 800155a:	bd08      	pop	{r3, pc}

0800155c <readRangeContinuousMillimeters>:

uint16_t readRangeContinuousMillimeters(void)
{
 800155c:	b510      	push	{r4, lr}
int iTimeout = 0;
 800155e:	2400      	movs	r4, #0
uint16_t range;

  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001560:	2013      	movs	r0, #19
 8001562:	f7ff fcbb 	bl	8000edc <readReg>
 8001566:	f010 0f07 	tst.w	r0, #7
 800156a:	d108      	bne.n	800157e <readRangeContinuousMillimeters+0x22>
  {
    iTimeout++;
 800156c:	3401      	adds	r4, #1
    HAL_Delay(5);//usleep(5000);
 800156e:	2005      	movs	r0, #5
 8001570:	f000 f8f9 	bl	8001766 <HAL_Delay>
    if (iTimeout > 50)
 8001574:	2c32      	cmp	r4, #50	; 0x32
 8001576:	ddf3      	ble.n	8001560 <readRangeContinuousMillimeters+0x4>
    {
      return -1;
 8001578:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800157c:	e007      	b.n	800158e <readRangeContinuousMillimeters+0x32>
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  range = readReg16(RESULT_RANGE_STATUS + 10);
 800157e:	201e      	movs	r0, #30
 8001580:	f7ff fc8b 	bl	8000e9a <readReg16>
 8001584:	4604      	mov	r4, r0

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001586:	2101      	movs	r1, #1
 8001588:	200b      	movs	r0, #11
 800158a:	f7ff fc55 	bl	8000e38 <writeReg>

  return range;
}
 800158e:	4620      	mov	r0, r4
 8001590:	bd10      	pop	{r4, pc}

08001592 <tofReadDistance>:
//
// Read the current distance in mm
//
int tofReadDistance(void)
{
 8001592:	b510      	push	{r4, lr}
int iTimeout;

  writeReg(0x80, 0x01);
 8001594:	2101      	movs	r1, #1
 8001596:	2080      	movs	r0, #128	; 0x80
 8001598:	f7ff fc4e 	bl	8000e38 <writeReg>
  writeReg(0xFF, 0x01);
 800159c:	2101      	movs	r1, #1
 800159e:	20ff      	movs	r0, #255	; 0xff
 80015a0:	f7ff fc4a 	bl	8000e38 <writeReg>
  writeReg(0x00, 0x00);
 80015a4:	2100      	movs	r1, #0
 80015a6:	4608      	mov	r0, r1
 80015a8:	f7ff fc46 	bl	8000e38 <writeReg>
  writeReg(0x91, stop_variable);
 80015ac:	f240 4358 	movw	r3, #1112	; 0x458
 80015b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015b4:	7819      	ldrb	r1, [r3, #0]
 80015b6:	2091      	movs	r0, #145	; 0x91
 80015b8:	f7ff fc3e 	bl	8000e38 <writeReg>
  writeReg(0x00, 0x01);
 80015bc:	2101      	movs	r1, #1
 80015be:	2000      	movs	r0, #0
 80015c0:	f7ff fc3a 	bl	8000e38 <writeReg>
  writeReg(0xFF, 0x00);
 80015c4:	2100      	movs	r1, #0
 80015c6:	20ff      	movs	r0, #255	; 0xff
 80015c8:	f7ff fc36 	bl	8000e38 <writeReg>
  writeReg(0x80, 0x00);
 80015cc:	2100      	movs	r1, #0
 80015ce:	2080      	movs	r0, #128	; 0x80
 80015d0:	f7ff fc32 	bl	8000e38 <writeReg>

  writeReg(SYSRANGE_START, 0x01);
 80015d4:	2101      	movs	r1, #1
 80015d6:	2000      	movs	r0, #0
 80015d8:	f7ff fc2e 	bl	8000e38 <writeReg>

  // "Wait until start bit has been cleared"
  iTimeout = 0;
 80015dc:	2400      	movs	r4, #0
  while (readReg(SYSRANGE_START) & 0x01)
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff fc7c 	bl	8000edc <readReg>
 80015e4:	f010 0f01 	tst.w	r0, #1
 80015e8:	d008      	beq.n	80015fc <tofReadDistance+0x6a>
  {
    iTimeout++;
 80015ea:	3401      	adds	r4, #1
    HAL_Delay(5);//usleep(5000);
 80015ec:	2005      	movs	r0, #5
 80015ee:	f000 f8ba 	bl	8001766 <HAL_Delay>
    if (iTimeout > 50)
 80015f2:	2c32      	cmp	r4, #50	; 0x32
 80015f4:	ddf3      	ble.n	80015de <tofReadDistance+0x4c>
    {
      return -1;
 80015f6:	f04f 30ff 	mov.w	r0, #4294967295
 80015fa:	e001      	b.n	8001600 <tofReadDistance+0x6e>
    }
  }

  return readRangeContinuousMillimeters();
 80015fc:	f7ff ffae 	bl	800155c <readRangeContinuousMillimeters>

} /* tofReadDistance() */
 8001600:	bd10      	pop	{r4, pc}

08001602 <tofGetModel>:

int tofGetModel(int *model, int *revision)
{
 8001602:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001604:	b085      	sub	sp, #20
 8001606:	460d      	mov	r5, r1
	uint8_t ucTemp, ucAddr;

	if (model)
 8001608:	b1d8      	cbz	r0, 8001642 <tofGetModel+0x40>
 800160a:	4607      	mov	r7, r0
	{
		ucAddr = REG_IDENTIFICATION_MODEL_ID;
 800160c:	aa04      	add	r2, sp, #16
 800160e:	23c0      	movs	r3, #192	; 0xc0
 8001610:	f802 3d02 	strb.w	r3, [r2, #-2]!
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 8001614:	f240 647c 	movw	r4, #1660	; 0x67c
 8001618:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800161c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001620:	9600      	str	r6, [sp, #0]
 8001622:	2301      	movs	r3, #1
 8001624:	2152      	movs	r1, #82	; 0x52
 8001626:	4620      	mov	r0, r4
 8001628:	f000 fdde 	bl	80021e8 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 800162c:	9600      	str	r6, [sp, #0]
 800162e:	2301      	movs	r3, #1
 8001630:	f10d 020f 	add.w	r2, sp, #15
 8001634:	2153      	movs	r1, #83	; 0x53
 8001636:	4620      	mov	r0, r4
 8001638:	f000 fe8e 	bl	8002358 <HAL_I2C_Master_Receive>
		*model = ucTemp;
 800163c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001640:	603b      	str	r3, [r7, #0]
	}
	if (revision)
 8001642:	b1d5      	cbz	r5, 800167a <tofGetModel+0x78>
	{
		ucAddr = REG_IDENTIFICATION_REVISION_ID;
 8001644:	aa04      	add	r2, sp, #16
 8001646:	23c2      	movs	r3, #194	; 0xc2
 8001648:	f802 3d02 	strb.w	r3, [r2, #-2]!
		HAL_I2C_Master_Transmit(&hi2c2, ToF_Device_Address, &ucAddr, 1, 1000);
 800164c:	f240 647c 	movw	r4, #1660	; 0x67c
 8001650:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001654:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001658:	9600      	str	r6, [sp, #0]
 800165a:	2301      	movs	r3, #1
 800165c:	2152      	movs	r1, #82	; 0x52
 800165e:	4620      	mov	r0, r4
 8001660:	f000 fdc2 	bl	80021e8 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 8001664:	9600      	str	r6, [sp, #0]
 8001666:	2301      	movs	r3, #1
 8001668:	f10d 020f 	add.w	r2, sp, #15
 800166c:	2153      	movs	r1, #83	; 0x53
 800166e:	4620      	mov	r0, r4
 8001670:	f000 fe72 	bl	8002358 <HAL_I2C_Master_Receive>
		*revision = ucTemp;
 8001674:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001678:	602b      	str	r3, [r5, #0]
	}
	return 1;

} /* tofGetModel() */
 800167a:	2001      	movs	r0, #1
 800167c:	b005      	add	sp, #20
 800167e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001680 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001680:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001682:	e003      	b.n	800168c <LoopCopyDataInit>

08001684 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001686:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001688:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800168a:	3104      	adds	r1, #4

0800168c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800168c:	480a      	ldr	r0, [pc, #40]	; (80016b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001690:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001692:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001694:	d3f6      	bcc.n	8001684 <CopyDataInit>
  ldr r2, =_sbss
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001698:	e002      	b.n	80016a0 <LoopFillZerobss>

0800169a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800169c:	f842 3b04 	str.w	r3, [r2], #4

080016a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80016a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016a4:	d3f9      	bcc.n	800169a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016a6:	f7ff fb51 	bl	8000d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016aa:	f004 ff87 	bl	80065bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ae:	f7ff f922 	bl	80008f6 <main>
  bx lr
 80016b2:	4770      	bx	lr
  ldr r3, =_sidata
 80016b4:	080069e4 	.word	0x080069e4
  ldr r0, =_sdata
 80016b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016bc:	20000434 	.word	0x20000434
  ldr r2, =_sbss
 80016c0:	20000434 	.word	0x20000434
  ldr r3, = _ebss
 80016c4:	200016e4 	.word	0x200016e4

080016c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC1_2_IRQHandler>

080016ca <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ca:	b510      	push	{r4, lr}
 80016cc:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ce:	f240 03ed 	movw	r3, #237	; 0xed
 80016d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016d6:	7818      	ldrb	r0, [r3, #0]
 80016d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016dc:	fbb3 f3f0 	udiv	r3, r3, r0
 80016e0:	f240 0204 	movw	r2, #4
 80016e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80016e8:	6810      	ldr	r0, [r2, #0]
 80016ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80016ee:	f000 f8a5 	bl	800183c <HAL_SYSTICK_Config>
 80016f2:	b980      	cbnz	r0, 8001716 <HAL_InitTick+0x4c>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f4:	2c0f      	cmp	r4, #15
 80016f6:	d901      	bls.n	80016fc <HAL_InitTick+0x32>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80016f8:	2001      	movs	r0, #1
 80016fa:	e00d      	b.n	8001718 <HAL_InitTick+0x4e>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	4621      	mov	r1, r4
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f000 f856 	bl	80017b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	f240 03f0 	movw	r3, #240	; 0xf0
 800170c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001710:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001712:	2000      	movs	r0, #0
 8001714:	e000      	b.n	8001718 <HAL_InitTick+0x4e>
    return HAL_ERROR;
 8001716:	2001      	movs	r0, #1
}
 8001718:	bd10      	pop	{r4, pc}

0800171a <HAL_Init>:
{
 800171a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800171c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001720:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	f042 0210 	orr.w	r2, r2, #16
 800172a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172c:	2003      	movs	r0, #3
 800172e:	f000 f82e 	bl	800178e <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001732:	2000      	movs	r0, #0
 8001734:	f7ff ffc9 	bl	80016ca <HAL_InitTick>
  HAL_MspInit();
 8001738:	f7ff f9e8 	bl	8000b0c <HAL_MspInit>
}
 800173c:	2000      	movs	r0, #0
 800173e:	bd08      	pop	{r3, pc}

08001740 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001740:	f240 7360 	movw	r3, #1888	; 0x760
 8001744:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	f240 01ed 	movw	r1, #237	; 0xed
 800174e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001752:	780a      	ldrb	r2, [r1, #0]
 8001754:	4402      	add	r2, r0
 8001756:	601a      	str	r2, [r3, #0]
}
 8001758:	4770      	bx	lr

0800175a <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800175a:	f240 7360 	movw	r3, #1888	; 0x760
 800175e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001762:	6818      	ldr	r0, [r3, #0]
}
 8001764:	4770      	bx	lr

08001766 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001766:	b538      	push	{r3, r4, r5, lr}
 8001768:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800176a:	f7ff fff6 	bl	800175a <HAL_GetTick>
 800176e:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001770:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001774:	d005      	beq.n	8001782 <HAL_Delay+0x1c>
  {
    wait += (uint32_t)(uwTickFreq);
 8001776:	f240 03ed 	movw	r3, #237	; 0xed
 800177a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001782:	f7ff ffea 	bl	800175a <HAL_GetTick>
 8001786:	1b40      	subs	r0, r0, r5
 8001788:	42a0      	cmp	r0, r4
 800178a:	d3fa      	bcc.n	8001782 <HAL_Delay+0x1c>
  {
  }
}
 800178c:	bd38      	pop	{r3, r4, r5, pc}

0800178e <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800178e:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8001792:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001796:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001798:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800179c:	041b      	lsls	r3, r3, #16
 800179e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017a0:	0200      	lsls	r0, r0, #8
 80017a2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80017a8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80017ac:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80017b0:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80017b2:	4770      	bx	lr

080017b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80017ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c4:	f1c3 0407 	rsb	r4, r3, #7
 80017c8:	2c04      	cmp	r4, #4
 80017ca:	bf28      	it	cs
 80017cc:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ce:	1d1d      	adds	r5, r3, #4
 80017d0:	2d06      	cmp	r5, #6
 80017d2:	d918      	bls.n	8001806 <HAL_NVIC_SetPriority+0x52>
 80017d4:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d6:	f04f 35ff 	mov.w	r5, #4294967295
 80017da:	fa05 f404 	lsl.w	r4, r5, r4
 80017de:	ea21 0104 	bic.w	r1, r1, r4
 80017e2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	fa05 f303 	lsl.w	r3, r5, r3
 80017e8:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80017ee:	2800      	cmp	r0, #0
 80017f0:	db0b      	blt.n	800180a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f2:	0109      	lsls	r1, r1, #4
 80017f4:	b2c9      	uxtb	r1, r1
 80017f6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80017fa:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80017fe:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001802:	bc30      	pop	{r4, r5}
 8001804:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	2300      	movs	r3, #0
 8001808:	e7e5      	b.n	80017d6 <HAL_NVIC_SetPriority+0x22>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	f000 000f 	and.w	r0, r0, #15
 800180e:	0109      	lsls	r1, r1, #4
 8001810:	b2c9      	uxtb	r1, r1
 8001812:	f64e 43fc 	movw	r3, #60668	; 0xecfc
 8001816:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800181a:	4403      	add	r3, r0
 800181c:	7619      	strb	r1, [r3, #24]
 800181e:	e7f0      	b.n	8001802 <HAL_NVIC_SetPriority+0x4e>

08001820 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001820:	2800      	cmp	r0, #0
 8001822:	db0a      	blt.n	800183a <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001824:	f000 031f 	and.w	r3, r0, #31
 8001828:	0940      	lsrs	r0, r0, #5
 800182a:	2201      	movs	r2, #1
 800182c:	409a      	lsls	r2, r3
 800182e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001832:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001836:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800183a:	4770      	bx	lr

0800183c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800183c:	3801      	subs	r0, #1
 800183e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001842:	d210      	bcs.n	8001866 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001844:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001848:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800184c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8001852:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001856:	21f0      	movs	r1, #240	; 0xf0
 8001858:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185c:	2000      	movs	r0, #0
 800185e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001860:	2207      	movs	r2, #7
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001866:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001868:	4770      	bx	lr

0800186a <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800186a:	b4f0      	push	{r4, r5, r6, r7}
 800186c:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800186e:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 8001870:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001872:	e0cd      	b.n	8001a10 <HAL_GPIO_Init+0x1a6>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001874:	2d00      	cmp	r5, #0
 8001876:	d077      	beq.n	8001968 <HAL_GPIO_Init+0xfe>
 8001878:	2d01      	cmp	r5, #1
 800187a:	d100      	bne.n	800187e <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800187c:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800187e:	2bff      	cmp	r3, #255	; 0xff
 8001880:	f200 8086 	bhi.w	8001990 <HAL_GPIO_Init+0x126>
 8001884:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001886:	2bff      	cmp	r3, #255	; 0xff
 8001888:	f200 8085 	bhi.w	8001996 <HAL_GPIO_Init+0x12c>
 800188c:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800188e:	f8dc 4000 	ldr.w	r4, [ip]
 8001892:	270f      	movs	r7, #15
 8001894:	40af      	lsls	r7, r5
 8001896:	ea24 0407 	bic.w	r4, r4, r7
 800189a:	fa06 f505 	lsl.w	r5, r6, r5
 800189e:	432c      	orrs	r4, r5
 80018a0:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018a4:	684c      	ldr	r4, [r1, #4]
 80018a6:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80018aa:	f000 80b0 	beq.w	8001a0e <HAL_GPIO_Init+0x1a4>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018ae:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80018b2:	f2c4 0402 	movt	r4, #16386	; 0x4002
 80018b6:	69a5      	ldr	r5, [r4, #24]
 80018b8:	f045 0501 	orr.w	r5, r5, #1
 80018bc:	61a5      	str	r5, [r4, #24]
 80018be:	69a4      	ldr	r4, [r4, #24]
 80018c0:	f004 0401 	and.w	r4, r4, #1
 80018c4:	9401      	str	r4, [sp, #4]
 80018c6:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80018c8:	0895      	lsrs	r5, r2, #2
 80018ca:	2400      	movs	r4, #0
 80018cc:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80018d0:	1caf      	adds	r7, r5, #2
 80018d2:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018d6:	f002 0703 	and.w	r7, r2, #3
 80018da:	00bf      	lsls	r7, r7, #2
 80018dc:	f04f 0c0f 	mov.w	ip, #15
 80018e0:	fa0c fc07 	lsl.w	ip, ip, r7
 80018e4:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018e8:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80018ec:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80018f0:	42a0      	cmp	r0, r4
 80018f2:	d056      	beq.n	80019a2 <HAL_GPIO_Init+0x138>
 80018f4:	f44f 6440 	mov.w	r4, #3072	; 0xc00
 80018f8:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80018fc:	42a0      	cmp	r0, r4
 80018fe:	f000 80a1 	beq.w	8001a44 <HAL_GPIO_Init+0x1da>
 8001902:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001906:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800190a:	42a0      	cmp	r0, r4
 800190c:	f000 809c 	beq.w	8001a48 <HAL_GPIO_Init+0x1de>
 8001910:	f44f 54a0 	mov.w	r4, #5120	; 0x1400
 8001914:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001918:	42a0      	cmp	r0, r4
 800191a:	d040      	beq.n	800199e <HAL_GPIO_Init+0x134>
 800191c:	2404      	movs	r4, #4
 800191e:	e041      	b.n	80019a4 <HAL_GPIO_Init+0x13a>
      switch (GPIO_Init->Mode)
 8001920:	2700      	movs	r7, #0
 8001922:	f2c1 0721 	movt	r7, #4129	; 0x1021
 8001926:	42bd      	cmp	r5, r7
 8001928:	d01e      	beq.n	8001968 <HAL_GPIO_Init+0xfe>
 800192a:	2700      	movs	r7, #0
 800192c:	f2c1 0721 	movt	r7, #4129	; 0x1021
 8001930:	42bd      	cmp	r5, r7
 8001932:	d90f      	bls.n	8001954 <HAL_GPIO_Init+0xea>
 8001934:	2700      	movs	r7, #0
 8001936:	f2c1 0731 	movt	r7, #4145	; 0x1031
 800193a:	42bd      	cmp	r5, r7
 800193c:	d014      	beq.n	8001968 <HAL_GPIO_Init+0xfe>
 800193e:	2700      	movs	r7, #0
 8001940:	f2c1 0732 	movt	r7, #4146	; 0x1032
 8001944:	42bd      	cmp	r5, r7
 8001946:	d00f      	beq.n	8001968 <HAL_GPIO_Init+0xfe>
 8001948:	2700      	movs	r7, #0
 800194a:	f2c1 0722 	movt	r7, #4130	; 0x1022
 800194e:	42bd      	cmp	r5, r7
 8001950:	d195      	bne.n	800187e <HAL_GPIO_Init+0x14>
 8001952:	e009      	b.n	8001968 <HAL_GPIO_Init+0xfe>
 8001954:	2700      	movs	r7, #0
 8001956:	f2c1 0711 	movt	r7, #4113	; 0x1011
 800195a:	42bd      	cmp	r5, r7
 800195c:	d004      	beq.n	8001968 <HAL_GPIO_Init+0xfe>
 800195e:	2700      	movs	r7, #0
 8001960:	f2c1 0712 	movt	r7, #4114	; 0x1012
 8001964:	42bd      	cmp	r5, r7
 8001966:	d18a      	bne.n	800187e <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001968:	688d      	ldr	r5, [r1, #8]
 800196a:	b17d      	cbz	r5, 800198c <HAL_GPIO_Init+0x122>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800196c:	2d01      	cmp	r5, #1
 800196e:	d008      	beq.n	8001982 <HAL_GPIO_Init+0x118>
            GPIOx->BRR = ioposition;
 8001970:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001972:	2608      	movs	r6, #8
 8001974:	e783      	b.n	800187e <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001976:	68ce      	ldr	r6, [r1, #12]
 8001978:	3608      	adds	r6, #8
          break;
 800197a:	e780      	b.n	800187e <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800197c:	68ce      	ldr	r6, [r1, #12]
 800197e:	360c      	adds	r6, #12
          break;
 8001980:	e77d      	b.n	800187e <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8001982:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001984:	2608      	movs	r6, #8
 8001986:	e77a      	b.n	800187e <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001988:	2600      	movs	r6, #0
 800198a:	e778      	b.n	800187e <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800198c:	2604      	movs	r6, #4
 800198e:	e776      	b.n	800187e <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001990:	f100 0c04 	add.w	ip, r0, #4
 8001994:	e777      	b.n	8001886 <HAL_GPIO_Init+0x1c>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001996:	f1a2 0508 	sub.w	r5, r2, #8
 800199a:	00ad      	lsls	r5, r5, #2
 800199c:	e777      	b.n	800188e <HAL_GPIO_Init+0x24>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800199e:	2403      	movs	r4, #3
 80019a0:	e000      	b.n	80019a4 <HAL_GPIO_Init+0x13a>
 80019a2:	2400      	movs	r4, #0
 80019a4:	40bc      	lsls	r4, r7
 80019a6:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 80019aa:	2700      	movs	r7, #0
 80019ac:	f2c4 0701 	movt	r7, #16385	; 0x4001
 80019b0:	3502      	adds	r5, #2
 80019b2:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b6:	684c      	ldr	r4, [r1, #4]
 80019b8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80019bc:	d046      	beq.n	8001a4c <HAL_GPIO_Init+0x1e2>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019be:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80019c2:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80019c6:	6825      	ldr	r5, [r4, #0]
 80019c8:	431d      	orrs	r5, r3
 80019ca:	6025      	str	r5, [r4, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019cc:	684c      	ldr	r4, [r1, #4]
 80019ce:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80019d2:	d044      	beq.n	8001a5e <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80019d8:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80019dc:	6865      	ldr	r5, [r4, #4]
 80019de:	431d      	orrs	r5, r3
 80019e0:	6065      	str	r5, [r4, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019e2:	684c      	ldr	r4, [r1, #4]
 80019e4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 80019e8:	d042      	beq.n	8001a70 <HAL_GPIO_Init+0x206>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80019ee:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80019f2:	68a5      	ldr	r5, [r4, #8]
 80019f4:	431d      	orrs	r5, r3
 80019f6:	60a5      	str	r5, [r4, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f8:	684c      	ldr	r4, [r1, #4]
 80019fa:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 80019fe:	d040      	beq.n	8001a82 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a00:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001a04:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001a08:	68e5      	ldr	r5, [r4, #12]
 8001a0a:	432b      	orrs	r3, r5
 8001a0c:	60e3      	str	r3, [r4, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8001a0e:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a10:	680b      	ldr	r3, [r1, #0]
 8001a12:	fa33 f402 	lsrs.w	r4, r3, r2
 8001a16:	d03d      	beq.n	8001a94 <HAL_GPIO_Init+0x22a>
    ioposition = (0x01uL << position);
 8001a18:	2401      	movs	r4, #1
 8001a1a:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1c:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 8001a1e:	429c      	cmp	r4, r3
 8001a20:	d1f5      	bne.n	8001a0e <HAL_GPIO_Init+0x1a4>
      switch (GPIO_Init->Mode)
 8001a22:	684d      	ldr	r5, [r1, #4]
 8001a24:	2d12      	cmp	r5, #18
 8001a26:	d0a9      	beq.n	800197c <HAL_GPIO_Init+0x112>
 8001a28:	f63f af7a 	bhi.w	8001920 <HAL_GPIO_Init+0xb6>
 8001a2c:	2d02      	cmp	r5, #2
 8001a2e:	d0a2      	beq.n	8001976 <HAL_GPIO_Init+0x10c>
 8001a30:	f67f af20 	bls.w	8001874 <HAL_GPIO_Init+0xa>
 8001a34:	2d03      	cmp	r5, #3
 8001a36:	d0a7      	beq.n	8001988 <HAL_GPIO_Init+0x11e>
 8001a38:	2d11      	cmp	r5, #17
 8001a3a:	f47f af20 	bne.w	800187e <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a3e:	68ce      	ldr	r6, [r1, #12]
 8001a40:	3604      	adds	r6, #4
          break;
 8001a42:	e71c      	b.n	800187e <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a44:	2401      	movs	r4, #1
 8001a46:	e7ad      	b.n	80019a4 <HAL_GPIO_Init+0x13a>
 8001a48:	2402      	movs	r4, #2
 8001a4a:	e7ab      	b.n	80019a4 <HAL_GPIO_Init+0x13a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001a50:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001a54:	6825      	ldr	r5, [r4, #0]
 8001a56:	ea25 0503 	bic.w	r5, r5, r3
 8001a5a:	6025      	str	r5, [r4, #0]
 8001a5c:	e7b6      	b.n	80019cc <HAL_GPIO_Init+0x162>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001a62:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001a66:	6865      	ldr	r5, [r4, #4]
 8001a68:	ea25 0503 	bic.w	r5, r5, r3
 8001a6c:	6065      	str	r5, [r4, #4]
 8001a6e:	e7b8      	b.n	80019e2 <HAL_GPIO_Init+0x178>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a70:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001a74:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001a78:	68a5      	ldr	r5, [r4, #8]
 8001a7a:	ea25 0503 	bic.w	r5, r5, r3
 8001a7e:	60a5      	str	r5, [r4, #8]
 8001a80:	e7ba      	b.n	80019f8 <HAL_GPIO_Init+0x18e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a82:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001a86:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001a8a:	68e5      	ldr	r5, [r4, #12]
 8001a8c:	ea25 0303 	bic.w	r3, r5, r3
 8001a90:	60e3      	str	r3, [r4, #12]
 8001a92:	e7bc      	b.n	8001a0e <HAL_GPIO_Init+0x1a4>
  }
}
 8001a94:	b002      	add	sp, #8
 8001a96:	bcf0      	pop	{r4, r5, r6, r7}
 8001a98:	4770      	bx	lr

08001a9a <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8001a9a:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001a9c:	e076      	b.n	8001b8c <HAL_GPIO_DeInit+0xf2>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
      tmp &= 0x0FuL << (4u * (position & 0x03u));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001a9e:	2603      	movs	r6, #3
 8001aa0:	e000      	b.n	8001aa4 <HAL_GPIO_DeInit+0xa>
 8001aa2:	2600      	movs	r6, #0
 8001aa4:	fa06 f404 	lsl.w	r4, r6, r4
 8001aa8:	42ac      	cmp	r4, r5
 8001aaa:	d049      	beq.n	8001b40 <HAL_GPIO_DeInit+0xa6>
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aac:	2bff      	cmp	r3, #255	; 0xff
 8001aae:	d863      	bhi.n	8001b78 <HAL_GPIO_DeInit+0xde>
 8001ab0:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ab2:	2bff      	cmp	r3, #255	; 0xff
 8001ab4:	d863      	bhi.n	8001b7e <HAL_GPIO_DeInit+0xe4>
 8001ab6:	0097      	lsls	r7, r2, #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001ab8:	f8dc 4000 	ldr.w	r4, [ip]
 8001abc:	260f      	movs	r6, #15
 8001abe:	40be      	lsls	r6, r7
 8001ac0:	ea24 0406 	bic.w	r4, r4, r6
 8001ac4:	2504      	movs	r5, #4
 8001ac6:	40bd      	lsls	r5, r7
 8001ac8:	432c      	orrs	r4, r5
 8001aca:	f8cc 4000 	str.w	r4, [ip]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001ace:	68c4      	ldr	r4, [r0, #12]
 8001ad0:	ea24 0303 	bic.w	r3, r4, r3
 8001ad4:	60c3      	str	r3, [r0, #12]
    }

    position++;
 8001ad6:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8001ad8:	fa31 f302 	lsrs.w	r3, r1, r2
 8001adc:	d053      	beq.n	8001b86 <HAL_GPIO_DeInit+0xec>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001ade:	2301      	movs	r3, #1
 8001ae0:	4093      	lsls	r3, r2
    if (iocurrent)
 8001ae2:	400b      	ands	r3, r1
 8001ae4:	d0f7      	beq.n	8001ad6 <HAL_GPIO_DeInit+0x3c>
      tmp = AFIO->EXTICR[position >> 2u];
 8001ae6:	0897      	lsrs	r7, r2, #2
 8001ae8:	2400      	movs	r4, #0
 8001aea:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001aee:	1cbd      	adds	r5, r7, #2
 8001af0:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001af4:	f002 0403 	and.w	r4, r2, #3
 8001af8:	00a4      	lsls	r4, r4, #2
 8001afa:	260f      	movs	r6, #15
 8001afc:	fa06 fc04 	lsl.w	ip, r6, r4
 8001b00:	ea0c 0505 	and.w	r5, ip, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001b04:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8001b08:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8001b0c:	42b0      	cmp	r0, r6
 8001b0e:	d0c8      	beq.n	8001aa2 <HAL_GPIO_DeInit+0x8>
 8001b10:	f44f 6640 	mov.w	r6, #3072	; 0xc00
 8001b14:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8001b18:	42b0      	cmp	r0, r6
 8001b1a:	d00d      	beq.n	8001b38 <HAL_GPIO_DeInit+0x9e>
 8001b1c:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8001b20:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8001b24:	42b0      	cmp	r0, r6
 8001b26:	d009      	beq.n	8001b3c <HAL_GPIO_DeInit+0xa2>
 8001b28:	f44f 56a0 	mov.w	r6, #5120	; 0x1400
 8001b2c:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8001b30:	42b0      	cmp	r0, r6
 8001b32:	d0b4      	beq.n	8001a9e <HAL_GPIO_DeInit+0x4>
 8001b34:	2604      	movs	r6, #4
 8001b36:	e7b5      	b.n	8001aa4 <HAL_GPIO_DeInit+0xa>
 8001b38:	2601      	movs	r6, #1
 8001b3a:	e7b3      	b.n	8001aa4 <HAL_GPIO_DeInit+0xa>
 8001b3c:	2602      	movs	r6, #2
 8001b3e:	e7b1      	b.n	8001aa4 <HAL_GPIO_DeInit+0xa>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001b40:	2500      	movs	r5, #0
 8001b42:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8001b46:	1cbc      	adds	r4, r7, #2
 8001b48:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 8001b4c:	ea26 060c 	bic.w	r6, r6, ip
 8001b50:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001b54:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001b58:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001b5c:	6826      	ldr	r6, [r4, #0]
 8001b5e:	43dd      	mvns	r5, r3
 8001b60:	402e      	ands	r6, r5
 8001b62:	6026      	str	r6, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001b64:	6866      	ldr	r6, [r4, #4]
 8001b66:	402e      	ands	r6, r5
 8001b68:	6066      	str	r6, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001b6a:	68a6      	ldr	r6, [r4, #8]
 8001b6c:	402e      	ands	r6, r5
 8001b6e:	60a6      	str	r6, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001b70:	68e6      	ldr	r6, [r4, #12]
 8001b72:	4035      	ands	r5, r6
 8001b74:	60e5      	str	r5, [r4, #12]
 8001b76:	e799      	b.n	8001aac <HAL_GPIO_DeInit+0x12>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b78:	f100 0c04 	add.w	ip, r0, #4
 8001b7c:	e799      	b.n	8001ab2 <HAL_GPIO_DeInit+0x18>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b7e:	f1a2 0508 	sub.w	r5, r2, #8
 8001b82:	00af      	lsls	r7, r5, #2
 8001b84:	e798      	b.n	8001ab8 <HAL_GPIO_DeInit+0x1e>
  }
}
 8001b86:	bcf0      	pop	{r4, r5, r6, r7}
 8001b88:	4770      	bx	lr
    position++;
 8001b8a:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8001b8c:	fa31 f302 	lsrs.w	r3, r1, r2
 8001b90:	d005      	beq.n	8001b9e <HAL_GPIO_DeInit+0x104>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001b92:	2301      	movs	r3, #1
 8001b94:	4093      	lsls	r3, r2
    if (iocurrent)
 8001b96:	400b      	ands	r3, r1
 8001b98:	d0f7      	beq.n	8001b8a <HAL_GPIO_DeInit+0xf0>
{
 8001b9a:	b4f0      	push	{r4, r5, r6, r7}
 8001b9c:	e7a3      	b.n	8001ae6 <HAL_GPIO_DeInit+0x4c>
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ba0:	b912      	cbnz	r2, 8001ba8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba2:	0409      	lsls	r1, r1, #16
 8001ba4:	6101      	str	r1, [r0, #16]
  }
}
 8001ba6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001ba8:	6101      	str	r1, [r0, #16]
 8001baa:	4770      	bx	lr

08001bac <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bac:	6803      	ldr	r3, [r0, #0]
 8001bae:	695a      	ldr	r2, [r3, #20]
 8001bb0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001bb4:	d011      	beq.n	8001bda <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bc6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001bcc:	f042 0204 	orr.w	r2, r2, #4
 8001bd0:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	4770      	bx	lr
  }
  return HAL_OK;
 8001bda:	2000      	movs	r0, #0
}
 8001bdc:	4770      	bx	lr

08001bde <I2C_WaitOnFlagUntilTimeout>:
{
 8001bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be0:	4606      	mov	r6, r0
 8001be2:	460c      	mov	r4, r1
 8001be4:	4617      	mov	r7, r2
 8001be6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001be8:	e022      	b.n	8001c30 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bea:	f7ff fdb6 	bl	800175a <HAL_GetTick>
 8001bee:	9b06      	ldr	r3, [sp, #24]
 8001bf0:	1ac0      	subs	r0, r0, r3
 8001bf2:	42a8      	cmp	r0, r5
 8001bf4:	d800      	bhi.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8001bf6:	b9dd      	cbnz	r5, 8001c30 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c02:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c06:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8001c08:	f042 0220 	orr.w	r2, r2, #32
 8001c0c:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001c0e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8001c12:	2001      	movs	r0, #1
 8001c14:	e01a      	b.n	8001c4c <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c16:	6833      	ldr	r3, [r6, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	ea24 0303 	bic.w	r3, r4, r3
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	095b      	lsrs	r3, r3, #5
 8001c26:	429f      	cmp	r7, r3
 8001c28:	d10f      	bne.n	8001c4a <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8001c2a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001c2e:	d1dc      	bne.n	8001bea <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c30:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d0ee      	beq.n	8001c16 <I2C_WaitOnFlagUntilTimeout+0x38>
 8001c38:	6833      	ldr	r3, [r6, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	ea24 0303 	bic.w	r3, r4, r3
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	e7ed      	b.n	8001c26 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8001c4a:	2000      	movs	r0, #0
}
 8001c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c50:	4604      	mov	r4, r0
 8001c52:	460d      	mov	r5, r1
 8001c54:	4616      	mov	r6, r2
 8001c56:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c58:	e03c      	b.n	8001cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c60:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c68:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c74:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c78:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c7a:	f042 0204 	orr.w	r2, r2, #4
 8001c7e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001c80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001c84:	2001      	movs	r0, #1
 8001c86:	e033      	b.n	8001cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c88:	f7ff fd67 	bl	800175a <HAL_GetTick>
 8001c8c:	1bc0      	subs	r0, r0, r7
 8001c8e:	42b0      	cmp	r0, r6
 8001c90:	d800      	bhi.n	8001c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8001c92:	b9fe      	cbnz	r6, 8001cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c98:	2220      	movs	r2, #32
 8001c9a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ca2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ca4:	f042 0220 	orr.w	r2, r2, #32
 8001ca8:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001caa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001cae:	2001      	movs	r0, #1
 8001cb0:	e01e      	b.n	8001cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	ea25 0303 	bic.w	r3, r5, r3
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3300      	adds	r3, #0
 8001cbe:	bf18      	it	ne
 8001cc0:	2301      	movne	r3, #1
 8001cc2:	b1a3      	cbz	r3, 8001cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cc4:	6823      	ldr	r3, [r4, #0]
 8001cc6:	695a      	ldr	r2, [r3, #20]
 8001cc8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001ccc:	d1c5      	bne.n	8001c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8001cce:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001cd2:	d1d9      	bne.n	8001c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cd4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d0ea      	beq.n	8001cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	ea25 0303 	bic.w	r3, r5, r3
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	3300      	adds	r3, #0
 8001ce8:	bf18      	it	ne
 8001cea:	2301      	movne	r3, #1
 8001cec:	e7e9      	b.n	8001cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8001cee:	2000      	movs	r0, #0
}
 8001cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001cf2 <I2C_MasterRequestWrite>:
{
 8001cf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	460f      	mov	r7, r1
 8001cfa:	4615      	mov	r5, r2
 8001cfc:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cfe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d00d      	beq.n	8001d20 <I2C_MasterRequestWrite+0x2e>
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d00b      	beq.n	8001d20 <I2C_MasterRequestWrite+0x2e>
 8001d08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d0c:	d008      	beq.n	8001d20 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d0e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001d10:	2b12      	cmp	r3, #18
 8001d12:	d10a      	bne.n	8001d2a <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d14:	6802      	ldr	r2, [r0, #0]
 8001d16:	6813      	ldr	r3, [r2, #0]
 8001d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e004      	b.n	8001d2a <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d20:	6822      	ldr	r2, [r4, #0]
 8001d22:	6813      	ldr	r3, [r2, #0]
 8001d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d28:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d2a:	9600      	str	r6, [sp, #0]
 8001d2c:	462b      	mov	r3, r5
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d34:	4620      	mov	r0, r4
 8001d36:	f7ff ff52 	bl	8001bde <I2C_WaitOnFlagUntilTimeout>
 8001d3a:	b158      	cbz	r0, 8001d54 <I2C_MasterRequestWrite+0x62>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d44:	d02f      	beq.n	8001da6 <I2C_MasterRequestWrite+0xb4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d4a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	b003      	add	sp, #12
 8001d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d54:	6923      	ldr	r3, [r4, #16]
 8001d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d5a:	d110      	bne.n	8001d7e <I2C_MasterRequestWrite+0x8c>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001d62:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d64:	4633      	mov	r3, r6
 8001d66:	462a      	mov	r2, r5
 8001d68:	2102      	movs	r1, #2
 8001d6a:	f2c0 0101 	movt	r1, #1
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f7ff ff6d 	bl	8001c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2800      	cmp	r0, #0
 8001d78:	d0e9      	beq.n	8001d4e <I2C_MasterRequestWrite+0x5c>
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e7e7      	b.n	8001d4e <I2C_MasterRequestWrite+0x5c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d7e:	11fb      	asrs	r3, r7, #7
 8001d80:	6822      	ldr	r2, [r4, #0]
 8001d82:	f003 0306 	and.w	r3, r3, #6
 8001d86:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001d8a:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d8c:	4633      	mov	r3, r6
 8001d8e:	462a      	mov	r2, r5
 8001d90:	2108      	movs	r1, #8
 8001d92:	f2c0 0101 	movt	r1, #1
 8001d96:	4620      	mov	r0, r4
 8001d98:	f7ff ff59 	bl	8001c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d9c:	b928      	cbnz	r0, 8001daa <I2C_MasterRequestWrite+0xb8>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	b2ff      	uxtb	r7, r7
 8001da2:	611f      	str	r7, [r3, #16]
 8001da4:	e7de      	b.n	8001d64 <I2C_MasterRequestWrite+0x72>
    return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e7d1      	b.n	8001d4e <I2C_MasterRequestWrite+0x5c>
      return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e7cf      	b.n	8001d4e <I2C_MasterRequestWrite+0x5c>

08001dae <I2C_MasterRequestRead>:
{
 8001dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	4604      	mov	r4, r0
 8001db6:	460d      	mov	r5, r1
 8001db8:	4616      	mov	r6, r2
 8001dba:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dbc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dbe:	6801      	ldr	r1, [r0, #0]
 8001dc0:	680b      	ldr	r3, [r1, #0]
 8001dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dc6:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dc8:	2a08      	cmp	r2, #8
 8001dca:	d00d      	beq.n	8001de8 <I2C_MasterRequestRead+0x3a>
 8001dcc:	2a01      	cmp	r2, #1
 8001dce:	d00b      	beq.n	8001de8 <I2C_MasterRequestRead+0x3a>
 8001dd0:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001dd4:	d008      	beq.n	8001de8 <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001dd6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001dd8:	2b11      	cmp	r3, #17
 8001dda:	d10a      	bne.n	8001df2 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ddc:	6802      	ldr	r2, [r0, #0]
 8001dde:	6813      	ldr	r3, [r2, #0]
 8001de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e004      	b.n	8001df2 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001de8:	6822      	ldr	r2, [r4, #0]
 8001dea:	6813      	ldr	r3, [r2, #0]
 8001dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df0:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001df2:	9700      	str	r7, [sp, #0]
 8001df4:	4633      	mov	r3, r6
 8001df6:	2200      	movs	r2, #0
 8001df8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7ff feee 	bl	8001bde <I2C_WaitOnFlagUntilTimeout>
 8001e02:	b160      	cbz	r0, 8001e1e <I2C_MasterRequestRead+0x70>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001e0c:	d061      	beq.n	8001ed2 <I2C_MasterRequestRead+0x124>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e12:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	b004      	add	sp, #16
 8001e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e1e:	6923      	ldr	r3, [r4, #16]
 8001e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e24:	d111      	bne.n	8001e4a <I2C_MasterRequestRead+0x9c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e26:	6823      	ldr	r3, [r4, #0]
 8001e28:	f045 0501 	orr.w	r5, r5, #1
 8001e2c:	b2ed      	uxtb	r5, r5
 8001e2e:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e30:	463b      	mov	r3, r7
 8001e32:	4632      	mov	r2, r6
 8001e34:	2102      	movs	r1, #2
 8001e36:	f2c0 0101 	movt	r1, #1
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f7ff ff07 	bl	8001c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2800      	cmp	r0, #0
 8001e44:	d0e7      	beq.n	8001e16 <I2C_MasterRequestRead+0x68>
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e7e5      	b.n	8001e16 <I2C_MasterRequestRead+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e4a:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001e4e:	f008 0806 	and.w	r8, r8, #6
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001e58:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	4632      	mov	r2, r6
 8001e5e:	2108      	movs	r1, #8
 8001e60:	f2c0 0101 	movt	r1, #1
 8001e64:	4620      	mov	r0, r4
 8001e66:	f7ff fef2 	bl	8001c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e6a:	b108      	cbz	r0, 8001e70 <I2C_MasterRequestRead+0xc2>
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e7d2      	b.n	8001e16 <I2C_MasterRequestRead+0x68>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	b2ed      	uxtb	r5, r5
 8001e74:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e76:	463b      	mov	r3, r7
 8001e78:	4632      	mov	r2, r6
 8001e7a:	2102      	movs	r1, #2
 8001e7c:	f2c0 0101 	movt	r1, #1
 8001e80:	4620      	mov	r0, r4
 8001e82:	f7ff fee4 	bl	8001c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e86:	b108      	cbz	r0, 8001e8c <I2C_MasterRequestRead+0xde>
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e7c4      	b.n	8001e16 <I2C_MasterRequestRead+0x68>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	9203      	str	r2, [sp, #12]
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	6959      	ldr	r1, [r3, #20]
 8001e94:	9103      	str	r1, [sp, #12]
 8001e96:	6999      	ldr	r1, [r3, #24]
 8001e98:	9103      	str	r1, [sp, #12]
 8001e9a:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e9c:	6819      	ldr	r1, [r3, #0]
 8001e9e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001ea2:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ea4:	9700      	str	r7, [sp, #0]
 8001ea6:	4633      	mov	r3, r6
 8001ea8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001eac:	4620      	mov	r0, r4
 8001eae:	f7ff fe96 	bl	8001bde <I2C_WaitOnFlagUntilTimeout>
 8001eb2:	b148      	cbz	r0, 8001ec8 <I2C_MasterRequestRead+0x11a>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ebc:	d00b      	beq.n	8001ed6 <I2C_MasterRequestRead+0x128>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec2:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e7a6      	b.n	8001e16 <I2C_MasterRequestRead+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001ec8:	6822      	ldr	r2, [r4, #0]
 8001eca:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001ece:	6113      	str	r3, [r2, #16]
 8001ed0:	e7ae      	b.n	8001e30 <I2C_MasterRequestRead+0x82>
    return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e79f      	b.n	8001e16 <I2C_MasterRequestRead+0x68>
      return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e79d      	b.n	8001e16 <I2C_MasterRequestRead+0x68>

08001eda <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001eda:	b570      	push	{r4, r5, r6, lr}
 8001edc:	4604      	mov	r4, r0
 8001ede:	460d      	mov	r5, r1
 8001ee0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001eea:	d11c      	bne.n	8001f26 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001eec:	4620      	mov	r0, r4
 8001eee:	f7ff fe5d 	bl	8001bac <I2C_IsAcknowledgeFailed>
 8001ef2:	b9d0      	cbnz	r0, 8001f2a <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001ef4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001ef8:	d0f3      	beq.n	8001ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001efa:	f7ff fc2e 	bl	800175a <HAL_GetTick>
 8001efe:	1b80      	subs	r0, r0, r6
 8001f00:	42a8      	cmp	r0, r5
 8001f02:	d801      	bhi.n	8001f08 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001f04:	2d00      	cmp	r5, #0
 8001f06:	d1ec      	bne.n	8001ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f18:	f042 0220 	orr.w	r2, r2, #32
 8001f1c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001f1e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001f22:	2001      	movs	r0, #1
 8001f24:	e000      	b.n	8001f28 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001f26:	2000      	movs	r0, #0
}
 8001f28:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	e7fc      	b.n	8001f28 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08001f2e <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001f2e:	b570      	push	{r4, r5, r6, lr}
 8001f30:	4604      	mov	r4, r0
 8001f32:	460d      	mov	r5, r1
 8001f34:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f013 0f04 	tst.w	r3, #4
 8001f3e:	d11c      	bne.n	8001f7a <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f40:	4620      	mov	r0, r4
 8001f42:	f7ff fe33 	bl	8001bac <I2C_IsAcknowledgeFailed>
 8001f46:	b9d0      	cbnz	r0, 8001f7e <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001f48:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001f4c:	d0f3      	beq.n	8001f36 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4e:	f7ff fc04 	bl	800175a <HAL_GetTick>
 8001f52:	1b80      	subs	r0, r0, r6
 8001f54:	42a8      	cmp	r0, r5
 8001f56:	d801      	bhi.n	8001f5c <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001f58:	2d00      	cmp	r5, #0
 8001f5a:	d1ec      	bne.n	8001f36 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f60:	2220      	movs	r2, #32
 8001f62:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f66:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f6c:	f042 0220 	orr.w	r2, r2, #32
 8001f70:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001f72:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001f76:	2001      	movs	r0, #1
 8001f78:	e000      	b.n	8001f7c <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001f7a:	2000      	movs	r0, #0
}
 8001f7c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001f7e:	2001      	movs	r0, #1
 8001f80:	e7fc      	b.n	8001f7c <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08001f82 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001f82:	b570      	push	{r4, r5, r6, lr}
 8001f84:	4605      	mov	r5, r0
 8001f86:	460c      	mov	r4, r1
 8001f88:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f8a:	682b      	ldr	r3, [r5, #0]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001f92:	d129      	bne.n	8001fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	f012 0f10 	tst.w	r2, #16
 8001f9a:	d115      	bne.n	8001fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f9c:	f7ff fbdd 	bl	800175a <HAL_GetTick>
 8001fa0:	1b80      	subs	r0, r0, r6
 8001fa2:	42a0      	cmp	r0, r4
 8001fa4:	d801      	bhi.n	8001faa <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8001fa6:	2c00      	cmp	r4, #0
 8001fa8:	d1ef      	bne.n	8001f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb4:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fb8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001fba:	f042 0220 	orr.w	r2, r2, #32
 8001fbe:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001fc0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8001fc4:	2001      	movs	r0, #1
}
 8001fc6:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fc8:	f06f 0210 	mvn.w	r2, #16
 8001fcc:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fd8:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001fdc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001fde:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001fe0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	e7ee      	b.n	8001fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8001fe8:	2000      	movs	r0, #0
 8001fea:	e7ec      	b.n	8001fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>

08001fec <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001fec:	2800      	cmp	r0, #0
 8001fee:	f000 80de 	beq.w	80021ae <HAL_I2C_Init+0x1c2>
{
 8001ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff4:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ff6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8085 	beq.w	800210a <HAL_I2C_Init+0x11e>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002000:	2324      	movs	r3, #36	; 0x24
 8002002:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002006:	6822      	ldr	r2, [r4, #0]
 8002008:	6813      	ldr	r3, [r2, #0]
 800200a:	f023 0301 	bic.w	r3, r3, #1
 800200e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002010:	6822      	ldr	r2, [r4, #0]
 8002012:	6813      	ldr	r3, [r2, #0]
 8002014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002018:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800201a:	6822      	ldr	r2, [r4, #0]
 800201c:	6813      	ldr	r3, [r2, #0]
 800201e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002022:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002024:	f001 fdbc 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002028:	6862      	ldr	r2, [r4, #4]
 800202a:	f248 63a0 	movw	r3, #34464	; 0x86a0
 800202e:	f2c0 0301 	movt	r3, #1
 8002032:	429a      	cmp	r2, r3
 8002034:	d86e      	bhi.n	8002114 <HAL_I2C_Init+0x128>
 8002036:	f248 437f 	movw	r3, #33919	; 0x847f
 800203a:	f2c0 031e 	movt	r3, #30
 800203e:	4298      	cmp	r0, r3
 8002040:	bf8c      	ite	hi
 8002042:	2300      	movhi	r3, #0
 8002044:	2301      	movls	r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 80b3 	bne.w	80021b2 <HAL_I2C_Init+0x1c6>
  freqrange = I2C_FREQRANGE(pclk1);
 800204c:	f64d 6383 	movw	r3, #56963	; 0xde83
 8002050:	f2c4 331b 	movt	r3, #17179	; 0x431b
 8002054:	fba3 2300 	umull	r2, r3, r3, r0
 8002058:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800205a:	6821      	ldr	r1, [r4, #0]
 800205c:	684a      	ldr	r2, [r1, #4]
 800205e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002062:	431a      	orrs	r2, r3
 8002064:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002066:	6825      	ldr	r5, [r4, #0]
 8002068:	6a2a      	ldr	r2, [r5, #32]
 800206a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800206e:	6866      	ldr	r6, [r4, #4]
 8002070:	f248 61a0 	movw	r1, #34464	; 0x86a0
 8002074:	f2c0 0101 	movt	r1, #1
 8002078:	428e      	cmp	r6, r1
 800207a:	d854      	bhi.n	8002126 <HAL_I2C_Init+0x13a>
 800207c:	3301      	adds	r3, #1
 800207e:	4313      	orrs	r3, r2
 8002080:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002082:	6825      	ldr	r5, [r4, #0]
 8002084:	69e9      	ldr	r1, [r5, #28]
 8002086:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800208a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800208e:	6863      	ldr	r3, [r4, #4]
 8002090:	f248 62a0 	movw	r2, #34464	; 0x86a0
 8002094:	f2c0 0201 	movt	r2, #1
 8002098:	4293      	cmp	r3, r2
 800209a:	d851      	bhi.n	8002140 <HAL_I2C_Init+0x154>
 800209c:	3801      	subs	r0, #1
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a4:	3301      	adds	r3, #1
 80020a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf38      	it	cc
 80020ae:	2304      	movcc	r3, #4
 80020b0:	430b      	orrs	r3, r1
 80020b2:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020b4:	6821      	ldr	r1, [r4, #0]
 80020b6:	680b      	ldr	r3, [r1, #0]
 80020b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80020bc:	69e2      	ldr	r2, [r4, #28]
 80020be:	6a20      	ldr	r0, [r4, #32]
 80020c0:	4302      	orrs	r2, r0
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020c6:	6821      	ldr	r1, [r4, #0]
 80020c8:	688b      	ldr	r3, [r1, #8]
 80020ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020d2:	6922      	ldr	r2, [r4, #16]
 80020d4:	68e0      	ldr	r0, [r4, #12]
 80020d6:	4302      	orrs	r2, r0
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020dc:	6821      	ldr	r1, [r4, #0]
 80020de:	68cb      	ldr	r3, [r1, #12]
 80020e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020e4:	6962      	ldr	r2, [r4, #20]
 80020e6:	69a0      	ldr	r0, [r4, #24]
 80020e8:	4302      	orrs	r2, r0
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80020ee:	6822      	ldr	r2, [r4, #0]
 80020f0:	6813      	ldr	r3, [r2, #0]
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f8:	2000      	movs	r0, #0
 80020fa:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020fc:	2320      	movs	r3, #32
 80020fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002102:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002104:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8002108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800210a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800210e:	f7fe fd1f 	bl	8000b50 <HAL_I2C_MspInit>
 8002112:	e775      	b.n	8002000 <HAL_I2C_Init+0x14>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002114:	f640 03ff 	movw	r3, #2303	; 0x8ff
 8002118:	f2c0 033d 	movt	r3, #61	; 0x3d
 800211c:	4298      	cmp	r0, r3
 800211e:	bf8c      	ite	hi
 8002120:	2300      	movhi	r3, #0
 8002122:	2301      	movls	r3, #1
 8002124:	e78f      	b.n	8002046 <HAL_I2C_Init+0x5a>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002126:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	f644 51d3 	movw	r1, #19923	; 0x4dd3
 8002132:	f2c1 0162 	movt	r1, #4194	; 0x1062
 8002136:	fba1 1303 	umull	r1, r3, r1, r3
 800213a:	099b      	lsrs	r3, r3, #6
 800213c:	3301      	adds	r3, #1
 800213e:	e79e      	b.n	800207e <HAL_I2C_Init+0x92>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002140:	68a2      	ldr	r2, [r4, #8]
 8002142:	b9ba      	cbnz	r2, 8002174 <HAL_I2C_Init+0x188>
 8002144:	1e46      	subs	r6, r0, #1
 8002146:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800214a:	fbb6 f6f7 	udiv	r6, r6, r7
 800214e:	3601      	adds	r6, #1
 8002150:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002154:	fab6 f686 	clz	r6, r6
 8002158:	0976      	lsrs	r6, r6, #5
 800215a:	bb36      	cbnz	r6, 80021aa <HAL_I2C_Init+0x1be>
 800215c:	b9c2      	cbnz	r2, 8002190 <HAL_I2C_Init+0x1a4>
 800215e:	3801      	subs	r0, #1
 8002160:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002164:	fbb0 f3f3 	udiv	r3, r0, r3
 8002168:	3301      	adds	r3, #1
 800216a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800216e:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8002172:	e79d      	b.n	80020b0 <HAL_I2C_Init+0xc4>
 8002174:	1e46      	subs	r6, r0, #1
 8002176:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800217a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800217e:	fbb6 f6f7 	udiv	r6, r6, r7
 8002182:	3601      	adds	r6, #1
 8002184:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002188:	fab6 f686 	clz	r6, r6
 800218c:	0976      	lsrs	r6, r6, #5
 800218e:	e7e4      	b.n	800215a <HAL_I2C_Init+0x16e>
 8002190:	3801      	subs	r0, #1
 8002192:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002196:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800219a:	fbb0 f2f3 	udiv	r2, r0, r3
 800219e:	3201      	adds	r2, #1
 80021a0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80021a4:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80021a8:	e782      	b.n	80020b0 <HAL_I2C_Init+0xc4>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e780      	b.n	80020b0 <HAL_I2C_Init+0xc4>
    return HAL_ERROR;
 80021ae:	2001      	movs	r0, #1
}
 80021b0:	4770      	bx	lr
    return HAL_ERROR;
 80021b2:	2001      	movs	r0, #1
 80021b4:	e7a8      	b.n	8002108 <HAL_I2C_Init+0x11c>

080021b6 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80021b6:	b1a8      	cbz	r0, 80021e4 <HAL_I2C_DeInit+0x2e>
{
 80021b8:	b510      	push	{r4, lr}
 80021ba:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80021bc:	2324      	movs	r3, #36	; 0x24
 80021be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80021c2:	6802      	ldr	r2, [r0, #0]
 80021c4:	6813      	ldr	r3, [r2, #0]
 80021c6:	f023 0301 	bic.w	r3, r3, #1
 80021ca:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80021cc:	f7fe fcf5 	bl	8000bba <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80021d0:	2000      	movs	r0, #0
 80021d2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80021d4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021d8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80021da:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 80021de:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80021e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021e4:	2001      	movs	r0, #1
}
 80021e6:	4770      	bx	lr

080021e8 <HAL_I2C_Master_Transmit>:
{
 80021e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021ec:	b084      	sub	sp, #16
 80021ee:	4604      	mov	r4, r0
 80021f0:	460e      	mov	r6, r1
 80021f2:	4690      	mov	r8, r2
 80021f4:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80021f6:	f7ff fab0 	bl	800175a <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b20      	cmp	r3, #32
 8002202:	d004      	beq.n	800220e <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8002204:	2602      	movs	r6, #2
}
 8002206:	4630      	mov	r0, r6
 8002208:	b004      	add	sp, #16
 800220a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800220e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002210:	9000      	str	r0, [sp, #0]
 8002212:	2319      	movs	r3, #25
 8002214:	2201      	movs	r2, #1
 8002216:	2102      	movs	r1, #2
 8002218:	f2c0 0110 	movt	r1, #16
 800221c:	4620      	mov	r0, r4
 800221e:	f7ff fcde 	bl	8001bde <I2C_WaitOnFlagUntilTimeout>
 8002222:	2800      	cmp	r0, #0
 8002224:	f040 8092 	bne.w	800234c <HAL_I2C_Master_Transmit+0x164>
    __HAL_LOCK(hi2c);
 8002228:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800222c:	2b01      	cmp	r3, #1
 800222e:	f000 808f 	beq.w	8002350 <HAL_I2C_Master_Transmit+0x168>
 8002232:	2301      	movs	r3, #1
 8002234:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	f012 0f01 	tst.w	r2, #1
 8002240:	d103      	bne.n	800224a <HAL_I2C_Master_Transmit+0x62>
      __HAL_I2C_ENABLE(hi2c);
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800224a:	6822      	ldr	r2, [r4, #0]
 800224c:	6813      	ldr	r3, [r2, #0]
 800224e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002252:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002254:	2321      	movs	r3, #33	; 0x21
 8002256:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800225a:	2310      	movs	r3, #16
 800225c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002260:	2300      	movs	r3, #0
 8002262:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002264:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002268:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800226a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800226c:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800226e:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8002272:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002274:	462b      	mov	r3, r5
 8002276:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002278:	4631      	mov	r1, r6
 800227a:	4620      	mov	r0, r4
 800227c:	f7ff fd39 	bl	8001cf2 <I2C_MasterRequestWrite>
 8002280:	4606      	mov	r6, r0
 8002282:	2800      	cmp	r0, #0
 8002284:	d166      	bne.n	8002354 <HAL_I2C_Master_Transmit+0x16c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002286:	2300      	movs	r3, #0
 8002288:	9303      	str	r3, [sp, #12]
 800228a:	6823      	ldr	r3, [r4, #0]
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	9203      	str	r2, [sp, #12]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	9303      	str	r3, [sp, #12]
 8002294:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8002296:	e012      	b.n	80022be <HAL_I2C_Master_Transmit+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800229a:	2b04      	cmp	r3, #4
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Master_Transmit+0xba>
        return HAL_ERROR;
 800229e:	2601      	movs	r6, #1
 80022a0:	e7b1      	b.n	8002206 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a2:	6822      	ldr	r2, [r4, #0]
 80022a4:	6813      	ldr	r3, [r2, #0]
 80022a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022aa:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80022ac:	2601      	movs	r6, #1
 80022ae:	e7aa      	b.n	8002206 <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b0:	462a      	mov	r2, r5
 80022b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80022b4:	4620      	mov	r0, r4
 80022b6:	f7ff fe3a 	bl	8001f2e <I2C_WaitOnBTFFlagUntilTimeout>
 80022ba:	2800      	cmp	r0, #0
 80022bc:	d12c      	bne.n	8002318 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 80022be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d035      	beq.n	8002330 <HAL_I2C_Master_Transmit+0x148>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c4:	462a      	mov	r2, r5
 80022c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80022c8:	4620      	mov	r0, r4
 80022ca:	f7ff fe06 	bl	8001eda <I2C_WaitOnTXEFlagUntilTimeout>
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d1e2      	bne.n	8002298 <HAL_I2C_Master_Transmit+0xb0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	7812      	ldrb	r2, [r2, #0]
 80022d8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80022da:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80022dc:	1c4b      	adds	r3, r1, #1
 80022de:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80022e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80022e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022f0:	6822      	ldr	r2, [r4, #0]
 80022f2:	6950      	ldr	r0, [r2, #20]
 80022f4:	f010 0f04 	tst.w	r0, #4
 80022f8:	d0da      	beq.n	80022b0 <HAL_I2C_Master_Transmit+0xc8>
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0d8      	beq.n	80022b0 <HAL_I2C_Master_Transmit+0xc8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022fe:	784b      	ldrb	r3, [r1, #1]
 8002300:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8002302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002304:	3301      	adds	r3, #1
 8002306:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002308:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800230a:	3b01      	subs	r3, #1
 800230c:	b29b      	uxth	r3, r3
 800230e:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002310:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002312:	3b01      	subs	r3, #1
 8002314:	8523      	strh	r3, [r4, #40]	; 0x28
 8002316:	e7cb      	b.n	80022b0 <HAL_I2C_Master_Transmit+0xc8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002318:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800231a:	2b04      	cmp	r3, #4
 800231c:	d001      	beq.n	8002322 <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 800231e:	2601      	movs	r6, #1
 8002320:	e771      	b.n	8002206 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002322:	6822      	ldr	r2, [r4, #0]
 8002324:	6813      	ldr	r3, [r2, #0]
 8002326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800232a:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 800232c:	2601      	movs	r6, #1
 800232e:	e76a      	b.n	8002206 <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002330:	6822      	ldr	r2, [r4, #0]
 8002332:	6813      	ldr	r3, [r2, #0]
 8002334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002338:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800233a:	2320      	movs	r3, #32
 800233c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002340:	2300      	movs	r3, #0
 8002342:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002346:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800234a:	e75c      	b.n	8002206 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 800234c:	2602      	movs	r6, #2
 800234e:	e75a      	b.n	8002206 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8002350:	2602      	movs	r6, #2
 8002352:	e758      	b.n	8002206 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8002354:	2601      	movs	r6, #1
 8002356:	e756      	b.n	8002206 <HAL_I2C_Master_Transmit+0x1e>

08002358 <HAL_I2C_Master_Receive>:
{
 8002358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800235c:	b088      	sub	sp, #32
 800235e:	4604      	mov	r4, r0
 8002360:	460d      	mov	r5, r1
 8002362:	4690      	mov	r8, r2
 8002364:	461f      	mov	r7, r3
  __IO uint32_t count = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 800236a:	f7ff f9f6 	bl	800175a <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800236e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b20      	cmp	r3, #32
 8002376:	d004      	beq.n	8002382 <HAL_I2C_Master_Receive+0x2a>
    return HAL_BUSY;
 8002378:	2502      	movs	r5, #2
}
 800237a:	4628      	mov	r0, r5
 800237c:	b008      	add	sp, #32
 800237e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002382:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002384:	9000      	str	r0, [sp, #0]
 8002386:	2319      	movs	r3, #25
 8002388:	2201      	movs	r2, #1
 800238a:	2102      	movs	r1, #2
 800238c:	f2c0 0110 	movt	r1, #16
 8002390:	4620      	mov	r0, r4
 8002392:	f7ff fc24 	bl	8001bde <I2C_WaitOnFlagUntilTimeout>
 8002396:	2800      	cmp	r0, #0
 8002398:	f040 8165 	bne.w	8002666 <HAL_I2C_Master_Receive+0x30e>
    __HAL_LOCK(hi2c);
 800239c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	f000 8162 	beq.w	800266a <HAL_I2C_Master_Receive+0x312>
 80023a6:	2301      	movs	r3, #1
 80023a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	f012 0f01 	tst.w	r2, #1
 80023b4:	d103      	bne.n	80023be <HAL_I2C_Master_Receive+0x66>
      __HAL_I2C_ENABLE(hi2c);
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023be:	6822      	ldr	r2, [r4, #0]
 80023c0:	6813      	ldr	r3, [r2, #0]
 80023c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023c6:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80023c8:	2322      	movs	r3, #34	; 0x22
 80023ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023ce:	2310      	movs	r3, #16
 80023d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80023d8:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023dc:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80023e0:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e2:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 80023e6:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023e8:	4633      	mov	r3, r6
 80023ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80023ec:	4629      	mov	r1, r5
 80023ee:	4620      	mov	r0, r4
 80023f0:	f7ff fcdd 	bl	8001dae <I2C_MasterRequestRead>
 80023f4:	4605      	mov	r5, r0
 80023f6:	2800      	cmp	r0, #0
 80023f8:	f040 8139 	bne.w	800266e <HAL_I2C_Master_Receive+0x316>
    if (hi2c->XferSize == 0U)
 80023fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80023fe:	b95b      	cbnz	r3, 8002418 <HAL_I2C_Master_Receive+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002400:	9303      	str	r3, [sp, #12]
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	9203      	str	r2, [sp, #12]
 8002408:	699a      	ldr	r2, [r3, #24]
 800240a:	9203      	str	r2, [sp, #12]
 800240c:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e0e3      	b.n	80025e0 <HAL_I2C_Master_Receive+0x288>
    else if (hi2c->XferSize == 1U)
 8002418:	2b01      	cmp	r3, #1
 800241a:	d00f      	beq.n	800243c <HAL_I2C_Master_Receive+0xe4>
    else if (hi2c->XferSize == 2U)
 800241c:	2b02      	cmp	r3, #2
 800241e:	d021      	beq.n	8002464 <HAL_I2C_Master_Receive+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002420:	6822      	ldr	r2, [r4, #0]
 8002422:	6813      	ldr	r3, [r2, #0]
 8002424:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002428:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800242a:	2300      	movs	r3, #0
 800242c:	9306      	str	r3, [sp, #24]
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	9206      	str	r2, [sp, #24]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	9306      	str	r3, [sp, #24]
 8002438:	9b06      	ldr	r3, [sp, #24]
 800243a:	e0d1      	b.n	80025e0 <HAL_I2C_Master_Receive+0x288>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800243c:	6822      	ldr	r2, [r4, #0]
 800243e:	6813      	ldr	r3, [r2, #0]
 8002440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002448:	2300      	movs	r3, #0
 800244a:	9304      	str	r3, [sp, #16]
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	9204      	str	r2, [sp, #16]
 8002452:	699a      	ldr	r2, [r3, #24]
 8002454:	9204      	str	r2, [sp, #16]
 8002456:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002460:	b662      	cpsie	i
 8002462:	e0bd      	b.n	80025e0 <HAL_I2C_Master_Receive+0x288>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002464:	6822      	ldr	r2, [r4, #0]
 8002466:	6813      	ldr	r3, [r2, #0]
 8002468:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800246c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800246e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002470:	2300      	movs	r3, #0
 8002472:	9305      	str	r3, [sp, #20]
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	695a      	ldr	r2, [r3, #20]
 8002478:	9205      	str	r2, [sp, #20]
 800247a:	699a      	ldr	r2, [r3, #24]
 800247c:	9205      	str	r2, [sp, #20]
 800247e:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002486:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002488:	b662      	cpsie	i
 800248a:	e0a9      	b.n	80025e0 <HAL_I2C_Master_Receive+0x288>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800248c:	4632      	mov	r2, r6
 800248e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002490:	4620      	mov	r0, r4
 8002492:	f7ff fd76 	bl	8001f82 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002496:	2800      	cmp	r0, #0
 8002498:	f040 80eb 	bne.w	8002672 <HAL_I2C_Master_Receive+0x31a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024a2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80024a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024a6:	3301      	adds	r3, #1
 80024a8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80024aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80024ac:	3b01      	subs	r3, #1
 80024ae:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80024b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80024b8:	e092      	b.n	80025e0 <HAL_I2C_Master_Receive+0x288>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ba:	9600      	str	r6, [sp, #0]
 80024bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024be:	2200      	movs	r2, #0
 80024c0:	2104      	movs	r1, #4
 80024c2:	f2c0 0101 	movt	r1, #1
 80024c6:	4620      	mov	r0, r4
 80024c8:	f7ff fb89 	bl	8001bde <I2C_WaitOnFlagUntilTimeout>
 80024cc:	2800      	cmp	r0, #0
 80024ce:	f040 80d4 	bne.w	800267a <HAL_I2C_Master_Receive+0x322>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024d2:	6822      	ldr	r2, [r4, #0]
 80024d4:	6813      	ldr	r3, [r2, #0]
 80024d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024da:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024dc:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	691a      	ldr	r2, [r3, #16]
 80024e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024e4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80024e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024e8:	3301      	adds	r3, #1
 80024ea:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80024ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80024ee:	3b01      	subs	r3, #1
 80024f0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80024f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80024fa:	f240 0304 	movw	r3, #4
 80024fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	08db      	lsrs	r3, r3, #3
 8002506:	f24b 5289 	movw	r2, #46473	; 0xb589
 800250a:	f2c1 42f8 	movt	r2, #5368	; 0x14f8
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002518:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800251c:	9307      	str	r3, [sp, #28]
            count--;
 800251e:	9b07      	ldr	r3, [sp, #28]
 8002520:	3b01      	subs	r3, #1
 8002522:	9307      	str	r3, [sp, #28]
            if (count == 0U)
 8002524:	9b07      	ldr	r3, [sp, #28]
 8002526:	b333      	cbz	r3, 8002576 <HAL_I2C_Master_Receive+0x21e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	f012 0f04 	tst.w	r2, #4
 8002530:	d0f5      	beq.n	800251e <HAL_I2C_Master_Receive+0x1c6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002538:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800253a:	6823      	ldr	r3, [r4, #0]
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002540:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002544:	3301      	adds	r3, #1
 8002546:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002548:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800254a:	3b01      	subs	r3, #1
 800254c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800254e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002550:	3b01      	subs	r3, #1
 8002552:	b29b      	uxth	r3, r3
 8002554:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002556:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800255e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002562:	3301      	adds	r3, #1
 8002564:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002566:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800256c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800256e:	3b01      	subs	r3, #1
 8002570:	b29b      	uxth	r3, r3
 8002572:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002574:	e034      	b.n	80025e0 <HAL_I2C_Master_Receive+0x288>
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002576:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002578:	2220      	movs	r2, #32
 800257a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800257e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002582:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002584:	f042 0220 	orr.w	r2, r2, #32
 8002588:	6422      	str	r2, [r4, #64]	; 0x40
 800258a:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 800258c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8002590:	2501      	movs	r5, #1
 8002592:	e6f2      	b.n	800237a <HAL_I2C_Master_Receive+0x22>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002594:	4632      	mov	r2, r6
 8002596:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002598:	4620      	mov	r0, r4
 800259a:	f7ff fcf2 	bl	8001f82 <I2C_WaitOnRXNEFlagUntilTimeout>
 800259e:	2800      	cmp	r0, #0
 80025a0:	d16d      	bne.n	800267e <HAL_I2C_Master_Receive+0x326>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025a8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025ac:	1c53      	adds	r3, r2, #1
 80025ae:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80025b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80025b2:	3b01      	subs	r3, #1
 80025b4:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80025b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	6959      	ldr	r1, [r3, #20]
 80025c2:	f011 0f04 	tst.w	r1, #4
 80025c6:	d00b      	beq.n	80025e0 <HAL_I2C_Master_Receive+0x288>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80025cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025ce:	3301      	adds	r3, #1
 80025d0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80025d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80025d4:	3b01      	subs	r3, #1
 80025d6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80025d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29b      	uxth	r3, r3
 80025de:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d036      	beq.n	8002654 <HAL_I2C_Master_Receive+0x2fc>
      if (hi2c->XferSize <= 3U)
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d8d4      	bhi.n	8002594 <HAL_I2C_Master_Receive+0x23c>
        if (hi2c->XferSize == 1U)
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	f43f af4e 	beq.w	800248c <HAL_I2C_Master_Receive+0x134>
        else if (hi2c->XferSize == 2U)
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	f47f af62 	bne.w	80024ba <HAL_I2C_Master_Receive+0x162>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025f6:	9600      	str	r6, [sp, #0]
 80025f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80025fa:	2200      	movs	r2, #0
 80025fc:	2104      	movs	r1, #4
 80025fe:	f2c0 0101 	movt	r1, #1
 8002602:	4620      	mov	r0, r4
 8002604:	f7ff faeb 	bl	8001bde <I2C_WaitOnFlagUntilTimeout>
 8002608:	2800      	cmp	r0, #0
 800260a:	d134      	bne.n	8002676 <HAL_I2C_Master_Receive+0x31e>
  __ASM volatile ("cpsid i" : : : "memory");
 800260c:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260e:	6822      	ldr	r2, [r4, #0]
 8002610:	6813      	ldr	r3, [r2, #0]
 8002612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002616:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800261e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002622:	3301      	adds	r3, #1
 8002624:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002626:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002628:	3b01      	subs	r3, #1
 800262a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800262c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800262e:	3b01      	subs	r3, #1
 8002630:	b29b      	uxth	r3, r3
 8002632:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002634:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	691a      	ldr	r2, [r3, #16]
 800263a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800263c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800263e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002640:	3301      	adds	r3, #1
 8002642:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002644:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002646:	3b01      	subs	r3, #1
 8002648:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800264a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800264c:	3b01      	subs	r3, #1
 800264e:	b29b      	uxth	r3, r3
 8002650:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002652:	e7c5      	b.n	80025e0 <HAL_I2C_Master_Receive+0x288>
    hi2c->State = HAL_I2C_STATE_READY;
 8002654:	2320      	movs	r3, #32
 8002656:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800265a:	2300      	movs	r3, #0
 800265c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002660:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002664:	e689      	b.n	800237a <HAL_I2C_Master_Receive+0x22>
      return HAL_BUSY;
 8002666:	2502      	movs	r5, #2
 8002668:	e687      	b.n	800237a <HAL_I2C_Master_Receive+0x22>
    __HAL_LOCK(hi2c);
 800266a:	2502      	movs	r5, #2
 800266c:	e685      	b.n	800237a <HAL_I2C_Master_Receive+0x22>
      return HAL_ERROR;
 800266e:	2501      	movs	r5, #1
 8002670:	e683      	b.n	800237a <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8002672:	2501      	movs	r5, #1
 8002674:	e681      	b.n	800237a <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8002676:	2501      	movs	r5, #1
 8002678:	e67f      	b.n	800237a <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 800267a:	2501      	movs	r5, #1
 800267c:	e67d      	b.n	800237a <HAL_I2C_Master_Receive+0x22>
          return HAL_ERROR;
 800267e:	2501      	movs	r5, #1
 8002680:	e67b      	b.n	800237a <HAL_I2C_Master_Receive+0x22>

08002682 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002682:	b570      	push	{r4, r5, r6, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002684:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002688:	d042      	beq.n	8002710 <HAL_PCD_EP_DB_Receive+0x8e>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800268a:	6804      	ldr	r4, [r0, #0]
 800268c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002690:	780d      	ldrb	r5, [r1, #0]
 8002692:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002696:	3302      	adds	r3, #2
 8002698:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800269c:	f8b3 4400 	ldrh.w	r4, [r3, #1024]	; 0x400
 80026a0:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 80026a4:	698b      	ldr	r3, [r1, #24]
 80026a6:	42a3      	cmp	r3, r4
 80026a8:	d328      	bcc.n	80026fc <HAL_PCD_EP_DB_Receive+0x7a>
    {
      ep->xfer_len -= count;
 80026aa:	1b1b      	subs	r3, r3, r4
 80026ac:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 80026ae:	698b      	ldr	r3, [r1, #24]
 80026b0:	b97b      	cbnz	r3, 80026d2 <HAL_PCD_EP_DB_Receive+0x50>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80026b2:	6806      	ldr	r6, [r0, #0]
 80026b4:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ce:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026d2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80026d6:	d00e      	beq.n	80026f6 <HAL_PCD_EP_DB_Receive+0x74>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026d8:	6802      	ldr	r2, [r0, #0]
 80026da:	780d      	ldrb	r5, [r1, #0]
 80026dc:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026f2:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 80026f6:	b924      	cbnz	r4, 8002702 <HAL_PCD_EP_DB_Receive+0x80>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 80026f8:	4620      	mov	r0, r4
 80026fa:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	618b      	str	r3, [r1, #24]
 8002700:	e7d5      	b.n	80026ae <HAL_PCD_EP_DB_Receive+0x2c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002702:	4623      	mov	r3, r4
 8002704:	890a      	ldrh	r2, [r1, #8]
 8002706:	6949      	ldr	r1, [r1, #20]
 8002708:	6800      	ldr	r0, [r0, #0]
 800270a:	f002 fe40 	bl	800538e <USB_ReadPMA>
 800270e:	e7f3      	b.n	80026f8 <HAL_PCD_EP_DB_Receive+0x76>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002710:	6804      	ldr	r4, [r0, #0]
 8002712:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002716:	780d      	ldrb	r5, [r1, #0]
 8002718:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800271c:	3306      	adds	r3, #6
 800271e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002722:	f8b3 4400 	ldrh.w	r4, [r3, #1024]	; 0x400
 8002726:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 800272a:	698b      	ldr	r3, [r1, #24]
 800272c:	42a3      	cmp	r3, r4
 800272e:	d32e      	bcc.n	800278e <HAL_PCD_EP_DB_Receive+0x10c>
      ep->xfer_len -= count;
 8002730:	1b1b      	subs	r3, r3, r4
 8002732:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8002734:	698b      	ldr	r3, [r1, #24]
 8002736:	b97b      	cbnz	r3, 8002758 <HAL_PCD_EP_DB_Receive+0xd6>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002738:	6806      	ldr	r6, [r0, #0]
 800273a:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 800273e:	b29b      	uxth	r3, r3
 8002740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002748:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800274c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002754:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002758:	f012 0f40 	tst.w	r2, #64	; 0x40
 800275c:	d10e      	bne.n	800277c <HAL_PCD_EP_DB_Receive+0xfa>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800275e:	6802      	ldr	r2, [r0, #0]
 8002760:	780d      	ldrb	r5, [r1, #0]
 8002762:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8002766:	b29b      	uxth	r3, r3
 8002768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800276c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002774:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002778:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    if (count != 0U)
 800277c:	2c00      	cmp	r4, #0
 800277e:	d0bb      	beq.n	80026f8 <HAL_PCD_EP_DB_Receive+0x76>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002780:	4623      	mov	r3, r4
 8002782:	894a      	ldrh	r2, [r1, #10]
 8002784:	6949      	ldr	r1, [r1, #20]
 8002786:	6800      	ldr	r0, [r0, #0]
 8002788:	f002 fe01 	bl	800538e <USB_ReadPMA>
 800278c:	e7b4      	b.n	80026f8 <HAL_PCD_EP_DB_Receive+0x76>
      ep->xfer_len = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	618b      	str	r3, [r1, #24]
 8002792:	e7cf      	b.n	8002734 <HAL_PCD_EP_DB_Receive+0xb2>

08002794 <HAL_PCD_Init>:
{
 8002794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002796:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8002798:	2800      	cmp	r0, #0
 800279a:	d07f      	beq.n	800289c <HAL_PCD_Init+0x108>
 800279c:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800279e:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80027a2:	b1d3      	cbz	r3, 80027da <HAL_PCD_Init+0x46>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80027a4:	2303      	movs	r3, #3
 80027a6:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80027aa:	6820      	ldr	r0, [r4, #0]
 80027ac:	f001 ff24 	bl	80045f8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027b0:	4625      	mov	r5, r4
 80027b2:	f855 7b10 	ldr.w	r7, [r5], #16
 80027b6:	466e      	mov	r6, sp
 80027b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80027bc:	682b      	ldr	r3, [r5, #0]
 80027be:	6033      	str	r3, [r6, #0]
 80027c0:	1d23      	adds	r3, r4, #4
 80027c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c4:	4638      	mov	r0, r7
 80027c6:	f001 ff07 	bl	80045d8 <USB_CoreInit>
 80027ca:	b158      	cbz	r0, 80027e4 <HAL_PCD_Init+0x50>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027cc:	2302      	movs	r3, #2
 80027ce:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80027d2:	2501      	movs	r5, #1
}
 80027d4:	4628      	mov	r0, r5
 80027d6:	b007      	add	sp, #28
 80027d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80027da:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80027de:	f003 fdce 	bl	800637e <HAL_PCD_MspInit>
 80027e2:	e7df      	b.n	80027a4 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027e4:	2100      	movs	r1, #0
 80027e6:	6820      	ldr	r0, [r4, #0]
 80027e8:	f001 ff10 	bl	800460c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ec:	2300      	movs	r3, #0
 80027ee:	e01a      	b.n	8002826 <HAL_PCD_Init+0x92>
    hpcd->IN_ep[i].is_in = 1U;
 80027f0:	1c58      	adds	r0, r3, #1
 80027f2:	0081      	lsls	r1, r0, #2
 80027f4:	180d      	adds	r5, r1, r0
 80027f6:	00ea      	lsls	r2, r5, #3
 80027f8:	4422      	add	r2, r4
 80027fa:	2501      	movs	r5, #1
 80027fc:	7055      	strb	r5, [r2, #1]
    hpcd->IN_ep[i].num = i;
 80027fe:	180d      	adds	r5, r1, r0
 8002800:	00ea      	lsls	r2, r5, #3
 8002802:	54a3      	strb	r3, [r4, r2]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002804:	009d      	lsls	r5, r3, #2
 8002806:	18ee      	adds	r6, r5, r3
 8002808:	00f2      	lsls	r2, r6, #3
 800280a:	4422      	add	r2, r4
 800280c:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800280e:	4401      	add	r1, r0
 8002810:	00ce      	lsls	r6, r1, #3
 8002812:	4426      	add	r6, r4
 8002814:	2100      	movs	r1, #0
 8002816:	70f1      	strb	r1, [r6, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002818:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800281a:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 800281c:	442b      	add	r3, r5
 800281e:	00da      	lsls	r2, r3, #3
 8002820:	4422      	add	r2, r4
 8002822:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002824:	b2c3      	uxtb	r3, r0
 8002826:	6865      	ldr	r5, [r4, #4]
 8002828:	42ab      	cmp	r3, r5
 800282a:	d3e1      	bcc.n	80027f0 <HAL_PCD_Init+0x5c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800282c:	2300      	movs	r3, #0
 800282e:	e015      	b.n	800285c <HAL_PCD_Init+0xc8>
    hpcd->OUT_ep[i].is_in = 0U;
 8002830:	0098      	lsls	r0, r3, #2
 8002832:	18c1      	adds	r1, r0, r3
 8002834:	00ca      	lsls	r2, r1, #3
 8002836:	4422      	add	r2, r4
 8002838:	2100      	movs	r1, #0
 800283a:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 800283e:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002842:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002846:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800284a:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800284e:	18c2      	adds	r2, r0, r3
 8002850:	00d0      	lsls	r0, r2, #3
 8002852:	4420      	add	r0, r4
 8002854:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002858:	3301      	adds	r3, #1
 800285a:	b2db      	uxtb	r3, r3
 800285c:	429d      	cmp	r5, r3
 800285e:	d8e7      	bhi.n	8002830 <HAL_PCD_Init+0x9c>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002860:	4625      	mov	r5, r4
 8002862:	f855 7b10 	ldr.w	r7, [r5], #16
 8002866:	466e      	mov	r6, sp
 8002868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800286a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800286c:	682b      	ldr	r3, [r5, #0]
 800286e:	6033      	str	r3, [r6, #0]
 8002870:	1d23      	adds	r3, r4, #4
 8002872:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002874:	4638      	mov	r0, r7
 8002876:	f001 fecb 	bl	8004610 <USB_DevInit>
 800287a:	4605      	mov	r5, r0
 800287c:	b120      	cbz	r0, 8002888 <HAL_PCD_Init+0xf4>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800287e:	2302      	movs	r3, #2
 8002880:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8002884:	2501      	movs	r5, #1
 8002886:	e7a5      	b.n	80027d4 <HAL_PCD_Init+0x40>
  hpcd->USB_Address = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800288e:	2301      	movs	r3, #1
 8002890:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002894:	6820      	ldr	r0, [r4, #0]
 8002896:	f002 f9ce 	bl	8004c36 <USB_DevDisconnect>
  return HAL_OK;
 800289a:	e79b      	b.n	80027d4 <HAL_PCD_Init+0x40>
    return HAL_ERROR;
 800289c:	2501      	movs	r5, #1
 800289e:	e799      	b.n	80027d4 <HAL_PCD_Init+0x40>

080028a0 <HAL_PCD_Start>:
{
 80028a0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80028a2:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d011      	beq.n	80028ce <HAL_PCD_Start+0x2e>
 80028aa:	4604      	mov	r4, r0
 80028ac:	2501      	movs	r5, #1
 80028ae:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80028b2:	6800      	ldr	r0, [r0, #0]
 80028b4:	f001 fe97 	bl	80045e6 <USB_EnableGlobalInt>
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80028b8:	4629      	mov	r1, r5
 80028ba:	4620      	mov	r0, r4
 80028bc:	f003 fe78 	bl	80065b0 <HAL_PCDEx_SetConnectionState>
  (void)USB_DevConnect(hpcd->Instance);
 80028c0:	6820      	ldr	r0, [r4, #0]
 80028c2:	f002 f9b6 	bl	8004c32 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80028cc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80028ce:	2002      	movs	r0, #2
 80028d0:	e7fc      	b.n	80028cc <HAL_PCD_Start+0x2c>

080028d2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028d2:	b570      	push	{r4, r5, r6, lr}
 80028d4:	4605      	mov	r5, r0
 80028d6:	460c      	mov	r4, r1
 80028d8:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028da:	f012 0f40 	tst.w	r2, #64	; 0x40
 80028de:	f000 80b4 	beq.w	8002a4a <HAL_PCD_EP_DB_Transmit+0x178>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028e2:	6802      	ldr	r2, [r0, #0]
 80028e4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80028e8:	7809      	ldrb	r1, [r1, #0]
 80028ea:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80028ee:	3302      	adds	r3, #2
 80028f0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80028f4:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 80028f8:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxByteNbre)
 80028fc:	69a3      	ldr	r3, [r4, #24]
 80028fe:	4293      	cmp	r3, r2
 8002900:	d92b      	bls.n	800295a <HAL_PCD_EP_DB_Transmit+0x88>
    {
      ep->xfer_len -= TxByteNbre;
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	61a3      	str	r3, [r4, #24]
    else
    {
      ep->xfer_len = 0U;
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002906:	69a3      	ldr	r3, [r4, #24]
 8002908:	b353      	cbz	r3, 8002960 <HAL_PCD_EP_DB_Transmit+0x8e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800290a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800290e:	d00d      	beq.n	800292c <HAL_PCD_EP_DB_Transmit+0x5a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002910:	6828      	ldr	r0, [r5, #0]
 8002912:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002916:	b29b      	uxth	r3, r3
 8002918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800291c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002920:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002928:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800292c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002930:	2b01      	cmp	r3, #1
 8002932:	d02b      	beq.n	800298c <HAL_PCD_EP_DB_Transmit+0xba>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002934:	682a      	ldr	r2, [r5, #0]
 8002936:	7821      	ldrb	r1, [r4, #0]
 8002938:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800293c:	b29b      	uxth	r3, r3
 800293e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002946:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800294a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800294e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002952:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8002956:	2000      	movs	r0, #0
 8002958:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	61a3      	str	r3, [r4, #24]
 800295e:	e7d2      	b.n	8002906 <HAL_PCD_EP_DB_Transmit+0x34>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002960:	4628      	mov	r0, r5
 8002962:	f003 fd42 	bl	80063ea <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002966:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800296a:	d0e3      	beq.n	8002934 <HAL_PCD_EP_DB_Transmit+0x62>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800296c:	682a      	ldr	r2, [r5, #0]
 800296e:	7821      	ldrb	r1, [r4, #0]
 8002970:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002974:	b29b      	uxth	r3, r3
 8002976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800297a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002986:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800298a:	e7d3      	b.n	8002934 <HAL_PCD_EP_DB_Transmit+0x62>
        ep->xfer_buff += TxByteNbre;
 800298c:	6963      	ldr	r3, [r4, #20]
 800298e:	4413      	add	r3, r2
 8002990:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8002992:	69e3      	ldr	r3, [r4, #28]
 8002994:	4413      	add	r3, r2
 8002996:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8002998:	6a21      	ldr	r1, [r4, #32]
 800299a:	6923      	ldr	r3, [r4, #16]
 800299c:	4299      	cmp	r1, r3
 800299e:	d31b      	bcc.n	80029d8 <HAL_PCD_EP_DB_Transmit+0x106>
          ep->xfer_len_db -= len;
 80029a0:	1ac9      	subs	r1, r1, r3
 80029a2:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029a4:	7862      	ldrb	r2, [r4, #1]
 80029a6:	2a00      	cmp	r2, #0
 80029a8:	d13b      	bne.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x150>
 80029aa:	682a      	ldr	r2, [r5, #0]
 80029ac:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80029b0:	440a      	add	r2, r1
 80029b2:	7821      	ldrb	r1, [r4, #0]
 80029b4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80029b8:	b9d3      	cbnz	r3, 80029f0 <HAL_PCD_EP_DB_Transmit+0x11e>
 80029ba:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 80029be:	b289      	uxth	r1, r1
 80029c0:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80029c4:	b289      	uxth	r1, r1
 80029c6:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 80029ca:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 80029ce:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80029d2:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 80029d6:	e026      	b.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x154>
        else if (ep->xfer_len_db == 0U)
 80029d8:	b921      	cbnz	r1, 80029e4 <HAL_PCD_EP_DB_Transmit+0x112>
          ep->xfer_fill_db = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 80029e0:	4613      	mov	r3, r2
 80029e2:	e7df      	b.n	80029a4 <HAL_PCD_EP_DB_Transmit+0xd2>
          ep->xfer_fill_db = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 80029ea:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 80029ec:	460b      	mov	r3, r1
 80029ee:	e7d9      	b.n	80029a4 <HAL_PCD_EP_DB_Transmit+0xd2>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029f0:	2b3e      	cmp	r3, #62	; 0x3e
 80029f2:	d809      	bhi.n	8002a08 <HAL_PCD_EP_DB_Transmit+0x136>
 80029f4:	0859      	lsrs	r1, r3, #1
 80029f6:	f013 0f01 	tst.w	r3, #1
 80029fa:	d000      	beq.n	80029fe <HAL_PCD_EP_DB_Transmit+0x12c>
 80029fc:	3101      	adds	r1, #1
 80029fe:	0289      	lsls	r1, r1, #10
 8002a00:	b289      	uxth	r1, r1
 8002a02:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002a06:	e00e      	b.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x154>
 8002a08:	0959      	lsrs	r1, r3, #5
 8002a0a:	f013 0f1f 	tst.w	r3, #31
 8002a0e:	d100      	bne.n	8002a12 <HAL_PCD_EP_DB_Transmit+0x140>
 8002a10:	3901      	subs	r1, #1
 8002a12:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002a16:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002a1a:	b289      	uxth	r1, r1
 8002a1c:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002a20:	e001      	b.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x154>
 8002a22:	2a01      	cmp	r2, #1
 8002a24:	d006      	beq.n	8002a34 <HAL_PCD_EP_DB_Transmit+0x162>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	8922      	ldrh	r2, [r4, #8]
 8002a2a:	6961      	ldr	r1, [r4, #20]
 8002a2c:	6828      	ldr	r0, [r5, #0]
 8002a2e:	f002 f909 	bl	8004c44 <USB_WritePMA>
 8002a32:	e77f      	b.n	8002934 <HAL_PCD_EP_DB_Transmit+0x62>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a34:	682a      	ldr	r2, [r5, #0]
 8002a36:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8002a3a:	440a      	add	r2, r1
 8002a3c:	7821      	ldrb	r1, [r4, #0]
 8002a3e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002a42:	b299      	uxth	r1, r3
 8002a44:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002a48:	e7ed      	b.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x154>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a4a:	6802      	ldr	r2, [r0, #0]
 8002a4c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002a50:	7809      	ldrb	r1, [r1, #0]
 8002a52:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002a56:	3306      	adds	r3, #6
 8002a58:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002a5c:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8002a60:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8002a64:	69a3      	ldr	r3, [r4, #24]
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d340      	bcc.n	8002aec <HAL_PCD_EP_DB_Transmit+0x21a>
      ep->xfer_len -= TxByteNbre;
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8002a6e:	69a3      	ldr	r3, [r4, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d03e      	beq.n	8002af2 <HAL_PCD_EP_DB_Transmit+0x220>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a74:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002a78:	d10d      	bne.n	8002a96 <HAL_PCD_EP_DB_Transmit+0x1c4>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a7a:	6828      	ldr	r0, [r5, #0]
 8002a7c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a92:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002a96:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	f47f af4a 	bne.w	8002934 <HAL_PCD_EP_DB_Transmit+0x62>
        ep->xfer_buff += TxByteNbre;
 8002aa0:	6963      	ldr	r3, [r4, #20]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8002aa6:	69e3      	ldr	r3, [r4, #28]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8002aac:	6a21      	ldr	r1, [r4, #32]
 8002aae:	6923      	ldr	r3, [r4, #16]
 8002ab0:	4299      	cmp	r1, r3
 8002ab2:	d335      	bcc.n	8002b20 <HAL_PCD_EP_DB_Transmit+0x24e>
          ep->xfer_len_db -= len;
 8002ab4:	1ac9      	subs	r1, r1, r3
 8002ab6:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ab8:	682a      	ldr	r2, [r5, #0]
 8002aba:	7861      	ldrb	r1, [r4, #1]
 8002abc:	2900      	cmp	r1, #0
 8002abe:	d154      	bne.n	8002b6a <HAL_PCD_EP_DB_Transmit+0x298>
 8002ac0:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8002ac4:	440a      	add	r2, r1
 8002ac6:	7821      	ldrb	r1, [r4, #0]
 8002ac8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002acc:	bba3      	cbnz	r3, 8002b38 <HAL_PCD_EP_DB_Transmit+0x266>
 8002ace:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 8002ad2:	b289      	uxth	r1, r1
 8002ad4:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002ad8:	b289      	uxth	r1, r1
 8002ada:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8002ade:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 8002ae2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002ae6:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8002aea:	e040      	b.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x29c>
      ep->xfer_len = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61a3      	str	r3, [r4, #24]
 8002af0:	e7bd      	b.n	8002a6e <HAL_PCD_EP_DB_Transmit+0x19c>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002af2:	4628      	mov	r0, r5
 8002af4:	f003 fc79 	bl	80063ea <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002af8:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002afc:	f47f af1a 	bne.w	8002934 <HAL_PCD_EP_DB_Transmit+0x62>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b00:	682a      	ldr	r2, [r5, #0]
 8002b02:	7821      	ldrb	r1, [r4, #0]
 8002b04:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b1a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002b1e:	e709      	b.n	8002934 <HAL_PCD_EP_DB_Transmit+0x62>
        else if (ep->xfer_len_db == 0U)
 8002b20:	b921      	cbnz	r1, 8002b2c <HAL_PCD_EP_DB_Transmit+0x25a>
          ep->xfer_fill_db = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 8002b28:	4613      	mov	r3, r2
 8002b2a:	e7c5      	b.n	8002ab8 <HAL_PCD_EP_DB_Transmit+0x1e6>
          ep->xfer_len_db = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8002b30:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b34:	460b      	mov	r3, r1
 8002b36:	e7bf      	b.n	8002ab8 <HAL_PCD_EP_DB_Transmit+0x1e6>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b38:	2b3e      	cmp	r3, #62	; 0x3e
 8002b3a:	d809      	bhi.n	8002b50 <HAL_PCD_EP_DB_Transmit+0x27e>
 8002b3c:	0859      	lsrs	r1, r3, #1
 8002b3e:	f013 0f01 	tst.w	r3, #1
 8002b42:	d000      	beq.n	8002b46 <HAL_PCD_EP_DB_Transmit+0x274>
 8002b44:	3101      	adds	r1, #1
 8002b46:	0289      	lsls	r1, r1, #10
 8002b48:	b289      	uxth	r1, r1
 8002b4a:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8002b4e:	e00e      	b.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x29c>
 8002b50:	0959      	lsrs	r1, r3, #5
 8002b52:	f013 0f1f 	tst.w	r3, #31
 8002b56:	d100      	bne.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x288>
 8002b58:	3901      	subs	r1, #1
 8002b5a:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002b5e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002b62:	b289      	uxth	r1, r1
 8002b64:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8002b68:	e001      	b.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x29c>
 8002b6a:	2901      	cmp	r1, #1
 8002b6c:	d006      	beq.n	8002b7c <HAL_PCD_EP_DB_Transmit+0x2aa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	8962      	ldrh	r2, [r4, #10]
 8002b72:	6961      	ldr	r1, [r4, #20]
 8002b74:	6828      	ldr	r0, [r5, #0]
 8002b76:	f002 f865 	bl	8004c44 <USB_WritePMA>
 8002b7a:	e6db      	b.n	8002934 <HAL_PCD_EP_DB_Transmit+0x62>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b7c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8002b80:	440a      	add	r2, r1
 8002b82:	7821      	ldrb	r1, [r4, #0]
 8002b84:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002b88:	b299      	uxth	r1, r3
 8002b8a:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8002b8e:	e7ee      	b.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x29c>

08002b90 <PCD_EP_ISR_Handler>:
{
 8002b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b94:	4604      	mov	r4, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b96:	6820      	ldr	r0, [r4, #0]
 8002b98:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002b9c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002ba0:	f000 81fa 	beq.w	8002f98 <PCD_EP_ISR_Handler+0x408>
    wIstr = hpcd->Instance->ISTR;
 8002ba4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002ba8:	b29b      	uxth	r3, r3
    if (epindex == 0U)
 8002baa:	f013 050f 	ands.w	r5, r3, #15
 8002bae:	f040 80cd 	bne.w	8002d4c <PCD_EP_ISR_Handler+0x1bc>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002bb2:	f013 0f10 	tst.w	r3, #16
 8002bb6:	d058      	beq.n	8002c6a <PCD_EP_ISR_Handler+0xda>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bb8:	8803      	ldrh	r3, [r0, #0]
 8002bba:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002bbc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002bc0:	f040 8089 	bne.w	8002cd6 <PCD_EP_ISR_Handler+0x146>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002bc4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002bc8:	d0e5      	beq.n	8002b96 <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bca:	8803      	ldrh	r3, [r0, #0]
 8002bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd0:	051b      	lsls	r3, r3, #20
 8002bd2:	0d1b      	lsrs	r3, r3, #20
 8002bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd8:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bda:	6820      	ldr	r0, [r4, #0]
 8002bdc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002be0:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002be4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002be8:	3306      	adds	r3, #6
 8002bea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002bee:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bf6:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002bfa:	b18b      	cbz	r3, 8002c20 <PCD_EP_ISR_Handler+0x90>
 8002bfc:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8002c00:	b171      	cbz	r1, 8002c20 <PCD_EP_ISR_Handler+0x90>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c02:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002c06:	f002 fbc2 	bl	800538e <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002c0a:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8002c0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002c12:	4413      	add	r3, r2
 8002c14:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f003 fbd9 	bl	80063d2 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002c26:	4413      	add	r3, r2
 8002c28:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
 8002c2c:	2a00      	cmp	r2, #0
 8002c2e:	d174      	bne.n	8002d1a <PCD_EP_ISR_Handler+0x18a>
 8002c30:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002c34:	b292      	uxth	r2, r2
 8002c36:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002c3a:	b292      	uxth	r2, r2
 8002c3c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002c40:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002c44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c48:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c4c:	6822      	ldr	r2, [r4, #0]
 8002c4e:	8813      	ldrh	r3, [r2, #0]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c66:	8013      	strh	r3, [r2, #0]
 8002c68:	e795      	b.n	8002b96 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c6a:	8803      	ldrh	r3, [r0, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c82:	6822      	ldr	r2, [r4, #0]
 8002c84:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002c88:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8002c8c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002c90:	3302      	adds	r3, #2
 8002c92:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002c96:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002c9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c9e:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002ca0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ca2:	4413      	add	r3, r2
 8002ca4:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f003 fb9e 	bl	80063ea <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002cae:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f43f af6f 	beq.w	8002b96 <PCD_EP_ISR_Handler+0x6>
 8002cb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f47f af6b 	bne.w	8002b96 <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002cc0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002cc4:	6822      	ldr	r2, [r4, #0]
 8002cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cca:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002cd4:	e75f      	b.n	8002b96 <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cd6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002cda:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002cde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ce2:	3306      	adds	r3, #6
 8002ce4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002ce8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf0:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002cf4:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002cf8:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8002cfc:	f002 fb47 	bl	800538e <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d00:	6822      	ldr	r2, [r4, #0]
 8002d02:	8813      	ldrh	r3, [r2, #0]
 8002d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d08:	051b      	lsls	r3, r3, #20
 8002d0a:	0d1b      	lsrs	r3, r3, #20
 8002d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d10:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002d12:	4620      	mov	r0, r4
 8002d14:	f003 fb55 	bl	80063c2 <HAL_PCD_SetupStageCallback>
 8002d18:	e73d      	b.n	8002b96 <PCD_EP_ISR_Handler+0x6>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d1a:	2a3e      	cmp	r2, #62	; 0x3e
 8002d1c:	d809      	bhi.n	8002d32 <PCD_EP_ISR_Handler+0x1a2>
 8002d1e:	0851      	lsrs	r1, r2, #1
 8002d20:	f012 0f01 	tst.w	r2, #1
 8002d24:	d000      	beq.n	8002d28 <PCD_EP_ISR_Handler+0x198>
 8002d26:	3101      	adds	r1, #1
 8002d28:	0289      	lsls	r1, r1, #10
 8002d2a:	b289      	uxth	r1, r1
 8002d2c:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8002d30:	e78c      	b.n	8002c4c <PCD_EP_ISR_Handler+0xbc>
 8002d32:	0951      	lsrs	r1, r2, #5
 8002d34:	f012 0f1f 	tst.w	r2, #31
 8002d38:	d100      	bne.n	8002d3c <PCD_EP_ISR_Handler+0x1ac>
 8002d3a:	3901      	subs	r1, #1
 8002d3c:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8002d40:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002d44:	b292      	uxth	r2, r2
 8002d46:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002d4a:	e77f      	b.n	8002c4c <PCD_EP_ISR_Handler+0xbc>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d4c:	f830 6025 	ldrh.w	r6, [r0, r5, lsl #2]
 8002d50:	b2b6      	uxth	r6, r6
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d52:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8002d56:	d149      	bne.n	8002dec <PCD_EP_ISR_Handler+0x25c>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002d58:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002d5c:	f43f af1b 	beq.w	8002b96 <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 8002d60:	1c68      	adds	r0, r5, #1
 8002d62:	0082      	lsls	r2, r0, #2
 8002d64:	1813      	adds	r3, r2, r0
 8002d66:	00d9      	lsls	r1, r3, #3
 8002d68:	4421      	add	r1, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d6a:	6827      	ldr	r7, [r4, #0]
 8002d6c:	f837 3025 	ldrh.w	r3, [r7, r5, lsl #2]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f827 3025 	strh.w	r3, [r7, r5, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8002d88:	78cb      	ldrb	r3, [r1, #3]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	f000 80e7 	beq.w	8002f5e <PCD_EP_ISR_Handler+0x3ce>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d90:	6820      	ldr	r0, [r4, #0]
 8002d92:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002d96:	1c6a      	adds	r2, r5, #1
 8002d98:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d9c:	00d6      	lsls	r6, r2, #3
 8002d9e:	5da2      	ldrb	r2, [r4, r6]
 8002da0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002da4:	3302      	adds	r3, #2
 8002da6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002daa:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (ep->xfer_len > TxByteNbre)
 8002db2:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8002db6:	00f2      	lsls	r2, r6, #3
 8002db8:	4616      	mov	r6, r2
 8002dba:	4422      	add	r2, r4
 8002dbc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	f240 80d6 	bls.w	8002f70 <PCD_EP_ISR_Handler+0x3e0>
            ep->xfer_len -= TxByteNbre;
 8002dc4:	4426      	add	r6, r4
 8002dc6:	1ad2      	subs	r2, r2, r3
 8002dc8:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8002dca:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8002dce:	00f2      	lsls	r2, r6, #3
 8002dd0:	4422      	add	r2, r4
 8002dd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dd4:	2a00      	cmp	r2, #0
 8002dd6:	f040 80d2 	bne.w	8002f7e <PCD_EP_ISR_Handler+0x3ee>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dda:	3501      	adds	r5, #1
 8002ddc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002de0:	00eb      	lsls	r3, r5, #3
 8002de2:	5ce1      	ldrb	r1, [r4, r3]
 8002de4:	4620      	mov	r0, r4
 8002de6:	f003 fb00 	bl	80063ea <HAL_PCD_DataInStageCallback>
 8002dea:	e6d4      	b.n	8002b96 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002dec:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8002df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df4:	051b      	lsls	r3, r3, #20
 8002df6:	0d1b      	lsrs	r3, r3, #20
 8002df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dfc:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8002e00:	00ab      	lsls	r3, r5, #2
 8002e02:	195a      	adds	r2, r3, r5
 8002e04:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8002e08:	4642      	mov	r2, r8
 8002e0a:	f508 78b4 	add.w	r8, r8, #360	; 0x168
 8002e0e:	44a0      	add	r8, r4
        if (ep->doublebuffer == 0U)
 8002e10:	4422      	add	r2, r4
 8002e12:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d13f      	bne.n	8002e9a <PCD_EP_ISR_Handler+0x30a>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e1a:	6820      	ldr	r0, [r4, #0]
 8002e1c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002e20:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002e24:	00ca      	lsls	r2, r1, #3
 8002e26:	4611      	mov	r1, r2
 8002e28:	4422      	add	r2, r4
 8002e2a:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8002e2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e32:	3306      	adds	r3, #6
 8002e34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002e38:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8002e3c:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8002e40:	bb17      	cbnz	r7, 8002e88 <PCD_EP_ISR_Handler+0x2f8>
        ep->xfer_count += count;
 8002e42:	00aa      	lsls	r2, r5, #2
 8002e44:	442a      	add	r2, r5
 8002e46:	00d3      	lsls	r3, r2, #3
 8002e48:	4423      	add	r3, r4
 8002e4a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002e4e:	443a      	add	r2, r7
 8002e50:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8002e54:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002e58:	443a      	add	r2, r7
 8002e5a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002e5e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002e62:	b13b      	cbz	r3, 8002e74 <PCD_EP_ISR_Handler+0x2e4>
 8002e64:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002e68:	00d3      	lsls	r3, r2, #3
 8002e6a:	4423      	add	r3, r4
 8002e6c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002e70:	429f      	cmp	r7, r3
 8002e72:	d26f      	bcs.n	8002f54 <PCD_EP_ISR_Handler+0x3c4>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e74:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002e78:	00d3      	lsls	r3, r2, #3
 8002e7a:	4423      	add	r3, r4
 8002e7c:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002e80:	4620      	mov	r0, r4
 8002e82:	f003 faa6 	bl	80063d2 <HAL_PCD_DataOutStageCallback>
 8002e86:	e767      	b.n	8002d58 <PCD_EP_ISR_Handler+0x1c8>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002e88:	4421      	add	r1, r4
 8002e8a:	463b      	mov	r3, r7
 8002e8c:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8002e90:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002e94:	f002 fa7b 	bl	800538e <USB_ReadPMA>
 8002e98:	e7d3      	b.n	8002e42 <PCD_EP_ISR_Handler+0x2b2>
          if (ep->type == EP_TYPE_BULK)
 8002e9a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002e9e:	00d3      	lsls	r3, r2, #3
 8002ea0:	4423      	add	r3, r4
 8002ea2:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d034      	beq.n	8002f14 <PCD_EP_ISR_Handler+0x384>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002eaa:	6821      	ldr	r1, [r4, #0]
 8002eac:	00ab      	lsls	r3, r5, #2
 8002eae:	442b      	add	r3, r5
 8002eb0:	00da      	lsls	r2, r3, #3
 8002eb2:	4422      	add	r2, r4
 8002eb4:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8002eb8:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ece:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ed2:	6820      	ldr	r0, [r4, #0]
 8002ed4:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8002ed8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002edc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002ee0:	d01f      	beq.n	8002f22 <PCD_EP_ISR_Handler+0x392>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ee2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002ee6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002eea:	3302      	adds	r3, #2
 8002eec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002ef0:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8002ef4:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8002ef8:	2f00      	cmp	r7, #0
 8002efa:	d0a2      	beq.n	8002e42 <PCD_EP_ISR_Handler+0x2b2>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002efc:	00ab      	lsls	r3, r5, #2
 8002efe:	442b      	add	r3, r5
 8002f00:	00d9      	lsls	r1, r3, #3
 8002f02:	4421      	add	r1, r4
 8002f04:	463b      	mov	r3, r7
 8002f06:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002f0a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002f0e:	f002 fa3e 	bl	800538e <USB_ReadPMA>
 8002f12:	e796      	b.n	8002e42 <PCD_EP_ISR_Handler+0x2b2>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f14:	4632      	mov	r2, r6
 8002f16:	4641      	mov	r1, r8
 8002f18:	4620      	mov	r0, r4
 8002f1a:	f7ff fbb2 	bl	8002682 <HAL_PCD_EP_DB_Receive>
 8002f1e:	4607      	mov	r7, r0
 8002f20:	e78f      	b.n	8002e42 <PCD_EP_ISR_Handler+0x2b2>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f22:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002f26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f2a:	3306      	adds	r3, #6
 8002f2c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002f30:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8002f34:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8002f38:	2f00      	cmp	r7, #0
 8002f3a:	d082      	beq.n	8002e42 <PCD_EP_ISR_Handler+0x2b2>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f3c:	00ab      	lsls	r3, r5, #2
 8002f3e:	442b      	add	r3, r5
 8002f40:	00d9      	lsls	r1, r3, #3
 8002f42:	4421      	add	r1, r4
 8002f44:	463b      	mov	r3, r7
 8002f46:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002f4a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002f4e:	f002 fa1e 	bl	800538e <USB_ReadPMA>
 8002f52:	e776      	b.n	8002e42 <PCD_EP_ISR_Handler+0x2b2>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002f54:	4641      	mov	r1, r8
 8002f56:	6820      	ldr	r0, [r4, #0]
 8002f58:	f001 fe89 	bl	8004c6e <USB_EPStartXfer>
 8002f5c:	e6fc      	b.n	8002d58 <PCD_EP_ISR_Handler+0x1c8>
        if ((ep->type != EP_TYPE_BULK) ||
 8002f5e:	f416 7f80 	tst.w	r6, #256	; 0x100
 8002f62:	f43f af15 	beq.w	8002d90 <PCD_EP_ISR_Handler+0x200>
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002f66:	4632      	mov	r2, r6
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f7ff fcb2 	bl	80028d2 <HAL_PCD_EP_DB_Transmit>
 8002f6e:	e612      	b.n	8002b96 <PCD_EP_ISR_Handler+0x6>
            ep->xfer_len = 0U;
 8002f70:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8002f74:	00f2      	lsls	r2, r6, #3
 8002f76:	4422      	add	r2, r4
 8002f78:	2600      	movs	r6, #0
 8002f7a:	6416      	str	r6, [r2, #64]	; 0x40
 8002f7c:	e725      	b.n	8002dca <PCD_EP_ISR_Handler+0x23a>
            ep->xfer_buff += TxByteNbre;
 8002f7e:	00ae      	lsls	r6, r5, #2
 8002f80:	1977      	adds	r7, r6, r5
 8002f82:	00fa      	lsls	r2, r7, #3
 8002f84:	4422      	add	r2, r4
 8002f86:	6bd7      	ldr	r7, [r2, #60]	; 0x3c
 8002f88:	441f      	add	r7, r3
 8002f8a:	63d7      	str	r7, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8002f8c:	6c55      	ldr	r5, [r2, #68]	; 0x44
 8002f8e:	442b      	add	r3, r5
 8002f90:	6453      	str	r3, [r2, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f92:	f001 fe6c 	bl	8004c6e <USB_EPStartXfer>
 8002f96:	e5fe      	b.n	8002b96 <PCD_EP_ISR_Handler+0x6>
}
 8002f98:	2000      	movs	r0, #0
 8002f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002f9e <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002f9e:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_PCD_SetAddress+0x24>
{
 8002fa6:	b510      	push	{r4, lr}
 8002fa8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002faa:	2301      	movs	r3, #1
 8002fac:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002fb0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fb4:	6800      	ldr	r0, [r0, #0]
 8002fb6:	f001 fe36 	bl	8004c26 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002fc0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002fc2:	2002      	movs	r0, #2
}
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_PCD_IRQHandler>:
{
 8002fc6:	b510      	push	{r4, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002fcc:	6800      	ldr	r0, [r0, #0]
 8002fce:	f001 fe34 	bl	8004c3a <USB_ReadInterrupts>
 8002fd2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8002fd6:	d147      	bne.n	8003068 <HAL_PCD_IRQHandler+0xa2>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002fd8:	6820      	ldr	r0, [r4, #0]
 8002fda:	f001 fe2e 	bl	8004c3a <USB_ReadInterrupts>
 8002fde:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8002fe2:	d145      	bne.n	8003070 <HAL_PCD_IRQHandler+0xaa>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002fe4:	6820      	ldr	r0, [r4, #0]
 8002fe6:	f001 fe28 	bl	8004c3a <USB_ReadInterrupts>
 8002fea:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8002fee:	d008      	beq.n	8003002 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ff0:	6822      	ldr	r2, [r4, #0]
 8002ff2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003002:	6820      	ldr	r0, [r4, #0]
 8003004:	f001 fe19 	bl	8004c3a <USB_ReadInterrupts>
 8003008:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800300c:	d008      	beq.n	8003020 <HAL_PCD_IRQHandler+0x5a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800300e:	6822      	ldr	r2, [r4, #0]
 8003010:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003014:	b29b      	uxth	r3, r3
 8003016:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800301a:	b29b      	uxth	r3, r3
 800301c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003020:	6820      	ldr	r0, [r4, #0]
 8003022:	f001 fe0a 	bl	8004c3a <USB_ReadInterrupts>
 8003026:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800302a:	d132      	bne.n	8003092 <HAL_PCD_IRQHandler+0xcc>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800302c:	6820      	ldr	r0, [r4, #0]
 800302e:	f001 fe04 	bl	8004c3a <USB_ReadInterrupts>
 8003032:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8003036:	d177      	bne.n	8003128 <HAL_PCD_IRQHandler+0x162>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003038:	6820      	ldr	r0, [r4, #0]
 800303a:	f001 fdfe 	bl	8004c3a <USB_ReadInterrupts>
 800303e:	f410 7f00 	tst.w	r0, #512	; 0x200
 8003042:	f040 809a 	bne.w	800317a <HAL_PCD_IRQHandler+0x1b4>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003046:	6820      	ldr	r0, [r4, #0]
 8003048:	f001 fdf7 	bl	8004c3a <USB_ReadInterrupts>
 800304c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003050:	d008      	beq.n	8003064 <HAL_PCD_IRQHandler+0x9e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003052:	6822      	ldr	r2, [r4, #0]
 8003054:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003058:	b29b      	uxth	r3, r3
 800305a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800305e:	b29b      	uxth	r3, r3
 8003060:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8003064:	b004      	add	sp, #16
 8003066:	bd10      	pop	{r4, pc}
    (void)PCD_EP_ISR_Handler(hpcd);
 8003068:	4620      	mov	r0, r4
 800306a:	f7ff fd91 	bl	8002b90 <PCD_EP_ISR_Handler>
 800306e:	e7b3      	b.n	8002fd8 <HAL_PCD_IRQHandler+0x12>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003070:	6822      	ldr	r2, [r4, #0]
 8003072:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003076:	b29b      	uxth	r3, r3
 8003078:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800307c:	b29b      	uxth	r3, r3
 800307e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003082:	4620      	mov	r0, r4
 8003084:	f003 f9c2 	bl	800640c <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003088:	2100      	movs	r1, #0
 800308a:	4620      	mov	r0, r4
 800308c:	f7ff ff87 	bl	8002f9e <HAL_PCD_SetAddress>
 8003090:	e7a8      	b.n	8002fe4 <HAL_PCD_IRQHandler+0x1e>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003092:	6822      	ldr	r2, [r4, #0]
 8003094:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003098:	b29b      	uxth	r3, r3
 800309a:	f023 0304 	bic.w	r3, r3, #4
 800309e:	b29b      	uxth	r3, r3
 80030a0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80030a4:	6822      	ldr	r2, [r4, #0]
 80030a6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f023 0308 	bic.w	r3, r3, #8
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80030b6:	4620      	mov	r0, r4
 80030b8:	f003 f9ca 	bl	8006450 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80030bc:	6822      	ldr	r2, [r4, #0]
 80030be:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 80030ce:	e7ad      	b.n	800302c <HAL_PCD_IRQHandler+0x66>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80030d0:	6822      	ldr	r2, [r4, #0]
 80030d2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80030d6:	aa04      	add	r2, sp, #16
 80030d8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80030dc:	f822 1c10 	strh.w	r1, [r2, #-16]
    for (i = 0U; i < 8U; i++)
 80030e0:	3301      	adds	r3, #1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b07      	cmp	r3, #7
 80030e6:	d9f3      	bls.n	80030d0 <HAL_PCD_IRQHandler+0x10a>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80030e8:	6822      	ldr	r2, [r4, #0]
 80030ea:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80030f6:	6822      	ldr	r2, [r4, #0]
 80030f8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	f023 0301 	bic.w	r3, r3, #1
 8003102:	b29b      	uxth	r3, r3
 8003104:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800310e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003112:	d0f9      	beq.n	8003108 <HAL_PCD_IRQHandler+0x142>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003114:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003118:	b292      	uxth	r2, r2
 800311a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311e:	b292      	uxth	r2, r2
 8003120:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    for (i = 0U; i < 8U; i++)
 8003124:	2300      	movs	r3, #0
 8003126:	e00b      	b.n	8003140 <HAL_PCD_IRQHandler+0x17a>
    for (i = 0U; i < 8U; i++)
 8003128:	2300      	movs	r3, #0
 800312a:	e7db      	b.n	80030e4 <HAL_PCD_IRQHandler+0x11e>
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800312c:	6822      	ldr	r2, [r4, #0]
 800312e:	a904      	add	r1, sp, #16
 8003130:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8003134:	f831 1c10 	ldrh.w	r1, [r1, #-16]
 8003138:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    for (i = 0U; i < 8U; i++)
 800313c:	3301      	adds	r3, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b07      	cmp	r3, #7
 8003142:	d9f3      	bls.n	800312c <HAL_PCD_IRQHandler+0x166>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003144:	6822      	ldr	r2, [r4, #0]
 8003146:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800314a:	f043 0308 	orr.w	r3, r3, #8
 800314e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003152:	6822      	ldr	r2, [r4, #0]
 8003154:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003158:	b29b      	uxth	r3, r3
 800315a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800315e:	b29b      	uxth	r3, r3
 8003160:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003164:	6822      	ldr	r2, [r4, #0]
 8003166:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800316a:	f043 0304 	orr.w	r3, r3, #4
 800316e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8003172:	4620      	mov	r0, r4
 8003174:	f003 f95b 	bl	800642e <HAL_PCD_SuspendCallback>
 8003178:	e75e      	b.n	8003038 <HAL_PCD_IRQHandler+0x72>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800317a:	6822      	ldr	r2, [r4, #0]
 800317c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003180:	b29b      	uxth	r3, r3
 8003182:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003186:	b29b      	uxth	r3, r3
 8003188:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800318c:	4620      	mov	r0, r4
 800318e:	f003 f937 	bl	8006400 <HAL_PCD_SOFCallback>
 8003192:	e758      	b.n	8003046 <HAL_PCD_IRQHandler+0x80>

08003194 <HAL_PCD_EP_Open>:
{
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8003196:	f011 0f80 	tst.w	r1, #128	; 0x80
 800319a:	d126      	bne.n	80031ea <HAL_PCD_EP_Open+0x56>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800319c:	f001 0507 	and.w	r5, r1, #7
 80031a0:	00ae      	lsls	r6, r5, #2
 80031a2:	1977      	adds	r7, r6, r5
 80031a4:	00fc      	lsls	r4, r7, #3
 80031a6:	4627      	mov	r7, r4
 80031a8:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 80031ac:	4404      	add	r4, r0
    ep->is_in = 0U;
 80031ae:	4407      	add	r7, r0
 80031b0:	2500      	movs	r5, #0
 80031b2:	f887 5169 	strb.w	r5, [r7, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b6:	f001 0107 	and.w	r1, r1, #7
 80031ba:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 80031bc:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 80031be:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in != 0U)
 80031c0:	7862      	ldrb	r2, [r4, #1]
 80031c2:	b102      	cbz	r2, 80031c6 <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 80031c4:	81e1      	strh	r1, [r4, #14]
  if (ep_type == EP_TYPE_BULK)
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d019      	beq.n	80031fe <HAL_PCD_EP_Open+0x6a>
  __HAL_LOCK(hpcd);
 80031ca:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d018      	beq.n	8003204 <HAL_PCD_EP_Open+0x70>
 80031d2:	4605      	mov	r5, r0
 80031d4:	2301      	movs	r3, #1
 80031d6:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031da:	4621      	mov	r1, r4
 80031dc:	6800      	ldr	r0, [r0, #0]
 80031de:	f001 fa2a 	bl	8004636 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031e2:	2000      	movs	r0, #0
 80031e4:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 80031e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ea:	f001 0507 	and.w	r5, r1, #7
 80031ee:	1c6e      	adds	r6, r5, #1
 80031f0:	00b5      	lsls	r5, r6, #2
 80031f2:	19af      	adds	r7, r5, r6
 80031f4:	00fc      	lsls	r4, r7, #3
 80031f6:	4404      	add	r4, r0
    ep->is_in = 1U;
 80031f8:	2501      	movs	r5, #1
 80031fa:	7065      	strb	r5, [r4, #1]
 80031fc:	e7db      	b.n	80031b6 <HAL_PCD_EP_Open+0x22>
    ep->data_pid_start = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	7123      	strb	r3, [r4, #4]
 8003202:	e7e2      	b.n	80031ca <HAL_PCD_EP_Open+0x36>
  __HAL_LOCK(hpcd);
 8003204:	2002      	movs	r0, #2
 8003206:	e7ef      	b.n	80031e8 <HAL_PCD_EP_Open+0x54>

08003208 <HAL_PCD_EP_Close>:
{
 8003208:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 800320a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800320e:	d120      	bne.n	8003252 <HAL_PCD_EP_Close+0x4a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003210:	f001 0407 	and.w	r4, r1, #7
 8003214:	00a2      	lsls	r2, r4, #2
 8003216:	1915      	adds	r5, r2, r4
 8003218:	00eb      	lsls	r3, r5, #3
 800321a:	461d      	mov	r5, r3
 800321c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003220:	4403      	add	r3, r0
    ep->is_in = 0U;
 8003222:	462c      	mov	r4, r5
 8003224:	4404      	add	r4, r0
 8003226:	2200      	movs	r2, #0
 8003228:	f884 2169 	strb.w	r2, [r4, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 800322c:	f001 0107 	and.w	r1, r1, #7
 8003230:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd);
 8003232:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8003236:	2a01      	cmp	r2, #1
 8003238:	d015      	beq.n	8003266 <HAL_PCD_EP_Close+0x5e>
 800323a:	4604      	mov	r4, r0
 800323c:	2201      	movs	r2, #1
 800323e:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003242:	4619      	mov	r1, r3
 8003244:	6800      	ldr	r0, [r0, #0]
 8003246:	f001 fb8e 	bl	8004966 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800324a:	2000      	movs	r0, #0
 800324c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003250:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003252:	f001 0207 	and.w	r2, r1, #7
 8003256:	1c54      	adds	r4, r2, #1
 8003258:	00a2      	lsls	r2, r4, #2
 800325a:	1915      	adds	r5, r2, r4
 800325c:	00eb      	lsls	r3, r5, #3
 800325e:	4403      	add	r3, r0
    ep->is_in = 1U;
 8003260:	2201      	movs	r2, #1
 8003262:	705a      	strb	r2, [r3, #1]
 8003264:	e7e2      	b.n	800322c <HAL_PCD_EP_Close+0x24>
  __HAL_LOCK(hpcd);
 8003266:	2002      	movs	r0, #2
 8003268:	e7f2      	b.n	8003250 <HAL_PCD_EP_Close+0x48>

0800326a <HAL_PCD_EP_Receive>:
{
 800326a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326c:	f001 0507 	and.w	r5, r1, #7
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003270:	00ae      	lsls	r6, r5, #2
 8003272:	1971      	adds	r1, r6, r5
 8003274:	00cc      	lsls	r4, r1, #3
 8003276:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 800327a:	1901      	adds	r1, r0, r4
  ep->xfer_buff = pBuf;
 800327c:	1977      	adds	r7, r6, r5
 800327e:	00fc      	lsls	r4, r7, #3
 8003280:	4404      	add	r4, r0
 8003282:	f8c4 217c 	str.w	r2, [r4, #380]	; 0x17c
  ep->xfer_len = len;
 8003286:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
  ep->xfer_count = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
  ep->is_in = 0U;
 8003290:	f884 3169 	strb.w	r3, [r4, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8003294:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003298:	b125      	cbz	r5, 80032a4 <HAL_PCD_EP_Receive+0x3a>
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800329a:	6800      	ldr	r0, [r0, #0]
 800329c:	f001 fce7 	bl	8004c6e <USB_EPStartXfer>
}
 80032a0:	2000      	movs	r0, #0
 80032a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80032a4:	6800      	ldr	r0, [r0, #0]
 80032a6:	f001 fce2 	bl	8004c6e <USB_EPStartXfer>
 80032aa:	e7f9      	b.n	80032a0 <HAL_PCD_EP_Receive+0x36>

080032ac <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032ac:	f001 0107 	and.w	r1, r1, #7
 80032b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80032b4:	00cb      	lsls	r3, r1, #3
 80032b6:	4418      	add	r0, r3
}
 80032b8:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 80032bc:	4770      	bx	lr

080032be <HAL_PCD_EP_Transmit>:
{
 80032be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c0:	f001 0607 	and.w	r6, r1, #7
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c4:	1c77      	adds	r7, r6, #1
 80032c6:	00bd      	lsls	r5, r7, #2
 80032c8:	19ec      	adds	r4, r5, r7
 80032ca:	00e1      	lsls	r1, r4, #3
 80032cc:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80032ce:	ea4f 0c86 	mov.w	ip, r6, lsl #2
 80032d2:	44b4      	add	ip, r6
 80032d4:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 80032d8:	4404      	add	r4, r0
 80032da:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 80032dc:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 80032de:	2201      	movs	r2, #1
 80032e0:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  ep->xfer_len_db = len;
 80032e4:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	6463      	str	r3, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80032ea:	19ec      	adds	r4, r5, r7
 80032ec:	00e3      	lsls	r3, r4, #3
 80032ee:	461c      	mov	r4, r3
 80032f0:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f2:	5506      	strb	r6, [r0, r4]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032f4:	b126      	cbz	r6, 8003300 <HAL_PCD_EP_Transmit+0x42>
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032f6:	6800      	ldr	r0, [r0, #0]
 80032f8:	f001 fcb9 	bl	8004c6e <USB_EPStartXfer>
}
 80032fc:	2000      	movs	r0, #0
 80032fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003300:	6800      	ldr	r0, [r0, #0]
 8003302:	f001 fcb4 	bl	8004c6e <USB_EPStartXfer>
 8003306:	e7f9      	b.n	80032fc <HAL_PCD_EP_Transmit+0x3e>

08003308 <HAL_PCD_EP_SetStall>:
{
 8003308:	b538      	push	{r3, r4, r5, lr}
 800330a:	f001 0507 	and.w	r5, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800330e:	6843      	ldr	r3, [r0, #4]
 8003310:	429d      	cmp	r5, r3
 8003312:	d830      	bhi.n	8003376 <HAL_PCD_EP_SetStall+0x6e>
  if ((0x80U & ep_addr) == 0x80U)
 8003314:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003318:	d11f      	bne.n	800335a <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 800331a:	008a      	lsls	r2, r1, #2
 800331c:	1854      	adds	r4, r2, r1
 800331e:	00e3      	lsls	r3, r4, #3
 8003320:	461c      	mov	r4, r3
 8003322:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003326:	4403      	add	r3, r0
    ep->is_in = 0U;
 8003328:	4622      	mov	r2, r4
 800332a:	4402      	add	r2, r0
 800332c:	2100      	movs	r1, #0
 800332e:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
  ep->is_stall = 1U;
 8003332:	2201      	movs	r2, #1
 8003334:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003336:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8003338:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 800333c:	2a01      	cmp	r2, #1
 800333e:	d01c      	beq.n	800337a <HAL_PCD_EP_SetStall+0x72>
 8003340:	4604      	mov	r4, r0
 8003342:	2201      	movs	r2, #1
 8003344:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003348:	4619      	mov	r1, r3
 800334a:	6800      	ldr	r0, [r0, #0]
 800334c:	f001 fbf5 	bl	8004b3a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003350:	b15d      	cbz	r5, 800336a <HAL_PCD_EP_SetStall+0x62>
  __HAL_UNLOCK(hpcd);
 8003352:	2000      	movs	r0, #0
 8003354:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
  return HAL_OK;
 8003358:	e00e      	b.n	8003378 <HAL_PCD_EP_SetStall+0x70>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335a:	1c6c      	adds	r4, r5, #1
 800335c:	00a2      	lsls	r2, r4, #2
 800335e:	1911      	adds	r1, r2, r4
 8003360:	00cb      	lsls	r3, r1, #3
 8003362:	4403      	add	r3, r0
    ep->is_in = 1U;
 8003364:	2201      	movs	r2, #1
 8003366:	705a      	strb	r2, [r3, #1]
 8003368:	e7e3      	b.n	8003332 <HAL_PCD_EP_SetStall+0x2a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800336a:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800336e:	6820      	ldr	r0, [r4, #0]
 8003370:	f001 fc66 	bl	8004c40 <USB_EP0_OutStart>
 8003374:	e7ed      	b.n	8003352 <HAL_PCD_EP_SetStall+0x4a>
    return HAL_ERROR;
 8003376:	2001      	movs	r0, #1
}
 8003378:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800337a:	2002      	movs	r0, #2
 800337c:	e7fc      	b.n	8003378 <HAL_PCD_EP_SetStall+0x70>

0800337e <HAL_PCD_EP_ClrStall>:
{
 800337e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003380:	f001 020f 	and.w	r2, r1, #15
 8003384:	6843      	ldr	r3, [r0, #4]
 8003386:	429a      	cmp	r2, r3
 8003388:	d82f      	bhi.n	80033ea <HAL_PCD_EP_ClrStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 800338a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800338e:	d122      	bne.n	80033d6 <HAL_PCD_EP_ClrStall+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003390:	f001 0407 	and.w	r4, r1, #7
 8003394:	00a3      	lsls	r3, r4, #2
 8003396:	191d      	adds	r5, r3, r4
 8003398:	00ea      	lsls	r2, r5, #3
 800339a:	4615      	mov	r5, r2
 800339c:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 80033a0:	4402      	add	r2, r0
    ep->is_in = 0U;
 80033a2:	462c      	mov	r4, r5
 80033a4:	4404      	add	r4, r0
 80033a6:	2300      	movs	r3, #0
 80033a8:	f884 3169 	strb.w	r3, [r4, #361]	; 0x169
  ep->is_stall = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	7093      	strb	r3, [r2, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033b0:	f001 0307 	and.w	r3, r1, #7
 80033b4:	7013      	strb	r3, [r2, #0]
  __HAL_LOCK(hpcd);
 80033b6:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d017      	beq.n	80033ee <HAL_PCD_EP_ClrStall+0x70>
 80033be:	4604      	mov	r4, r0
 80033c0:	2301      	movs	r3, #1
 80033c2:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033c6:	4611      	mov	r1, r2
 80033c8:	6800      	ldr	r0, [r0, #0]
 80033ca:	f001 fbdb 	bl	8004b84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033ce:	2000      	movs	r0, #0
 80033d0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
  return HAL_OK;
 80033d4:	e00a      	b.n	80033ec <HAL_PCD_EP_ClrStall+0x6e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d6:	f001 0307 	and.w	r3, r1, #7
 80033da:	1c5c      	adds	r4, r3, #1
 80033dc:	00a3      	lsls	r3, r4, #2
 80033de:	191d      	adds	r5, r3, r4
 80033e0:	00ea      	lsls	r2, r5, #3
 80033e2:	4402      	add	r2, r0
    ep->is_in = 1U;
 80033e4:	2301      	movs	r3, #1
 80033e6:	7053      	strb	r3, [r2, #1]
 80033e8:	e7e0      	b.n	80033ac <HAL_PCD_EP_ClrStall+0x2e>
    return HAL_ERROR;
 80033ea:	2001      	movs	r0, #1
}
 80033ec:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80033ee:	2002      	movs	r0, #2
 80033f0:	e7fc      	b.n	80033ec <HAL_PCD_EP_ClrStall+0x6e>

080033f2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80033f2:	b410      	push	{r4}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80033f4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80033f8:	d00f      	beq.n	800341a <HAL_PCDEx_PMAConfig+0x28>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033fa:	f001 0107 	and.w	r1, r1, #7
 80033fe:	3101      	adds	r1, #1
 8003400:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003404:	00cc      	lsls	r4, r1, #3
 8003406:	4420      	add	r0, r4
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003408:	b172      	cbz	r2, 8003428 <HAL_PCDEx_PMAConfig+0x36>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800340a:	2201      	movs	r2, #1
 800340c:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800340e:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003410:	0c1b      	lsrs	r3, r3, #16
 8003412:	8143      	strh	r3, [r0, #10]
  }

  return HAL_OK;
}
 8003414:	2000      	movs	r0, #0
 8003416:	bc10      	pop	{r4}
 8003418:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800341a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800341e:	00cc      	lsls	r4, r1, #3
 8003420:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 8003424:	4420      	add	r0, r4
 8003426:	e7ef      	b.n	8003408 <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 0U;
 8003428:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 800342a:	80c3      	strh	r3, [r0, #6]
 800342c:	e7f2      	b.n	8003414 <HAL_PCDEx_PMAConfig+0x22>

0800342e <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800342e:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003430:	f240 0304 	movw	r3, #4
 8003434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 800343e:	f2c1 0262 	movt	r2, #4194	; 0x1062
 8003442:	fba2 2303 	umull	r2, r3, r2, r3
 8003446:	0a5b      	lsrs	r3, r3, #9
 8003448:	fb00 f003 	mul.w	r0, r0, r3
 800344c:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 800344e:	bf00      	nop
  }
  while (Delay --);
 8003450:	9b01      	ldr	r3, [sp, #4]
 8003452:	1e5a      	subs	r2, r3, #1
 8003454:	9201      	str	r2, [sp, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f9      	bne.n	800344e <RCC_Delay+0x20>
}
 800345a:	b002      	add	sp, #8
 800345c:	4770      	bx	lr

0800345e <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800345e:	2800      	cmp	r0, #0
 8003460:	f000 826b 	beq.w	800393a <HAL_RCC_OscConfig+0x4dc>
{
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346a:	6803      	ldr	r3, [r0, #0]
 800346c:	f013 0f01 	tst.w	r3, #1
 8003470:	d038      	beq.n	80034e4 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003476:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b04      	cmp	r3, #4
 8003482:	d023      	beq.n	80034cc <HAL_RCC_OscConfig+0x6e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003488:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b08      	cmp	r3, #8
 8003494:	d012      	beq.n	80034bc <HAL_RCC_OscConfig+0x5e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003496:	6863      	ldr	r3, [r4, #4]
 8003498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349c:	d054      	beq.n	8003548 <HAL_RCC_OscConfig+0xea>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d16e      	bne.n	8003580 <HAL_RCC_OscConfig+0x122>
 80034a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e04d      	b.n	8003558 <HAL_RCC_OscConfig+0xfa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80034ca:	d0e4      	beq.n	8003496 <HAL_RCC_OscConfig+0x38>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80034da:	d003      	beq.n	80034e4 <HAL_RCC_OscConfig+0x86>
 80034dc:	6863      	ldr	r3, [r4, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 822d 	beq.w	800393e <HAL_RCC_OscConfig+0x4e0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	f013 0f02 	tst.w	r3, #2
 80034ea:	f000 8098 	beq.w	800361e <HAL_RCC_OscConfig+0x1c0>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f013 0f0c 	tst.w	r3, #12
 80034fc:	d077      	beq.n	80035ee <HAL_RCC_OscConfig+0x190>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003502:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 030c 	and.w	r3, r3, #12
 800350c:	2b08      	cmp	r3, #8
 800350e:	d066      	beq.n	80035de <HAL_RCC_OscConfig+0x180>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003510:	6923      	ldr	r3, [r4, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 80ae 	beq.w	8003674 <HAL_RCC_OscConfig+0x216>
        __HAL_RCC_HSI_ENABLE();
 8003518:	2300      	movs	r3, #0
 800351a:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003522:	f7fe f91a 	bl	800175a <HAL_GetTick>
 8003526:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800352c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f013 0f02 	tst.w	r3, #2
 8003536:	f040 8091 	bne.w	800365c <HAL_RCC_OscConfig+0x1fe>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800353a:	f7fe f90e 	bl	800175a <HAL_GetTick>
 800353e:	1b40      	subs	r0, r0, r5
 8003540:	2802      	cmp	r0, #2
 8003542:	d9f1      	bls.n	8003528 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8003544:	2003      	movs	r0, #3
 8003546:	e1fd      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800354c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003556:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003558:	6863      	ldr	r3, [r4, #4]
 800355a:	b373      	cbz	r3, 80035ba <HAL_RCC_OscConfig+0x15c>
        tickstart = HAL_GetTick();
 800355c:	f7fe f8fd 	bl	800175a <HAL_GetTick>
 8003560:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003566:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003570:	d1b8      	bne.n	80034e4 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003572:	f7fe f8f2 	bl	800175a <HAL_GetTick>
 8003576:	1b40      	subs	r0, r0, r5
 8003578:	2864      	cmp	r0, #100	; 0x64
 800357a:	d9f2      	bls.n	8003562 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 800357c:	2003      	movs	r0, #3
 800357e:	e1e1      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003584:	d00c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x142>
 8003586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800358a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	e7db      	b.n	8003558 <HAL_RCC_OscConfig+0xfa>
 80035a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	e7ce      	b.n	8003558 <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 80035ba:	f7fe f8ce 	bl	800175a <HAL_GetTick>
 80035be:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80035ce:	d089      	beq.n	80034e4 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe f8c3 	bl	800175a <HAL_GetTick>
 80035d4:	1b40      	subs	r0, r0, r5
 80035d6:	2864      	cmp	r0, #100	; 0x64
 80035d8:	d9f2      	bls.n	80035c0 <HAL_RCC_OscConfig+0x162>
            return HAL_TIMEOUT;
 80035da:	2003      	movs	r0, #3
 80035dc:	e1b2      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80035ec:	d190      	bne.n	8003510 <HAL_RCC_OscConfig+0xb2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f013 0f02 	tst.w	r3, #2
 80035fc:	d004      	beq.n	8003608 <HAL_RCC_OscConfig+0x1aa>
 80035fe:	6923      	ldr	r3, [r4, #16]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d001      	beq.n	8003608 <HAL_RCC_OscConfig+0x1aa>
        return HAL_ERROR;
 8003604:	2001      	movs	r0, #1
 8003606:	e19d      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003608:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800360c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003610:	6813      	ldr	r3, [r2, #0]
 8003612:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003616:	6961      	ldr	r1, [r4, #20]
 8003618:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800361c:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	f013 0f08 	tst.w	r3, #8
 8003624:	d040      	beq.n	80036a8 <HAL_RCC_OscConfig+0x24a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003626:	69a3      	ldr	r3, [r4, #24]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d072      	beq.n	8003712 <HAL_RCC_OscConfig+0x2b4>
      __HAL_RCC_LSI_ENABLE();
 800362c:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8003630:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003638:	f7fe f88f 	bl	800175a <HAL_GetTick>
 800363c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003642:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	f013 0f02 	tst.w	r3, #2
 800364c:	d129      	bne.n	80036a2 <HAL_RCC_OscConfig+0x244>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800364e:	f7fe f884 	bl	800175a <HAL_GetTick>
 8003652:	1b40      	subs	r0, r0, r5
 8003654:	2802      	cmp	r0, #2
 8003656:	d9f2      	bls.n	800363e <HAL_RCC_OscConfig+0x1e0>
          return HAL_TIMEOUT;
 8003658:	2003      	movs	r0, #3
 800365a:	e173      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003660:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003664:	6813      	ldr	r3, [r2, #0]
 8003666:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800366a:	6961      	ldr	r1, [r4, #20]
 800366c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	e7d4      	b.n	800361e <HAL_RCC_OscConfig+0x1c0>
        __HAL_RCC_HSI_DISABLE();
 8003674:	2300      	movs	r3, #0
 8003676:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800367e:	f7fe f86c 	bl	800175a <HAL_GetTick>
 8003682:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003688:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f013 0f02 	tst.w	r3, #2
 8003692:	d0c4      	beq.n	800361e <HAL_RCC_OscConfig+0x1c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003694:	f7fe f861 	bl	800175a <HAL_GetTick>
 8003698:	1b40      	subs	r0, r0, r5
 800369a:	2802      	cmp	r0, #2
 800369c:	d9f2      	bls.n	8003684 <HAL_RCC_OscConfig+0x226>
            return HAL_TIMEOUT;
 800369e:	2003      	movs	r0, #3
 80036a0:	e150      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
      RCC_Delay(1);
 80036a2:	2001      	movs	r0, #1
 80036a4:	f7ff fec3 	bl	800342e <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	f013 0f04 	tst.w	r3, #4
 80036ae:	f000 80b3 	beq.w	8003818 <HAL_RCC_OscConfig+0x3ba>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80036c0:	d13f      	bne.n	8003742 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80036ca:	69da      	ldr	r2, [r3, #28]
 80036cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80036d0:	61da      	str	r2, [r3, #28]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80036dc:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036de:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80036e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80036ec:	d02b      	beq.n	8003746 <HAL_RCC_OscConfig+0x2e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ee:	68e3      	ldr	r3, [r4, #12]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d042      	beq.n	800377a <HAL_RCC_OscConfig+0x31c>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d15e      	bne.n	80037b6 <HAL_RCC_OscConfig+0x358>
 80036f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003700:	6a1a      	ldr	r2, [r3, #32]
 8003702:	f022 0201 	bic.w	r2, r2, #1
 8003706:	621a      	str	r2, [r3, #32]
 8003708:	6a1a      	ldr	r2, [r3, #32]
 800370a:	f022 0204 	bic.w	r2, r2, #4
 800370e:	621a      	str	r2, [r3, #32]
 8003710:	e03b      	b.n	800378a <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_LSI_DISABLE();
 8003712:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8003716:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800371e:	f7fe f81c 	bl	800175a <HAL_GetTick>
 8003722:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003728:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	f013 0f02 	tst.w	r3, #2
 8003732:	d0b9      	beq.n	80036a8 <HAL_RCC_OscConfig+0x24a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003734:	f7fe f811 	bl	800175a <HAL_GetTick>
 8003738:	1b40      	subs	r0, r0, r5
 800373a:	2802      	cmp	r0, #2
 800373c:	d9f2      	bls.n	8003724 <HAL_RCC_OscConfig+0x2c6>
          return HAL_TIMEOUT;
 800373e:	2003      	movs	r0, #3
 8003740:	e100      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
    FlagStatus       pwrclkchanged = RESET;
 8003742:	2500      	movs	r5, #0
 8003744:	e7cb      	b.n	80036de <HAL_RCC_OscConfig+0x280>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003746:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800374a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003754:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003756:	f7fe f800 	bl	800175a <HAL_GetTick>
 800375a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003760:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f413 7f80 	tst.w	r3, #256	; 0x100
 800376a:	d1c0      	bne.n	80036ee <HAL_RCC_OscConfig+0x290>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376c:	f7fd fff5 	bl	800175a <HAL_GetTick>
 8003770:	1b80      	subs	r0, r0, r6
 8003772:	2864      	cmp	r0, #100	; 0x64
 8003774:	d9f2      	bls.n	800375c <HAL_RCC_OscConfig+0x2fe>
          return HAL_TIMEOUT;
 8003776:	2003      	movs	r0, #3
 8003778:	e0e4      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800377a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800377e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003782:	6a1a      	ldr	r2, [r3, #32]
 8003784:	f042 0201 	orr.w	r2, r2, #1
 8003788:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800378a:	68e3      	ldr	r3, [r4, #12]
 800378c:	b37b      	cbz	r3, 80037ee <HAL_RCC_OscConfig+0x390>
      tickstart = HAL_GetTick();
 800378e:	f7fd ffe4 	bl	800175a <HAL_GetTick>
 8003792:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003798:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f013 0f02 	tst.w	r3, #2
 80037a2:	d138      	bne.n	8003816 <HAL_RCC_OscConfig+0x3b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a4:	f7fd ffd9 	bl	800175a <HAL_GetTick>
 80037a8:	1b80      	subs	r0, r0, r6
 80037aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80037ae:	4298      	cmp	r0, r3
 80037b0:	d9f0      	bls.n	8003794 <HAL_RCC_OscConfig+0x336>
          return HAL_TIMEOUT;
 80037b2:	2003      	movs	r0, #3
 80037b4:	e0c6      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d00c      	beq.n	80037d4 <HAL_RCC_OscConfig+0x376>
 80037ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	621a      	str	r2, [r3, #32]
 80037ca:	6a1a      	ldr	r2, [r3, #32]
 80037cc:	f022 0204 	bic.w	r2, r2, #4
 80037d0:	621a      	str	r2, [r3, #32]
 80037d2:	e7da      	b.n	800378a <HAL_RCC_OscConfig+0x32c>
 80037d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80037dc:	6a1a      	ldr	r2, [r3, #32]
 80037de:	f042 0204 	orr.w	r2, r2, #4
 80037e2:	621a      	str	r2, [r3, #32]
 80037e4:	6a1a      	ldr	r2, [r3, #32]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	621a      	str	r2, [r3, #32]
 80037ec:	e7cd      	b.n	800378a <HAL_RCC_OscConfig+0x32c>
      tickstart = HAL_GetTick();
 80037ee:	f7fd ffb4 	bl	800175a <HAL_GetTick>
 80037f2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	f013 0f02 	tst.w	r3, #2
 8003802:	d008      	beq.n	8003816 <HAL_RCC_OscConfig+0x3b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003804:	f7fd ffa9 	bl	800175a <HAL_GetTick>
 8003808:	1b80      	subs	r0, r0, r6
 800380a:	f241 3388 	movw	r3, #5000	; 0x1388
 800380e:	4298      	cmp	r0, r3
 8003810:	d9f0      	bls.n	80037f4 <HAL_RCC_OscConfig+0x396>
          return HAL_TIMEOUT;
 8003812:	2003      	movs	r0, #3
 8003814:	e096      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
    if (pwrclkchanged == SET)
 8003816:	bb2d      	cbnz	r5, 8003864 <HAL_RCC_OscConfig+0x406>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003818:	69e3      	ldr	r3, [r4, #28]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8091 	beq.w	8003942 <HAL_RCC_OscConfig+0x4e4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003820:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003824:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003828:	6852      	ldr	r2, [r2, #4]
 800382a:	f002 020c 	and.w	r2, r2, #12
 800382e:	2a08      	cmp	r2, #8
 8003830:	d06e      	beq.n	8003910 <HAL_RCC_OscConfig+0x4b2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003832:	2b02      	cmp	r3, #2
 8003834:	d01f      	beq.n	8003876 <HAL_RCC_OscConfig+0x418>
        __HAL_RCC_PLL_DISABLE();
 8003836:	2360      	movs	r3, #96	; 0x60
 8003838:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003840:	f7fd ff8b 	bl	800175a <HAL_GetTick>
 8003844:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800384a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003854:	d05a      	beq.n	800390c <HAL_RCC_OscConfig+0x4ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003856:	f7fd ff80 	bl	800175a <HAL_GetTick>
 800385a:	1b00      	subs	r0, r0, r4
 800385c:	2802      	cmp	r0, #2
 800385e:	d9f2      	bls.n	8003846 <HAL_RCC_OscConfig+0x3e8>
            return HAL_TIMEOUT;
 8003860:	2003      	movs	r0, #3
 8003862:	e06f      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003868:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800386c:	69da      	ldr	r2, [r3, #28]
 800386e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003872:	61da      	str	r2, [r3, #28]
 8003874:	e7d0      	b.n	8003818 <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_PLL_DISABLE();
 8003876:	2360      	movs	r3, #96	; 0x60
 8003878:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003880:	f7fd ff6b 	bl	800175a <HAL_GetTick>
 8003884:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800388a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003894:	d006      	beq.n	80038a4 <HAL_RCC_OscConfig+0x446>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003896:	f7fd ff60 	bl	800175a <HAL_GetTick>
 800389a:	1b40      	subs	r0, r0, r5
 800389c:	2802      	cmp	r0, #2
 800389e:	d9f2      	bls.n	8003886 <HAL_RCC_OscConfig+0x428>
            return HAL_TIMEOUT;
 80038a0:	2003      	movs	r0, #3
 80038a2:	e04f      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038a4:	6a23      	ldr	r3, [r4, #32]
 80038a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038aa:	d022      	beq.n	80038f2 <HAL_RCC_OscConfig+0x494>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80038b4:	6853      	ldr	r3, [r2, #4]
 80038b6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80038ba:	6a21      	ldr	r1, [r4, #32]
 80038bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80038be:	4301      	orrs	r1, r0
 80038c0:	430b      	orrs	r3, r1
 80038c2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80038c4:	2360      	movs	r3, #96	; 0x60
 80038c6:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038ce:	f7fd ff44 	bl	800175a <HAL_GetTick>
 80038d2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80038e2:	d111      	bne.n	8003908 <HAL_RCC_OscConfig+0x4aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e4:	f7fd ff39 	bl	800175a <HAL_GetTick>
 80038e8:	1b00      	subs	r0, r0, r4
 80038ea:	2802      	cmp	r0, #2
 80038ec:	d9f2      	bls.n	80038d4 <HAL_RCC_OscConfig+0x476>
            return HAL_TIMEOUT;
 80038ee:	2003      	movs	r0, #3
 80038f0:	e028      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80038fa:	6853      	ldr	r3, [r2, #4]
 80038fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003900:	68a1      	ldr	r1, [r4, #8]
 8003902:	430b      	orrs	r3, r1
 8003904:	6053      	str	r3, [r2, #4]
 8003906:	e7d1      	b.n	80038ac <HAL_RCC_OscConfig+0x44e>
  return HAL_OK;
 8003908:	2000      	movs	r0, #0
 800390a:	e01b      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
 800390c:	2000      	movs	r0, #0
 800390e:	e019      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003910:	2b01      	cmp	r3, #1
 8003912:	d019      	beq.n	8003948 <HAL_RCC_OscConfig+0x4ea>
        pll_config = RCC->CFGR;
 8003914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003918:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800391c:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391e:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003922:	6a22      	ldr	r2, [r4, #32]
 8003924:	4291      	cmp	r1, r2
 8003926:	d001      	beq.n	800392c <HAL_RCC_OscConfig+0x4ce>
          return HAL_ERROR;
 8003928:	2001      	movs	r0, #1
 800392a:	e00b      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800392c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003930:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003932:	4293      	cmp	r3, r2
 8003934:	d00a      	beq.n	800394c <HAL_RCC_OscConfig+0x4ee>
          return HAL_ERROR;
 8003936:	2001      	movs	r0, #1
 8003938:	e004      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
    return HAL_ERROR;
 800393a:	2001      	movs	r0, #1
}
 800393c:	4770      	bx	lr
        return HAL_ERROR;
 800393e:	2001      	movs	r0, #1
 8003940:	e000      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
  return HAL_OK;
 8003942:	2000      	movs	r0, #0
}
 8003944:	b002      	add	sp, #8
 8003946:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003948:	2001      	movs	r0, #1
 800394a:	e7fb      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>
  return HAL_OK;
 800394c:	2000      	movs	r0, #0
 800394e:	e7f9      	b.n	8003944 <HAL_RCC_OscConfig+0x4e6>

08003950 <HAL_RCC_GetSysClockFreq>:
{
 8003950:	b410      	push	{r4}
 8003952:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003954:	f646 0448 	movw	r4, #26696	; 0x6848
 8003958:	f6c0 0400 	movt	r4, #2048	; 0x800
 800395c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003960:	f10d 0c18 	add.w	ip, sp, #24
 8003964:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003968:	8a23      	ldrh	r3, [r4, #16]
 800396a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800396e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003972:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003976:	685a      	ldr	r2, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003978:	f002 030c 	and.w	r3, r2, #12
 800397c:	2b08      	cmp	r3, #8
 800397e:	d123      	bne.n	80039c8 <HAL_RCC_GetSysClockFreq+0x78>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003980:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8003984:	4463      	add	r3, ip
 8003986:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800398a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800398e:	d108      	bne.n	80039a2 <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003990:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003994:	f2c0 003d 	movt	r0, #61	; 0x3d
 8003998:	fb00 f001 	mul.w	r0, r0, r1
}
 800399c:	b007      	add	sp, #28
 800399e:	bc10      	pop	{r4}
 80039a0:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	f3c2 4240 	ubfx	r2, r2, #17, #1
 80039b0:	4462      	add	r2, ip
 80039b2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039b6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80039ba:	f2c0 037a 	movt	r3, #122	; 0x7a
 80039be:	fb03 f001 	mul.w	r0, r3, r1
 80039c2:	fbb0 f0f2 	udiv	r0, r0, r2
 80039c6:	e7e9      	b.n	800399c <HAL_RCC_GetSysClockFreq+0x4c>
      sysclockfreq = HSE_VALUE;
 80039c8:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 80039cc:	f2c0 007a 	movt	r0, #122	; 0x7a
  return sysclockfreq;
 80039d0:	e7e4      	b.n	800399c <HAL_RCC_GetSysClockFreq+0x4c>

080039d2 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80039d2:	2800      	cmp	r0, #0
 80039d4:	f000 80da 	beq.w	8003b8c <HAL_RCC_ClockConfig+0x1ba>
{
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	428b      	cmp	r3, r1
 80039ec:	d20f      	bcs.n	8003a0e <HAL_RCC_ClockConfig+0x3c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	f022 0207 	bic.w	r2, r2, #7
 80039fc:	430a      	orrs	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	428b      	cmp	r3, r1
 8003a08:	d001      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x3c>
    return HAL_ERROR;
 8003a0a:	2001      	movs	r0, #1
}
 8003a0c:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	f013 0f02 	tst.w	r3, #2
 8003a14:	d020      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x86>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a16:	f013 0f04 	tst.w	r3, #4
 8003a1a:	d007      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003a2a:	605a      	str	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	f013 0f08 	tst.w	r3, #8
 8003a32:	d007      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003a42:	605a      	str	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a48:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003a4c:	6853      	ldr	r3, [r2, #4]
 8003a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a52:	68a0      	ldr	r0, [r4, #8]
 8003a54:	4303      	orrs	r3, r0
 8003a56:	6053      	str	r3, [r2, #4]
 8003a58:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	f013 0f01 	tst.w	r3, #1
 8003a60:	d041      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x114>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a62:	6863      	ldr	r3, [r4, #4]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d02a      	beq.n	8003abe <HAL_RCC_ClockConfig+0xec>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d032      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	f012 0f02 	tst.w	r2, #2
 8003a7a:	f000 8089 	beq.w	8003b90 <HAL_RCC_ClockConfig+0x1be>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a82:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003a86:	6851      	ldr	r1, [r2, #4]
 8003a88:	f021 0103 	bic.w	r1, r1, #3
 8003a8c:	430b      	orrs	r3, r1
 8003a8e:	6053      	str	r3, [r2, #4]
    tickstart = HAL_GetTick();
 8003a90:	f7fd fe63 	bl	800175a <HAL_GetTick>
 8003a94:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 030c 	and.w	r3, r3, #12
 8003aa4:	6862      	ldr	r2, [r4, #4]
 8003aa6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003aaa:	d01c      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aac:	f7fd fe55 	bl	800175a <HAL_GetTick>
 8003ab0:	1b80      	subs	r0, r0, r6
 8003ab2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ab6:	4298      	cmp	r0, r3
 8003ab8:	d9ed      	bls.n	8003a96 <HAL_RCC_ClockConfig+0xc4>
        return HAL_TIMEOUT;
 8003aba:	2003      	movs	r0, #3
 8003abc:	e7a6      	b.n	8003a0c <HAL_RCC_ClockConfig+0x3a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ac2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003acc:	d1d7      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8003ace:	2001      	movs	r0, #1
 8003ad0:	e79c      	b.n	8003a0c <HAL_RCC_ClockConfig+0x3a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ad6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003ae0:	d1cd      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	e792      	b.n	8003a0c <HAL_RCC_ClockConfig+0x3a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	42ab      	cmp	r3, r5
 8003af6:	d90f      	bls.n	8003b18 <HAL_RCC_ClockConfig+0x146>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003afc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	f022 0207 	bic.w	r2, r2, #7
 8003b06:	432a      	orrs	r2, r5
 8003b08:	601a      	str	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	42ab      	cmp	r3, r5
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8003b14:	2001      	movs	r0, #1
 8003b16:	e779      	b.n	8003a0c <HAL_RCC_ClockConfig+0x3a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	f013 0f04 	tst.w	r3, #4
 8003b1e:	d009      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x162>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003b28:	6853      	ldr	r3, [r2, #4]
 8003b2a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b2e:	68e1      	ldr	r1, [r4, #12]
 8003b30:	430b      	orrs	r3, r1
 8003b32:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	f013 0f08 	tst.w	r3, #8
 8003b3a:	d00a      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x180>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b40:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003b44:	6853      	ldr	r3, [r2, #4]
 8003b46:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003b4a:	6921      	ldr	r1, [r4, #16]
 8003b4c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003b50:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b52:	f7ff fefd 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 8003b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003b64:	f646 0260 	movw	r2, #26720	; 0x6860
 8003b68:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003b6c:	5cd3      	ldrb	r3, [r2, r3]
 8003b6e:	40d8      	lsrs	r0, r3
 8003b70:	f240 0304 	movw	r3, #4
 8003b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b78:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003b7a:	f240 03f0 	movw	r3, #240	; 0xf0
 8003b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b82:	6818      	ldr	r0, [r3, #0]
 8003b84:	f7fd fda1 	bl	80016ca <HAL_InitTick>
  return HAL_OK;
 8003b88:	2000      	movs	r0, #0
 8003b8a:	e73f      	b.n	8003a0c <HAL_RCC_ClockConfig+0x3a>
    return HAL_ERROR;
 8003b8c:	2001      	movs	r0, #1
}
 8003b8e:	4770      	bx	lr
        return HAL_ERROR;
 8003b90:	2001      	movs	r0, #1
 8003b92:	e73b      	b.n	8003a0c <HAL_RCC_ClockConfig+0x3a>

08003b94 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8003b94:	f240 0304 	movw	r3, #4
 8003b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_RCC_GetPCLK1Freq>:
{
 8003ba0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ba2:	f7ff fff7 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003baa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003bb4:	f646 0270 	movw	r2, #26736	; 0x6870
 8003bb8:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003bbc:	5cd3      	ldrb	r3, [r2, r3]
}
 8003bbe:	40d8      	lsrs	r0, r3
 8003bc0:	bd08      	pop	{r3, pc}

08003bc2 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc2:	b570      	push	{r4, r5, r6, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bc8:	6803      	ldr	r3, [r0, #0]
 8003bca:	f013 0f01 	tst.w	r3, #1
 8003bce:	d049      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003bde:	d160      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003be4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003be8:	69da      	ldr	r2, [r3, #28]
 8003bea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bee:	61da      	str	r2, [r3, #28]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003bfa:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003c00:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c0a:	d04c      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c14:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c16:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003c1a:	d017      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8003c1c:	6862      	ldr	r2, [r4, #4]
 8003c1e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d012      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c2e:	6a19      	ldr	r1, [r3, #32]
 8003c30:	f421 7040 	bic.w	r0, r1, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c34:	f44f 6288 	mov.w	r2, #1088	; 0x440
 8003c38:	f2c4 2242 	movt	r2, #16962	; 0x4242
 8003c3c:	2601      	movs	r6, #1
 8003c3e:	6016      	str	r6, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c40:	2600      	movs	r6, #0
 8003c42:	6016      	str	r6, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c44:	6218      	str	r0, [r3, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c46:	f011 0f01 	tst.w	r1, #1
 8003c4a:	d146      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x118>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c50:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003c54:	6a13      	ldr	r3, [r2, #32]
 8003c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5a:	6861      	ldr	r1, [r4, #4]
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c60:	2d00      	cmp	r5, #0
 8003c62:	d14e      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x140>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	f013 0f02 	tst.w	r3, #2
 8003c6a:	d009      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003c74:	6853      	ldr	r3, [r2, #4]
 8003c76:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c7a:	68a1      	ldr	r1, [r4, #8]
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	f013 0f10 	tst.w	r3, #16
 8003c86:	d045      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c8c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003c90:	6853      	ldr	r3, [r2, #4]
 8003c92:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003c96:	68e1      	ldr	r1, [r4, #12]
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c9c:	2000      	movs	r0, #0
}
 8003c9e:	b002      	add	sp, #8
 8003ca0:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8003ca2:	2500      	movs	r5, #0
 8003ca4:	e7aa      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x3a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ca6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003caa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cb4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003cb6:	f7fd fd50 	bl	800175a <HAL_GetTick>
 8003cba:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003cc0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003cca:	d19f      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ccc:	f7fd fd45 	bl	800175a <HAL_GetTick>
 8003cd0:	1b80      	subs	r0, r0, r6
 8003cd2:	2864      	cmp	r0, #100	; 0x64
 8003cd4:	d9f2      	bls.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xfa>
          return HAL_TIMEOUT;
 8003cd6:	2003      	movs	r0, #3
 8003cd8:	e7e1      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xdc>
        tickstart = HAL_GetTick();
 8003cda:	f7fd fd3e 	bl	800175a <HAL_GetTick>
 8003cde:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ce4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f013 0f02 	tst.w	r3, #2
 8003cee:	d1ad      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf0:	f7fd fd33 	bl	800175a <HAL_GetTick>
 8003cf4:	1b80      	subs	r0, r0, r6
 8003cf6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cfa:	4298      	cmp	r0, r3
 8003cfc:	d9f0      	bls.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x11e>
            return HAL_TIMEOUT;
 8003cfe:	2003      	movs	r0, #3
 8003d00:	e7cd      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003d10:	61da      	str	r2, [r3, #28]
 8003d12:	e7a7      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  return HAL_OK;
 8003d14:	2000      	movs	r0, #0
 8003d16:	e7c2      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xdc>

08003d18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d1a:	6a03      	ldr	r3, [r0, #32]
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d22:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d24:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d26:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d28:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d2c:	680d      	ldr	r5, [r1, #0]
 8003d2e:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d30:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d34:	688b      	ldr	r3, [r1, #8]
 8003d36:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d38:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 8003d3c:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8003d40:	42a0      	cmp	r0, r4
 8003d42:	d00c      	beq.n	8003d5e <TIM_OC1_SetConfig+0x46>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d44:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 8003d48:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8003d4c:	42a0      	cmp	r0, r4
 8003d4e:	d00d      	beq.n	8003d6c <TIM_OC1_SetConfig+0x54>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d50:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d52:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d54:	684a      	ldr	r2, [r1, #4]
 8003d56:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d58:	6203      	str	r3, [r0, #32]
}
 8003d5a:	bc30      	pop	{r4, r5}
 8003d5c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d5e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003d62:	68cc      	ldr	r4, [r1, #12]
 8003d64:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d66:	f023 0304 	bic.w	r3, r3, #4
 8003d6a:	e7eb      	b.n	8003d44 <TIM_OC1_SetConfig+0x2c>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d6c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8003d70:	694c      	ldr	r4, [r1, #20]
 8003d72:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d74:	698a      	ldr	r2, [r1, #24]
 8003d76:	4322      	orrs	r2, r4
 8003d78:	e7ea      	b.n	8003d50 <TIM_OC1_SetConfig+0x38>

08003d7a <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d7a:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d7c:	6a03      	ldr	r3, [r0, #32]
 8003d7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d82:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d84:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d86:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d88:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d8a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d8e:	680d      	ldr	r5, [r1, #0]
 8003d90:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d96:	688c      	ldr	r4, [r1, #8]
 8003d98:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d9c:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 8003da0:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8003da4:	42a0      	cmp	r0, r4
 8003da6:	d00c      	beq.n	8003dc2 <TIM_OC3_SetConfig+0x48>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da8:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 8003dac:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8003db0:	42a0      	cmp	r0, r4
 8003db2:	d00e      	beq.n	8003dd2 <TIM_OC3_SetConfig+0x58>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db4:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003db6:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003db8:	684a      	ldr	r2, [r1, #4]
 8003dba:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dbc:	6203      	str	r3, [r0, #32]
}
 8003dbe:	bc30      	pop	{r4, r5}
 8003dc0:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dc6:	68cc      	ldr	r4, [r1, #12]
 8003dc8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dd0:	e7ea      	b.n	8003da8 <TIM_OC3_SetConfig+0x2e>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dd2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dd6:	694c      	ldr	r4, [r1, #20]
 8003dd8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ddc:	698c      	ldr	r4, [r1, #24]
 8003dde:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8003de2:	e7e7      	b.n	8003db4 <TIM_OC3_SetConfig+0x3a>

08003de4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003de6:	6a03      	ldr	r3, [r0, #32]
 8003de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003df2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003df4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003df8:	680c      	ldr	r4, [r1, #0]
 8003dfa:	ea42 2204 	orr.w	r2, r2, r4, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e02:	688c      	ldr	r4, [r1, #8]
 8003e04:	ea43 3304 	orr.w	r3, r3, r4, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e08:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 8003e0c:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8003e10:	42a0      	cmp	r0, r4
 8003e12:	d006      	beq.n	8003e22 <TIM_OC4_SetConfig+0x3e>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e14:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e16:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e18:	684a      	ldr	r2, [r1, #4]
 8003e1a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e1c:	6203      	str	r3, [r0, #32]
}
 8003e1e:	bc30      	pop	{r4, r5}
 8003e20:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e22:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e26:	694c      	ldr	r4, [r1, #20]
 8003e28:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
 8003e2c:	e7f2      	b.n	8003e14 <TIM_OC4_SetConfig+0x30>

08003e2e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e2e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e30:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e32:	6a04      	ldr	r4, [r0, #32]
 8003e34:	f024 0401 	bic.w	r4, r4, #1
 8003e38:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e3a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e3c:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e40:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e44:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003e48:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e4a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e4c:	6203      	str	r3, [r0, #32]
}
 8003e4e:	bc10      	pop	{r4}
 8003e50:	4770      	bx	lr

08003e52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e52:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e54:	6a03      	ldr	r3, [r0, #32]
 8003e56:	f023 0310 	bic.w	r3, r3, #16
 8003e5a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e5c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003e5e:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e60:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e64:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e6c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e70:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e72:	6203      	str	r3, [r0, #32]
}
 8003e74:	bc10      	pop	{r4}
 8003e76:	4770      	bx	lr

08003e78 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e78:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e7e:	4319      	orrs	r1, r3
 8003e80:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e84:	6081      	str	r1, [r0, #8]
}
 8003e86:	4770      	bx	lr

08003e88 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003e88:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d001      	beq.n	8003e96 <HAL_TIM_Base_Start+0xe>
    return HAL_ERROR;
 8003e92:	2001      	movs	r0, #1
 8003e94:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 8003e96:	2302      	movs	r3, #2
 8003e98:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e9c:	6803      	ldr	r3, [r0, #0]
 8003e9e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003ea2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d014      	beq.n	8003ed4 <HAL_TIM_Base_Start+0x4c>
 8003eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eae:	d011      	beq.n	8003ed4 <HAL_TIM_Base_Start+0x4c>
 8003eb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003eb4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00b      	beq.n	8003ed4 <HAL_TIM_Base_Start+0x4c>
 8003ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ec0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d005      	beq.n	8003ed4 <HAL_TIM_Base_Start+0x4c>
    __HAL_TIM_ENABLE(htim);
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eda:	2a06      	cmp	r2, #6
 8003edc:	d005      	beq.n	8003eea <HAL_TIM_Base_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	f042 0201 	orr.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	4770      	bx	lr
 8003eea:	2000      	movs	r0, #0
}
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003eee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d001      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0xe>
    return HAL_ERROR;
 8003ef8:	2001      	movs	r0, #1
 8003efa:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	2302      	movs	r3, #2
 8003efe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f02:	6802      	ldr	r2, [r0, #0]
 8003f04:	68d3      	ldr	r3, [r2, #12]
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0c:	6803      	ldr	r3, [r0, #0]
 8003f0e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003f12:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d014      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x56>
 8003f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1e:	d011      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x56>
 8003f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f24:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00b      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x56>
 8003f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f30:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d005      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x56>
    __HAL_TIM_ENABLE(htim);
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f40:	2000      	movs	r0, #0
 8003f42:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4a:	2a06      	cmp	r2, #6
 8003f4c:	d005      	beq.n	8003f5a <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	f042 0201 	orr.w	r2, r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f56:	2000      	movs	r0, #0
 8003f58:	4770      	bx	lr
 8003f5a:	2000      	movs	r0, #0
}
 8003f5c:	4770      	bx	lr

08003f5e <HAL_TIM_PWM_MspInit>:
}
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIM_PeriodElapsedCallback>:
}
 8003f60:	4770      	bx	lr

08003f62 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIM_IC_CaptureCallback>:
}
 8003f64:	4770      	bx	lr

08003f66 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIM_TriggerCallback>:
}
 8003f68:	4770      	bx	lr

08003f6a <HAL_TIM_IRQHandler>:
{
 8003f6a:	b510      	push	{r4, lr}
 8003f6c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f6e:	6803      	ldr	r3, [r0, #0]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	f012 0f02 	tst.w	r2, #2
 8003f76:	d011      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	f012 0f02 	tst.w	r2, #2
 8003f7e:	d00d      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f80:	f06f 0202 	mvn.w	r2, #2
 8003f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f86:	2301      	movs	r3, #1
 8003f88:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f8a:	6803      	ldr	r3, [r0, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f013 0f03 	tst.w	r3, #3
 8003f92:	d070      	beq.n	8004076 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003f94:	f7ff ffe6 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	691a      	ldr	r2, [r3, #16]
 8003fa0:	f012 0f04 	tst.w	r2, #4
 8003fa4:	d012      	beq.n	8003fcc <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	f012 0f04 	tst.w	r2, #4
 8003fac:	d00e      	beq.n	8003fcc <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fae:	f06f 0204 	mvn.w	r2, #4
 8003fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003fc0:	d05f      	beq.n	8004082 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f7ff ffce 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	f012 0f08 	tst.w	r2, #8
 8003fd4:	d012      	beq.n	8003ffc <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	f012 0f08 	tst.w	r2, #8
 8003fdc:	d00e      	beq.n	8003ffc <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fde:	f06f 0208 	mvn.w	r2, #8
 8003fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	f013 0f03 	tst.w	r3, #3
 8003ff0:	d04e      	beq.n	8004090 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f7ff ffb6 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	f012 0f10 	tst.w	r2, #16
 8004004:	d012      	beq.n	800402c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	f012 0f10 	tst.w	r2, #16
 800400c:	d00e      	beq.n	800402c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800400e:	f06f 0210 	mvn.w	r2, #16
 8004012:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004014:	2308      	movs	r3, #8
 8004016:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004020:	d03d      	beq.n	800409e <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8004022:	4620      	mov	r0, r4
 8004024:	f7ff ff9e 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004028:	2300      	movs	r3, #0
 800402a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	f012 0f01 	tst.w	r2, #1
 8004034:	d003      	beq.n	800403e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	f012 0f01 	tst.w	r2, #1
 800403c:	d136      	bne.n	80040ac <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004046:	d003      	beq.n	8004050 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800404e:	d134      	bne.n	80040ba <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004058:	d003      	beq.n	8004062 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004060:	d132      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	f012 0f20 	tst.w	r2, #32
 800406a:	d003      	beq.n	8004074 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	f012 0f20 	tst.w	r2, #32
 8004072:	d130      	bne.n	80040d6 <HAL_TIM_IRQHandler+0x16c>
}
 8004074:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004076:	f7ff ff74 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407a:	4620      	mov	r0, r4
 800407c:	f7ff ff73 	bl	8003f66 <HAL_TIM_PWM_PulseFinishedCallback>
 8004080:	e78a      	b.n	8003f98 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	4620      	mov	r0, r4
 8004084:	f7ff ff6d 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	4620      	mov	r0, r4
 800408a:	f7ff ff6c 	bl	8003f66 <HAL_TIM_PWM_PulseFinishedCallback>
 800408e:	e79b      	b.n	8003fc8 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004090:	4620      	mov	r0, r4
 8004092:	f7ff ff66 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004096:	4620      	mov	r0, r4
 8004098:	f7ff ff65 	bl	8003f66 <HAL_TIM_PWM_PulseFinishedCallback>
 800409c:	e7ac      	b.n	8003ff8 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409e:	4620      	mov	r0, r4
 80040a0:	f7ff ff5f 	bl	8003f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a4:	4620      	mov	r0, r4
 80040a6:	f7ff ff5e 	bl	8003f66 <HAL_TIM_PWM_PulseFinishedCallback>
 80040aa:	e7bd      	b.n	8004028 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040ac:	f06f 0201 	mvn.w	r2, #1
 80040b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b2:	4620      	mov	r0, r4
 80040b4:	f7ff ff54 	bl	8003f60 <HAL_TIM_PeriodElapsedCallback>
 80040b8:	e7c1      	b.n	800403e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040be:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80040c0:	4620      	mov	r0, r4
 80040c2:	f000 fa88 	bl	80045d6 <HAL_TIMEx_BreakCallback>
 80040c6:	e7c3      	b.n	8004050 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040cc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80040ce:	4620      	mov	r0, r4
 80040d0:	f7ff ff4a 	bl	8003f68 <HAL_TIM_TriggerCallback>
 80040d4:	e7c5      	b.n	8004062 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040d6:	f06f 0220 	mvn.w	r2, #32
 80040da:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80040dc:	4620      	mov	r0, r4
 80040de:	f000 fa79 	bl	80045d4 <HAL_TIMEx_CommutCallback>
}
 80040e2:	e7c7      	b.n	8004074 <HAL_TIM_IRQHandler+0x10a>

080040e4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80040e4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040e6:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80040ea:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80040ee:	4290      	cmp	r0, r2
 80040f0:	d00e      	beq.n	8004110 <TIM_Base_SetConfig+0x2c>
 80040f2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80040f6:	d00b      	beq.n	8004110 <TIM_Base_SetConfig+0x2c>
 80040f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040fc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004100:	4290      	cmp	r0, r2
 8004102:	d005      	beq.n	8004110 <TIM_Base_SetConfig+0x2c>
 8004104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004108:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800410c:	4290      	cmp	r0, r2
 800410e:	d103      	bne.n	8004118 <TIM_Base_SetConfig+0x34>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004114:	684a      	ldr	r2, [r1, #4]
 8004116:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004118:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800411c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004120:	4290      	cmp	r0, r2
 8004122:	d00e      	beq.n	8004142 <TIM_Base_SetConfig+0x5e>
 8004124:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004128:	d00b      	beq.n	8004142 <TIM_Base_SetConfig+0x5e>
 800412a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800412e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004132:	4290      	cmp	r0, r2
 8004134:	d005      	beq.n	8004142 <TIM_Base_SetConfig+0x5e>
 8004136:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800413a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800413e:	4290      	cmp	r0, r2
 8004140:	d103      	bne.n	800414a <TIM_Base_SetConfig+0x66>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004146:	68ca      	ldr	r2, [r1, #12]
 8004148:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800414a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414e:	694a      	ldr	r2, [r1, #20]
 8004150:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004152:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004154:	688b      	ldr	r3, [r1, #8]
 8004156:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004158:	680b      	ldr	r3, [r1, #0]
 800415a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800415c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004160:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004164:	4298      	cmp	r0, r3
 8004166:	d002      	beq.n	800416e <TIM_Base_SetConfig+0x8a>
  TIMx->EGR = TIM_EGR_UG;
 8004168:	2301      	movs	r3, #1
 800416a:	6143      	str	r3, [r0, #20]
}
 800416c:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800416e:	690b      	ldr	r3, [r1, #16]
 8004170:	6303      	str	r3, [r0, #48]	; 0x30
 8004172:	e7f9      	b.n	8004168 <TIM_Base_SetConfig+0x84>

08004174 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004174:	b338      	cbz	r0, 80041c6 <HAL_TIM_Base_Init+0x52>
{
 8004176:	b510      	push	{r4, lr}
 8004178:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800417a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800417e:	b1eb      	cbz	r3, 80041bc <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8004180:	2302      	movs	r3, #2
 8004182:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004186:	1d21      	adds	r1, r4, #4
 8004188:	6820      	ldr	r0, [r4, #0]
 800418a:	f7ff ffab 	bl	80040e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418e:	2301      	movs	r3, #1
 8004190:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004194:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004198:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800419c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80041a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80041b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80041b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80041b8:	2000      	movs	r0, #0
}
 80041ba:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80041bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80041c0:	f7fc fd1b 	bl	8000bfa <HAL_TIM_Base_MspInit>
 80041c4:	e7dc      	b.n	8004180 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80041c6:	2001      	movs	r0, #1
}
 80041c8:	4770      	bx	lr

080041ca <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80041ca:	b338      	cbz	r0, 800421c <HAL_TIM_PWM_Init+0x52>
{
 80041cc:	b510      	push	{r4, lr}
 80041ce:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80041d0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80041d4:	b1eb      	cbz	r3, 8004212 <HAL_TIM_PWM_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 80041d6:	2302      	movs	r3, #2
 80041d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041dc:	1d21      	adds	r1, r4, #4
 80041de:	6820      	ldr	r0, [r4, #0]
 80041e0:	f7ff ff80 	bl	80040e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80041ee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80041f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80041f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004202:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004206:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800420a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800420e:	2000      	movs	r0, #0
}
 8004210:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004212:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004216:	f7ff fea2 	bl	8003f5e <HAL_TIM_PWM_MspInit>
 800421a:	e7dc      	b.n	80041d6 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800421c:	2001      	movs	r0, #1
}
 800421e:	4770      	bx	lr

08004220 <TIM_OC2_SetConfig>:
{
 8004220:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004222:	6a03      	ldr	r3, [r0, #32]
 8004224:	f023 0310 	bic.w	r3, r3, #16
 8004228:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800422a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800422c:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800422e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004230:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004234:	680c      	ldr	r4, [r1, #0]
 8004236:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800423a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800423e:	688c      	ldr	r4, [r1, #8]
 8004240:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004244:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 8004248:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800424c:	42a0      	cmp	r0, r4
 800424e:	d00c      	beq.n	800426a <TIM_OC2_SetConfig+0x4a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004250:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 8004254:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8004258:	42a0      	cmp	r0, r4
 800425a:	d00e      	beq.n	800427a <TIM_OC2_SetConfig+0x5a>
  TIMx->CR2 = tmpcr2;
 800425c:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800425e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004260:	684a      	ldr	r2, [r1, #4]
 8004262:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004264:	6203      	str	r3, [r0, #32]
}
 8004266:	bc30      	pop	{r4, r5}
 8004268:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800426a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800426e:	68cc      	ldr	r4, [r1, #12]
 8004270:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004278:	e7ea      	b.n	8004250 <TIM_OC2_SetConfig+0x30>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800427a:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800427e:	694c      	ldr	r4, [r1, #20]
 8004280:	ea45 0584 	orr.w	r5, r5, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004284:	698c      	ldr	r4, [r1, #24]
 8004286:	ea45 0584 	orr.w	r5, r5, r4, lsl #2
 800428a:	e7e7      	b.n	800425c <TIM_OC2_SetConfig+0x3c>

0800428c <HAL_TIM_PWM_ConfigChannel>:
{
 800428c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800428e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004292:	2b01      	cmp	r3, #1
 8004294:	d060      	beq.n	8004358 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8004296:	460d      	mov	r5, r1
 8004298:	4604      	mov	r4, r0
 800429a:	2301      	movs	r3, #1
 800429c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80042a0:	2a0c      	cmp	r2, #12
 80042a2:	d81a      	bhi.n	80042da <HAL_TIM_PWM_ConfigChannel+0x4e>
 80042a4:	e8df f002 	tbb	[pc, r2]
 80042a8:	19191907 	.word	0x19191907
 80042ac:	1919191d 	.word	0x1919191d
 80042b0:	19191931 	.word	0x19191931
 80042b4:	44          	.byte	0x44
 80042b5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042b6:	6800      	ldr	r0, [r0, #0]
 80042b8:	f7ff fd2e 	bl	8003d18 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042bc:	6822      	ldr	r2, [r4, #0]
 80042be:	6993      	ldr	r3, [r2, #24]
 80042c0:	f043 0308 	orr.w	r3, r3, #8
 80042c4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042c6:	6822      	ldr	r2, [r4, #0]
 80042c8:	6993      	ldr	r3, [r2, #24]
 80042ca:	f023 0304 	bic.w	r3, r3, #4
 80042ce:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042d0:	6822      	ldr	r2, [r4, #0]
 80042d2:	6993      	ldr	r3, [r2, #24]
 80042d4:	6929      	ldr	r1, [r5, #16]
 80042d6:	430b      	orrs	r3, r1
 80042d8:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 80042da:	2000      	movs	r0, #0
 80042dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80042e0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042e2:	6800      	ldr	r0, [r0, #0]
 80042e4:	f7ff ff9c 	bl	8004220 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042e8:	6822      	ldr	r2, [r4, #0]
 80042ea:	6993      	ldr	r3, [r2, #24]
 80042ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042f0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	6993      	ldr	r3, [r2, #24]
 80042f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042fa:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042fc:	6822      	ldr	r2, [r4, #0]
 80042fe:	6993      	ldr	r3, [r2, #24]
 8004300:	6929      	ldr	r1, [r5, #16]
 8004302:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004306:	6193      	str	r3, [r2, #24]
      break;
 8004308:	e7e7      	b.n	80042da <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800430a:	6800      	ldr	r0, [r0, #0]
 800430c:	f7ff fd35 	bl	8003d7a <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004310:	6822      	ldr	r2, [r4, #0]
 8004312:	69d3      	ldr	r3, [r2, #28]
 8004314:	f043 0308 	orr.w	r3, r3, #8
 8004318:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800431a:	6822      	ldr	r2, [r4, #0]
 800431c:	69d3      	ldr	r3, [r2, #28]
 800431e:	f023 0304 	bic.w	r3, r3, #4
 8004322:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004324:	6822      	ldr	r2, [r4, #0]
 8004326:	69d3      	ldr	r3, [r2, #28]
 8004328:	6929      	ldr	r1, [r5, #16]
 800432a:	430b      	orrs	r3, r1
 800432c:	61d3      	str	r3, [r2, #28]
      break;
 800432e:	e7d4      	b.n	80042da <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004330:	6800      	ldr	r0, [r0, #0]
 8004332:	f7ff fd57 	bl	8003de4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004336:	6822      	ldr	r2, [r4, #0]
 8004338:	69d3      	ldr	r3, [r2, #28]
 800433a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800433e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004340:	6822      	ldr	r2, [r4, #0]
 8004342:	69d3      	ldr	r3, [r2, #28]
 8004344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004348:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800434a:	6822      	ldr	r2, [r4, #0]
 800434c:	69d3      	ldr	r3, [r2, #28]
 800434e:	6929      	ldr	r1, [r5, #16]
 8004350:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004354:	61d3      	str	r3, [r2, #28]
      break;
 8004356:	e7c0      	b.n	80042da <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 8004358:	2002      	movs	r0, #2
 800435a:	e7c1      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x54>

0800435c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800435c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800435e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004360:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004364:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8004368:	430b      	orrs	r3, r1
 800436a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800436c:	6083      	str	r3, [r0, #8]
}
 800436e:	bc10      	pop	{r4}
 8004370:	4770      	bx	lr

08004372 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004372:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004376:	2b01      	cmp	r3, #1
 8004378:	d066      	beq.n	8004448 <HAL_TIM_ConfigClockSource+0xd6>
{
 800437a:	b510      	push	{r4, lr}
 800437c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800437e:	2301      	movs	r3, #1
 8004380:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	2302      	movs	r3, #2
 8004386:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800438a:	6802      	ldr	r2, [r0, #0]
 800438c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800438e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004392:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004396:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004398:	680b      	ldr	r3, [r1, #0]
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d04a      	beq.n	8004434 <HAL_TIM_ConfigClockSource+0xc2>
 800439e:	d913      	bls.n	80043c8 <HAL_TIM_ConfigClockSource+0x56>
 80043a0:	2b60      	cmp	r3, #96	; 0x60
 80043a2:	d03d      	beq.n	8004420 <HAL_TIM_ConfigClockSource+0xae>
 80043a4:	d91e      	bls.n	80043e4 <HAL_TIM_ConfigClockSource+0x72>
 80043a6:	2b70      	cmp	r3, #112	; 0x70
 80043a8:	d028      	beq.n	80043fc <HAL_TIM_ConfigClockSource+0x8a>
 80043aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ae:	d130      	bne.n	8004412 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80043b0:	68cb      	ldr	r3, [r1, #12]
 80043b2:	684a      	ldr	r2, [r1, #4]
 80043b4:	6889      	ldr	r1, [r1, #8]
 80043b6:	6800      	ldr	r0, [r0, #0]
 80043b8:	f7ff ffd0 	bl	800435c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043bc:	6822      	ldr	r2, [r4, #0]
 80043be:	6893      	ldr	r3, [r2, #8]
 80043c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043c4:	6093      	str	r3, [r2, #8]
      break;
 80043c6:	e024      	b.n	8004412 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d006      	beq.n	80043da <HAL_TIM_ConfigClockSource+0x68>
 80043cc:	d904      	bls.n	80043d8 <HAL_TIM_ConfigClockSource+0x66>
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	d003      	beq.n	80043da <HAL_TIM_ConfigClockSource+0x68>
 80043d2:	2b30      	cmp	r3, #48	; 0x30
 80043d4:	d001      	beq.n	80043da <HAL_TIM_ConfigClockSource+0x68>
 80043d6:	e01c      	b.n	8004412 <HAL_TIM_ConfigClockSource+0xa0>
 80043d8:	b9db      	cbnz	r3, 8004412 <HAL_TIM_ConfigClockSource+0xa0>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043da:	4619      	mov	r1, r3
 80043dc:	6820      	ldr	r0, [r4, #0]
 80043de:	f7ff fd4b 	bl	8003e78 <TIM_ITRx_SetConfig>
        break;
 80043e2:	e016      	b.n	8004412 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80043e4:	2b50      	cmp	r3, #80	; 0x50
 80043e6:	d114      	bne.n	8004412 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e8:	68ca      	ldr	r2, [r1, #12]
 80043ea:	6849      	ldr	r1, [r1, #4]
 80043ec:	6800      	ldr	r0, [r0, #0]
 80043ee:	f7ff fd1e 	bl	8003e2e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043f2:	2150      	movs	r1, #80	; 0x50
 80043f4:	6820      	ldr	r0, [r4, #0]
 80043f6:	f7ff fd3f 	bl	8003e78 <TIM_ITRx_SetConfig>
      break;
 80043fa:	e00a      	b.n	8004412 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80043fc:	68cb      	ldr	r3, [r1, #12]
 80043fe:	684a      	ldr	r2, [r1, #4]
 8004400:	6889      	ldr	r1, [r1, #8]
 8004402:	6800      	ldr	r0, [r0, #0]
 8004404:	f7ff ffaa 	bl	800435c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004408:	6822      	ldr	r2, [r4, #0]
 800440a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800440c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004410:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004412:	2301      	movs	r3, #1
 8004414:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004418:	2000      	movs	r0, #0
 800441a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800441e:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004420:	68ca      	ldr	r2, [r1, #12]
 8004422:	6849      	ldr	r1, [r1, #4]
 8004424:	6800      	ldr	r0, [r0, #0]
 8004426:	f7ff fd14 	bl	8003e52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800442a:	2160      	movs	r1, #96	; 0x60
 800442c:	6820      	ldr	r0, [r4, #0]
 800442e:	f7ff fd23 	bl	8003e78 <TIM_ITRx_SetConfig>
      break;
 8004432:	e7ee      	b.n	8004412 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004434:	68ca      	ldr	r2, [r1, #12]
 8004436:	6849      	ldr	r1, [r1, #4]
 8004438:	6800      	ldr	r0, [r0, #0]
 800443a:	f7ff fcf8 	bl	8003e2e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800443e:	2140      	movs	r1, #64	; 0x40
 8004440:	6820      	ldr	r0, [r4, #0]
 8004442:	f7ff fd19 	bl	8003e78 <TIM_ITRx_SetConfig>
      break;
 8004446:	e7e4      	b.n	8004412 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 8004448:	2002      	movs	r0, #2
}
 800444a:	4770      	bx	lr

0800444c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800444c:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800444e:	f001 011f 	and.w	r1, r1, #31
 8004452:	2301      	movs	r3, #1
 8004454:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004458:	6a03      	ldr	r3, [r0, #32]
 800445a:	ea23 0304 	bic.w	r3, r3, r4
 800445e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004460:	6a03      	ldr	r3, [r0, #32]
 8004462:	408a      	lsls	r2, r1
 8004464:	4313      	orrs	r3, r2
 8004466:	6203      	str	r3, [r0, #32]
}
 8004468:	bc10      	pop	{r4}
 800446a:	4770      	bx	lr

0800446c <HAL_TIM_PWM_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800446c:	460a      	mov	r2, r1
 800446e:	2900      	cmp	r1, #0
 8004470:	d137      	bne.n	80044e2 <HAL_TIM_PWM_Start+0x76>
 8004472:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f113 33ff 	adds.w	r3, r3, #4294967295
 800447c:	bf18      	it	ne
 800447e:	2301      	movne	r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d16a      	bne.n	800455a <HAL_TIM_PWM_Start+0xee>
{
 8004484:	b510      	push	{r4, lr}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004486:	2a00      	cmp	r2, #0
 8004488:	d147      	bne.n	800451a <HAL_TIM_PWM_Start+0xae>
 800448a:	2302      	movs	r3, #2
 800448c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8004490:	4611      	mov	r1, r2
 8004492:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004494:	2201      	movs	r2, #1
 8004496:	6800      	ldr	r0, [r0, #0]
 8004498:	f7ff ffd8 	bl	800444c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800449c:	6822      	ldr	r2, [r4, #0]
 800449e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80044a2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d047      	beq.n	800453a <HAL_TIM_PWM_Start+0xce>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80044b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d045      	beq.n	8004544 <HAL_TIM_PWM_Start+0xd8>
 80044b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044bc:	d042      	beq.n	8004544 <HAL_TIM_PWM_Start+0xd8>
 80044be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044c2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d03c      	beq.n	8004544 <HAL_TIM_PWM_Start+0xd8>
 80044ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044ce:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d036      	beq.n	8004544 <HAL_TIM_PWM_Start+0xd8>
    __HAL_TIM_ENABLE(htim);
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	f042 0201 	orr.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80044de:	2000      	movs	r0, #0
 80044e0:	e03a      	b.n	8004558 <HAL_TIM_PWM_Start+0xec>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044e2:	2904      	cmp	r1, #4
 80044e4:	d009      	beq.n	80044fa <HAL_TIM_PWM_Start+0x8e>
 80044e6:	2908      	cmp	r1, #8
 80044e8:	d00f      	beq.n	800450a <HAL_TIM_PWM_Start+0x9e>
 80044ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f113 33ff 	adds.w	r3, r3, #4294967295
 80044f4:	bf18      	it	ne
 80044f6:	2301      	movne	r3, #1
 80044f8:	e7c2      	b.n	8004480 <HAL_TIM_PWM_Start+0x14>
 80044fa:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	f113 33ff 	adds.w	r3, r3, #4294967295
 8004504:	bf18      	it	ne
 8004506:	2301      	movne	r3, #1
 8004508:	e7ba      	b.n	8004480 <HAL_TIM_PWM_Start+0x14>
 800450a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f113 33ff 	adds.w	r3, r3, #4294967295
 8004514:	bf18      	it	ne
 8004516:	2301      	movne	r3, #1
 8004518:	e7b2      	b.n	8004480 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800451a:	2a04      	cmp	r2, #4
 800451c:	d005      	beq.n	800452a <HAL_TIM_PWM_Start+0xbe>
 800451e:	2a08      	cmp	r2, #8
 8004520:	d007      	beq.n	8004532 <HAL_TIM_PWM_Start+0xc6>
 8004522:	2302      	movs	r3, #2
 8004524:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8004528:	e7b2      	b.n	8004490 <HAL_TIM_PWM_Start+0x24>
 800452a:	2302      	movs	r3, #2
 800452c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8004530:	e7ae      	b.n	8004490 <HAL_TIM_PWM_Start+0x24>
 8004532:	2302      	movs	r3, #2
 8004534:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8004538:	e7aa      	b.n	8004490 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 800453a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800453c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004540:	6453      	str	r3, [r2, #68]	; 0x44
 8004542:	e7b2      	b.n	80044aa <HAL_TIM_PWM_Start+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454a:	2a06      	cmp	r2, #6
 800454c:	d007      	beq.n	800455e <HAL_TIM_PWM_Start+0xf2>
      __HAL_TIM_ENABLE(htim);
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004556:	2000      	movs	r0, #0
}
 8004558:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800455a:	2001      	movs	r0, #1
}
 800455c:	4770      	bx	lr
  return HAL_OK;
 800455e:	2000      	movs	r0, #0
 8004560:	e7fa      	b.n	8004558 <HAL_TIM_PWM_Start+0xec>

08004562 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004562:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004566:	2b01      	cmp	r3, #1
 8004568:	d032      	beq.n	80045d0 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
{
 800456a:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800456c:	2301      	movs	r3, #1
 800456e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004572:	2302      	movs	r3, #2
 8004574:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004578:	6803      	ldr	r3, [r0, #0]
 800457a:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800457c:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800457e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004582:	680a      	ldr	r2, [r1, #0]
 8004584:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004586:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004588:	6803      	ldr	r3, [r0, #0]
 800458a:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800458e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004592:	4293      	cmp	r3, r2
 8004594:	d00e      	beq.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8004596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459a:	d00b      	beq.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800459c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045a0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d005      	beq.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 80045a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045ac:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d104      	bne.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045b4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045b8:	684a      	ldr	r2, [r1, #4]
 80045ba:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045bc:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045be:	2301      	movs	r3, #1
 80045c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045c4:	2300      	movs	r3, #0
 80045c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80045ca:	4618      	mov	r0, r3
}
 80045cc:	bc30      	pop	{r4, r5}
 80045ce:	4770      	bx	lr
  __HAL_LOCK(htim);
 80045d0:	2002      	movs	r0, #2
}
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045d4:	4770      	bx	lr

080045d6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045d6:	4770      	bx	lr

080045d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045d8:	b084      	sub	sp, #16
 80045da:	a801      	add	r0, sp, #4
 80045dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80045e0:	2000      	movs	r0, #0
 80045e2:	b004      	add	sp, #16
 80045e4:	4770      	bx	lr

080045e6 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80045ec:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 80045f0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	4770      	bx	lr

080045f8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80045f8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80045fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004600:	045b      	lsls	r3, r3, #17
 8004602:	0c5b      	lsrs	r3, r3, #17
 8004604:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8004608:	2000      	movs	r0, #0
 800460a:	4770      	bx	lr

0800460c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800460c:	2000      	movs	r0, #0
 800460e:	4770      	bx	lr

08004610 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004610:	b084      	sub	sp, #16
 8004612:	b410      	push	{r4}
 8004614:	ac02      	add	r4, sp, #8
 8004616:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800461a:	2301      	movs	r3, #1
 800461c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004626:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800462a:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50

  return HAL_OK;
}
 800462e:	4618      	mov	r0, r3
 8004630:	bc10      	pop	{r4}
 8004632:	b004      	add	sp, #16
 8004634:	4770      	bx	lr

08004636 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004636:	b430      	push	{r4, r5}
 8004638:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800463a:	780c      	ldrb	r4, [r1, #0]
 800463c:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8004640:	b292      	uxth	r2, r2
 8004642:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8004646:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800464a:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 800464c:	78c8      	ldrb	r0, [r1, #3]
 800464e:	2803      	cmp	r0, #3
 8004650:	d85a      	bhi.n	8004708 <USB_ActivateEndpoint+0xd2>
 8004652:	e8df f000 	tbb	[pc, r0]
 8004656:	554d      	.short	0x554d
 8004658:	5102      	.short	0x5102
  HAL_StatusTypeDef ret = HAL_OK;
 800465a:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800465c:	f248 0580 	movw	r5, #32896	; 0x8080
 8004660:	432a      	orrs	r2, r5
 8004662:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004666:	780c      	ldrb	r4, [r1, #0]
 8004668:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800466c:	b292      	uxth	r2, r2
 800466e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004672:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004676:	4322      	orrs	r2, r4
 8004678:	432a      	orrs	r2, r5
 800467a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  if (ep->doublebuffer == 0U)
 800467e:	7b0a      	ldrb	r2, [r1, #12]
 8004680:	2a00      	cmp	r2, #0
 8004682:	f040 80b1 	bne.w	80047e8 <USB_ActivateEndpoint+0x1b2>
  {
    if (ep->is_in != 0U)
 8004686:	784a      	ldrb	r2, [r1, #1]
 8004688:	2a00      	cmp	r2, #0
 800468a:	d04e      	beq.n	800472a <USB_ActivateEndpoint+0xf4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800468c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004690:	441a      	add	r2, r3
 8004692:	780c      	ldrb	r4, [r1, #0]
 8004694:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8004698:	88cc      	ldrh	r4, [r1, #6]
 800469a:	0864      	lsrs	r4, r4, #1
 800469c:	0064      	lsls	r4, r4, #1
 800469e:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046a2:	780c      	ldrb	r4, [r1, #0]
 80046a4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80046a8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80046ac:	d00c      	beq.n	80046c8 <USB_ActivateEndpoint+0x92>
 80046ae:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80046b2:	b292      	uxth	r2, r2
 80046b4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80046b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80046bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80046c4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80046c8:	78ca      	ldrb	r2, [r1, #3]
 80046ca:	2a01      	cmp	r2, #1
 80046cc:	d01e      	beq.n	800470c <USB_ActivateEndpoint+0xd6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046ce:	7809      	ldrb	r1, [r1, #0]
 80046d0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80046d4:	b292      	uxth	r2, r2
 80046d6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80046da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046de:	f082 0220 	eor.w	r2, r2, #32
 80046e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046ea:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80046ee:	e060      	b.n	80047b2 <USB_ActivateEndpoint+0x17c>
      wEpRegVal |= USB_EP_CONTROL;
 80046f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80046f4:	2000      	movs	r0, #0
      break;
 80046f6:	e7b1      	b.n	800465c <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 80046f8:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80046fc:	2000      	movs	r0, #0
      break;
 80046fe:	e7ad      	b.n	800465c <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004700:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8004704:	2000      	movs	r0, #0
      break;
 8004706:	e7a9      	b.n	800465c <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 8004708:	2001      	movs	r0, #1
 800470a:	e7a7      	b.n	800465c <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800470c:	7809      	ldrb	r1, [r1, #0]
 800470e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004712:	b292      	uxth	r2, r2
 8004714:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800471c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004720:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004724:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004728:	e043      	b.n	80047b2 <USB_ActivateEndpoint+0x17c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800472a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800472e:	441a      	add	r2, r3
 8004730:	780c      	ldrb	r4, [r1, #0]
 8004732:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8004736:	88cc      	ldrh	r4, [r1, #6]
 8004738:	0864      	lsrs	r4, r4, #1
 800473a:	0064      	lsls	r4, r4, #1
 800473c:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004740:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004744:	441a      	add	r2, r3
 8004746:	780c      	ldrb	r4, [r1, #0]
 8004748:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800474c:	690c      	ldr	r4, [r1, #16]
 800474e:	bb94      	cbnz	r4, 80047b6 <USB_ActivateEndpoint+0x180>
 8004750:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 8004754:	b2a4      	uxth	r4, r4
 8004756:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800475a:	b2a4      	uxth	r4, r4
 800475c:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8004760:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 8004764:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8004768:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800476c:	780c      	ldrb	r4, [r1, #0]
 800476e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004772:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004776:	d00c      	beq.n	8004792 <USB_ActivateEndpoint+0x15c>
 8004778:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800477c:	b292      	uxth	r2, r2
 800477e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004782:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004786:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800478a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800478e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004792:	7809      	ldrb	r1, [r1, #0]
 8004794:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004798:	b292      	uxth	r2, r2
 800479a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800479e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80047a2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80047a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047ae:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 80047b2:	bc30      	pop	{r4, r5}
 80047b4:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047b6:	2c3e      	cmp	r4, #62	; 0x3e
 80047b8:	d809      	bhi.n	80047ce <USB_ActivateEndpoint+0x198>
 80047ba:	0865      	lsrs	r5, r4, #1
 80047bc:	f014 0f01 	tst.w	r4, #1
 80047c0:	d000      	beq.n	80047c4 <USB_ActivateEndpoint+0x18e>
 80047c2:	3501      	adds	r5, #1
 80047c4:	02ad      	lsls	r5, r5, #10
 80047c6:	b2ad      	uxth	r5, r5
 80047c8:	f8a2 540c 	strh.w	r5, [r2, #1036]	; 0x40c
 80047cc:	e7ce      	b.n	800476c <USB_ActivateEndpoint+0x136>
 80047ce:	0965      	lsrs	r5, r4, #5
 80047d0:	f014 0f1f 	tst.w	r4, #31
 80047d4:	d100      	bne.n	80047d8 <USB_ActivateEndpoint+0x1a2>
 80047d6:	3d01      	subs	r5, #1
 80047d8:	ea6f 64c5 	mvn.w	r4, r5, lsl #27
 80047dc:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80047e0:	b2a4      	uxth	r4, r4
 80047e2:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 80047e6:	e7c1      	b.n	800476c <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80047e8:	780c      	ldrb	r4, [r1, #0]
 80047ea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80047ee:	b292      	uxth	r2, r2
 80047f0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80047f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80047f8:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80047fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004800:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004804:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004808:	441a      	add	r2, r3
 800480a:	780c      	ldrb	r4, [r1, #0]
 800480c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8004810:	890c      	ldrh	r4, [r1, #8]
 8004812:	0864      	lsrs	r4, r4, #1
 8004814:	0064      	lsls	r4, r4, #1
 8004816:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 800481a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800481e:	441a      	add	r2, r3
 8004820:	780c      	ldrb	r4, [r1, #0]
 8004822:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8004826:	894c      	ldrh	r4, [r1, #10]
 8004828:	0864      	lsrs	r4, r4, #1
 800482a:	0064      	lsls	r4, r4, #1
 800482c:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
    if (ep->is_in == 0U)
 8004830:	784a      	ldrb	r2, [r1, #1]
 8004832:	2a00      	cmp	r2, #0
 8004834:	d140      	bne.n	80048b8 <USB_ActivateEndpoint+0x282>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004836:	780c      	ldrb	r4, [r1, #0]
 8004838:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800483c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004840:	d00c      	beq.n	800485c <USB_ActivateEndpoint+0x226>
 8004842:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004846:	b292      	uxth	r2, r2
 8004848:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800484c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004850:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004858:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800485c:	780c      	ldrb	r4, [r1, #0]
 800485e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004862:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004866:	d00c      	beq.n	8004882 <USB_ActivateEndpoint+0x24c>
 8004868:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800486c:	b292      	uxth	r2, r2
 800486e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004872:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800487a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800487e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004882:	780d      	ldrb	r5, [r1, #0]
 8004884:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8004888:	b292      	uxth	r2, r2
 800488a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800488e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004892:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004896:	f248 0480 	movw	r4, #32896	; 0x8080
 800489a:	4322      	orrs	r2, r4
 800489c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048a0:	7809      	ldrb	r1, [r1, #0]
 80048a2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80048a6:	b292      	uxth	r2, r2
 80048a8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80048ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b0:	4322      	orrs	r2, r4
 80048b2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80048b6:	e77c      	b.n	80047b2 <USB_ActivateEndpoint+0x17c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048b8:	780c      	ldrb	r4, [r1, #0]
 80048ba:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80048be:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80048c2:	d00c      	beq.n	80048de <USB_ActivateEndpoint+0x2a8>
 80048c4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80048c8:	b292      	uxth	r2, r2
 80048ca:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80048ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80048d2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80048d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048da:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048de:	780c      	ldrb	r4, [r1, #0]
 80048e0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80048e4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80048e8:	d00c      	beq.n	8004904 <USB_ActivateEndpoint+0x2ce>
 80048ea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80048ee:	b292      	uxth	r2, r2
 80048f0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80048f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80048f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048fc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004900:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8004904:	78ca      	ldrb	r2, [r1, #3]
 8004906:	2a01      	cmp	r2, #1
 8004908:	d01e      	beq.n	8004948 <USB_ActivateEndpoint+0x312>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800490a:	780c      	ldrb	r4, [r1, #0]
 800490c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004910:	b292      	uxth	r2, r2
 8004912:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800491a:	f082 0220 	eor.w	r2, r2, #32
 800491e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004922:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004926:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800492a:	7809      	ldrb	r1, [r1, #0]
 800492c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004930:	b292      	uxth	r2, r2
 8004932:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004936:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800493a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800493e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004942:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004946:	e734      	b.n	80047b2 <USB_ActivateEndpoint+0x17c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004948:	780c      	ldrb	r4, [r1, #0]
 800494a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800494e:	b292      	uxth	r2, r2
 8004950:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004958:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800495c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004960:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8004964:	e7e1      	b.n	800492a <USB_ActivateEndpoint+0x2f4>

08004966 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004966:	7b0b      	ldrb	r3, [r1, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d146      	bne.n	80049fa <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 800496c:	784b      	ldrb	r3, [r1, #1]
 800496e:	b313      	cbz	r3, 80049b6 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004970:	780a      	ldrb	r2, [r1, #0]
 8004972:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004976:	f013 0f40 	tst.w	r3, #64	; 0x40
 800497a:	d00c      	beq.n	8004996 <USB_DeactivateEndpoint+0x30>
 800497c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004980:	b29b      	uxth	r3, r3
 8004982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800498e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004992:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004996:	780a      	ldrb	r2, [r1, #0]
 8004998:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800499c:	b29b      	uxth	r3, r3
 800499e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80049b2:	2000      	movs	r0, #0
 80049b4:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049b6:	780a      	ldrb	r2, [r1, #0]
 80049b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049bc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80049c0:	d00c      	beq.n	80049dc <USB_DeactivateEndpoint+0x76>
 80049c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049dc:	780a      	ldrb	r2, [r1, #0]
 80049de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80049f8:	e7db      	b.n	80049b2 <USB_DeactivateEndpoint+0x4c>
{
 80049fa:	b410      	push	{r4}
    if (ep->is_in == 0U)
 80049fc:	784b      	ldrb	r3, [r1, #1]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d14e      	bne.n	8004aa0 <USB_DeactivateEndpoint+0x13a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a02:	780a      	ldrb	r2, [r1, #0]
 8004a04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a08:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004a0c:	d00c      	beq.n	8004a28 <USB_DeactivateEndpoint+0xc2>
 8004a0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a28:	780a      	ldrb	r2, [r1, #0]
 8004a2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a2e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a32:	d00c      	beq.n	8004a4e <USB_DeactivateEndpoint+0xe8>
 8004a34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a4a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8004a4e:	780a      	ldrb	r2, [r1, #0]
 8004a50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a66:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a6a:	780b      	ldrb	r3, [r1, #0]
 8004a6c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004a70:	b292      	uxth	r2, r2
 8004a72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a7a:	f248 0480 	movw	r4, #32896	; 0x8080
 8004a7e:	4322      	orrs	r2, r4
 8004a80:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a84:	780a      	ldrb	r2, [r1, #0]
 8004a86:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a94:	4323      	orrs	r3, r4
 8004a96:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	bc10      	pop	{r4}
 8004a9e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aa0:	780a      	ldrb	r2, [r1, #0]
 8004aa2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004aa6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004aaa:	d00c      	beq.n	8004ac6 <USB_DeactivateEndpoint+0x160>
 8004aac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ac6:	780a      	ldrb	r2, [r1, #0]
 8004ac8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004acc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ad0:	d00c      	beq.n	8004aec <USB_DeactivateEndpoint+0x186>
 8004ad2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ae8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8004aec:	780a      	ldrb	r2, [r1, #0]
 8004aee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b08:	780b      	ldrb	r3, [r1, #0]
 8004b0a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b0e:	b292      	uxth	r2, r2
 8004b10:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b18:	f248 0480 	movw	r4, #32896	; 0x8080
 8004b1c:	4322      	orrs	r2, r4
 8004b1e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b22:	780a      	ldrb	r2, [r1, #0]
 8004b24:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b32:	4323      	orrs	r3, r4
 8004b34:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004b38:	e7af      	b.n	8004a9a <USB_DeactivateEndpoint+0x134>

08004b3a <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8004b3a:	784b      	ldrb	r3, [r1, #1]
 8004b3c:	b98b      	cbnz	r3, 8004b62 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004b3e:	780a      	ldrb	r2, [r1, #0]
 8004b40:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b5a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8004b5e:	2000      	movs	r0, #0
 8004b60:	4770      	bx	lr
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004b62:	780a      	ldrb	r2, [r1, #0]
 8004b64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b72:	f083 0310 	eor.w	r3, r3, #16
 8004b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004b82:	e7ec      	b.n	8004b5e <USB_EPSetStall+0x24>

08004b84 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004b84:	7b0b      	ldrb	r3, [r1, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d14b      	bne.n	8004c22 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8004b8a:	784b      	ldrb	r3, [r1, #1]
 8004b8c:	b333      	cbz	r3, 8004bdc <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b8e:	780a      	ldrb	r2, [r1, #0]
 8004b90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b94:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004b98:	d00c      	beq.n	8004bb4 <USB_EPClearStall+0x30>
 8004b9a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bb0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004bb4:	78cb      	ldrb	r3, [r1, #3]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d033      	beq.n	8004c22 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bba:	780a      	ldrb	r2, [r1, #0]
 8004bbc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bca:	f083 0320 	eor.w	r3, r3, #32
 8004bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004bda:	e022      	b.n	8004c22 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bdc:	780a      	ldrb	r2, [r1, #0]
 8004bde:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004be2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004be6:	d00c      	beq.n	8004c02 <USB_EPClearStall+0x7e>
 8004be8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c02:	780a      	ldrb	r2, [r1, #0]
 8004c04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8004c22:	2000      	movs	r0, #0
 8004c24:	4770      	bx	lr

08004c26 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004c26:	b911      	cbnz	r1, 8004c2e <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004c28:	2380      	movs	r3, #128	; 0x80
 8004c2a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8004c2e:	2000      	movs	r0, #0
 8004c30:	4770      	bx	lr

08004c32 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004c32:	2000      	movs	r0, #0
 8004c34:	4770      	bx	lr

08004c36 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004c36:	2000      	movs	r0, #0
 8004c38:	4770      	bx	lr

08004c3a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004c3a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8004c3e:	4770      	bx	lr

08004c40 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004c40:	2000      	movs	r0, #0
 8004c42:	4770      	bx	lr

08004c44 <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004c44:	3301      	adds	r3, #1
 8004c46:	085b      	lsrs	r3, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c48:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8004c4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8004c50:	b163      	cbz	r3, 8004c6c <USB_WritePMA+0x28>
{
 8004c52:	b410      	push	{r4}
  {
    temp1 = *pBuf;
 8004c54:	780c      	ldrb	r4, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004c56:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8004c58:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8004c5c:	f822 4b04 	strh.w	r4, [r2], #4

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8004c60:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8004c62:	3b01      	subs	r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1f5      	bne.n	8004c54 <USB_WritePMA+0x10>
  }
}
 8004c68:	bc10      	pop	{r4}
 8004c6a:	4770      	bx	lr
 8004c6c:	4770      	bx	lr

08004c6e <USB_EPStartXfer>:
{
 8004c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8004c70:	784a      	ldrb	r2, [r1, #1]
 8004c72:	2a01      	cmp	r2, #1
 8004c74:	d033      	beq.n	8004cde <USB_EPStartXfer+0x70>
    if (ep->doublebuffer == 0U)
 8004c76:	7b0b      	ldrb	r3, [r1, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f040 827c 	bne.w	8005176 <USB_EPStartXfer+0x508>
      if (ep->xfer_len > ep->maxpacket)
 8004c7e:	698b      	ldr	r3, [r1, #24]
 8004c80:	690a      	ldr	r2, [r1, #16]
 8004c82:	4293      	cmp	r3, r2
 8004c84:	f240 825a 	bls.w	800513c <USB_EPStartXfer+0x4ce>
        ep->xfer_len -= len;
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004c8c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004c90:	4403      	add	r3, r0
 8004c92:	780c      	ldrb	r4, [r1, #0]
 8004c94:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004c98:	2a00      	cmp	r2, #0
 8004c9a:	f040 8253 	bne.w	8005144 <USB_EPStartXfer+0x4d6>
 8004c9e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8004ca2:	b292      	uxth	r2, r2
 8004ca4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004ca8:	b292      	uxth	r2, r2
 8004caa:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004cae:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8004cb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cb6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004cba:	780a      	ldrb	r2, [r1, #0]
 8004cbc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  return HAL_OK;
 8004cda:	2000      	movs	r0, #0
}
 8004cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8004cde:	698e      	ldr	r6, [r1, #24]
 8004ce0:	690f      	ldr	r7, [r1, #16]
 8004ce2:	42be      	cmp	r6, r7
 8004ce4:	d900      	bls.n	8004ce8 <USB_EPStartXfer+0x7a>
      len = ep->maxpacket;
 8004ce6:	463e      	mov	r6, r7
 8004ce8:	460c      	mov	r4, r1
 8004cea:	4605      	mov	r5, r0
    if (ep->doublebuffer == 0U)
 8004cec:	7b0b      	ldrb	r3, [r1, #12]
 8004cee:	b31b      	cbz	r3, 8004d38 <USB_EPStartXfer+0xca>
      if (ep->type == EP_TYPE_BULK)
 8004cf0:	78cb      	ldrb	r3, [r1, #3]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d040      	beq.n	8004d78 <USB_EPStartXfer+0x10a>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004cf6:	780b      	ldrb	r3, [r1, #0]
 8004cf8:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 8004cfc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004d00:	f000 81d1 	beq.w	80050a6 <USB_EPStartXfer+0x438>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d04:	2a00      	cmp	r2, #0
 8004d06:	f040 81ae 	bne.w	8005066 <USB_EPStartXfer+0x3f8>
 8004d0a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004d0e:	4402      	add	r2, r0
 8004d10:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8004d14:	2e00      	cmp	r6, #0
 8004d16:	f040 818d 	bne.w	8005034 <USB_EPStartXfer+0x3c6>
 8004d1a:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8004d1e:	b292      	uxth	r2, r2
 8004d20:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004d24:	b292      	uxth	r2, r2
 8004d26:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004d2a:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8004d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d32:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004d36:	e19e      	b.n	8005076 <USB_EPStartXfer+0x408>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d38:	b2b6      	uxth	r6, r6
 8004d3a:	4633      	mov	r3, r6
 8004d3c:	88ca      	ldrh	r2, [r1, #6]
 8004d3e:	6949      	ldr	r1, [r1, #20]
 8004d40:	f7ff ff80 	bl	8004c44 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d44:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8004d48:	442b      	add	r3, r5
 8004d4a:	7822      	ldrb	r2, [r4, #0]
 8004d4c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004d50:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004d54:	7822      	ldrb	r2, [r4, #0]
 8004d56:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d64:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8004d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d70:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8004d74:	2000      	movs	r0, #0
 8004d76:	e7b1      	b.n	8004cdc <USB_EPStartXfer+0x6e>
        if (ep->xfer_len_db > ep->maxpacket)
 8004d78:	6a0b      	ldr	r3, [r1, #32]
 8004d7a:	429f      	cmp	r7, r3
 8004d7c:	f080 813e 	bcs.w	8004ffc <USB_EPStartXfer+0x38e>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004d80:	780a      	ldrb	r2, [r1, #0]
 8004d82:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d90:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d98:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8004d9c:	6a0b      	ldr	r3, [r1, #32]
 8004d9e:	1b9b      	subs	r3, r3, r6
 8004da0:	620b      	str	r3, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004da2:	780b      	ldrb	r3, [r1, #0]
 8004da4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004da8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004dac:	f000 8093 	beq.w	8004ed6 <USB_EPStartXfer+0x268>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004db0:	784a      	ldrb	r2, [r1, #1]
 8004db2:	bb6a      	cbnz	r2, 8004e10 <USB_EPStartXfer+0x1a2>
 8004db4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004db8:	4402      	add	r2, r0
 8004dba:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8004dbe:	b976      	cbnz	r6, 8004dde <USB_EPStartXfer+0x170>
 8004dc0:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8004dc4:	b292      	uxth	r2, r2
 8004dc6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004dca:	b292      	uxth	r2, r2
 8004dcc:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004dd0:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8004dd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dd8:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004ddc:	e01a      	b.n	8004e14 <USB_EPStartXfer+0x1a6>
 8004dde:	2e3e      	cmp	r6, #62	; 0x3e
 8004de0:	d809      	bhi.n	8004df6 <USB_EPStartXfer+0x188>
 8004de2:	0872      	lsrs	r2, r6, #1
 8004de4:	f016 0f01 	tst.w	r6, #1
 8004de8:	d000      	beq.n	8004dec <USB_EPStartXfer+0x17e>
 8004dea:	3201      	adds	r2, #1
 8004dec:	0292      	lsls	r2, r2, #10
 8004dee:	b292      	uxth	r2, r2
 8004df0:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004df4:	e00e      	b.n	8004e14 <USB_EPStartXfer+0x1a6>
 8004df6:	0972      	lsrs	r2, r6, #5
 8004df8:	f016 0f1f 	tst.w	r6, #31
 8004dfc:	d100      	bne.n	8004e00 <USB_EPStartXfer+0x192>
 8004dfe:	3a01      	subs	r2, #1
 8004e00:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8004e04:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004e08:	b292      	uxth	r2, r2
 8004e0a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004e0e:	e001      	b.n	8004e14 <USB_EPStartXfer+0x1a6>
 8004e10:	2a01      	cmp	r2, #1
 8004e12:	d027      	beq.n	8004e64 <USB_EPStartXfer+0x1f6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e14:	b2b3      	uxth	r3, r6
 8004e16:	8962      	ldrh	r2, [r4, #10]
 8004e18:	6961      	ldr	r1, [r4, #20]
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f7ff ff12 	bl	8004c44 <USB_WritePMA>
            ep->xfer_buff += len;
 8004e20:	6963      	ldr	r3, [r4, #20]
 8004e22:	4433      	add	r3, r6
 8004e24:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004e26:	6a23      	ldr	r3, [r4, #32]
 8004e28:	6922      	ldr	r2, [r4, #16]
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d923      	bls.n	8004e76 <USB_EPStartXfer+0x208>
              ep->xfer_len_db -= len;
 8004e2e:	1b9b      	subs	r3, r3, r6
 8004e30:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e32:	7863      	ldrb	r3, [r4, #1]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d13b      	bne.n	8004eb0 <USB_EPStartXfer+0x242>
 8004e38:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8004e3c:	442b      	add	r3, r5
 8004e3e:	7822      	ldrb	r2, [r4, #0]
 8004e40:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004e44:	b9de      	cbnz	r6, 8004e7e <USB_EPStartXfer+0x210>
 8004e46:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8004e4a:	b292      	uxth	r2, r2
 8004e4c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004e50:	b292      	uxth	r2, r2
 8004e52:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8004e56:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8004e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e5e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8004e62:	e027      	b.n	8004eb4 <USB_EPStartXfer+0x246>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e64:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004e68:	4402      	add	r2, r0
 8004e6a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8004e6e:	b2b2      	uxth	r2, r6
 8004e70:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004e74:	e7ce      	b.n	8004e14 <USB_EPStartXfer+0x1a6>
              ep->xfer_len_db = 0U;
 8004e76:	2200      	movs	r2, #0
 8004e78:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8004e7a:	461e      	mov	r6, r3
 8004e7c:	e7d9      	b.n	8004e32 <USB_EPStartXfer+0x1c4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e7e:	2e3e      	cmp	r6, #62	; 0x3e
 8004e80:	d809      	bhi.n	8004e96 <USB_EPStartXfer+0x228>
 8004e82:	0872      	lsrs	r2, r6, #1
 8004e84:	f016 0f01 	tst.w	r6, #1
 8004e88:	d000      	beq.n	8004e8c <USB_EPStartXfer+0x21e>
 8004e8a:	3201      	adds	r2, #1
 8004e8c:	0292      	lsls	r2, r2, #10
 8004e8e:	b292      	uxth	r2, r2
 8004e90:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8004e94:	e00e      	b.n	8004eb4 <USB_EPStartXfer+0x246>
 8004e96:	0972      	lsrs	r2, r6, #5
 8004e98:	f016 0f1f 	tst.w	r6, #31
 8004e9c:	d100      	bne.n	8004ea0 <USB_EPStartXfer+0x232>
 8004e9e:	3a01      	subs	r2, #1
 8004ea0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8004ea4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004ea8:	b292      	uxth	r2, r2
 8004eaa:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8004eae:	e001      	b.n	8004eb4 <USB_EPStartXfer+0x246>
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d006      	beq.n	8004ec2 <USB_EPStartXfer+0x254>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004eb4:	b2b3      	uxth	r3, r6
 8004eb6:	8922      	ldrh	r2, [r4, #8]
 8004eb8:	6961      	ldr	r1, [r4, #20]
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f7ff fec2 	bl	8004c44 <USB_WritePMA>
 8004ec0:	e748      	b.n	8004d54 <USB_EPStartXfer+0xe6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ec2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8004ec6:	442b      	add	r3, r5
 8004ec8:	7822      	ldrb	r2, [r4, #0]
 8004eca:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004ece:	b2b2      	uxth	r2, r6
 8004ed0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8004ed4:	e7ee      	b.n	8004eb4 <USB_EPStartXfer+0x246>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ed6:	784a      	ldrb	r2, [r1, #1]
 8004ed8:	bb6a      	cbnz	r2, 8004f36 <USB_EPStartXfer+0x2c8>
 8004eda:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004ede:	4402      	add	r2, r0
 8004ee0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8004ee4:	b976      	cbnz	r6, 8004f04 <USB_EPStartXfer+0x296>
 8004ee6:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8004eea:	b292      	uxth	r2, r2
 8004eec:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004ef0:	b292      	uxth	r2, r2
 8004ef2:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8004ef6:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8004efa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004efe:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8004f02:	e01a      	b.n	8004f3a <USB_EPStartXfer+0x2cc>
 8004f04:	2e3e      	cmp	r6, #62	; 0x3e
 8004f06:	d809      	bhi.n	8004f1c <USB_EPStartXfer+0x2ae>
 8004f08:	0872      	lsrs	r2, r6, #1
 8004f0a:	f016 0f01 	tst.w	r6, #1
 8004f0e:	d000      	beq.n	8004f12 <USB_EPStartXfer+0x2a4>
 8004f10:	3201      	adds	r2, #1
 8004f12:	0292      	lsls	r2, r2, #10
 8004f14:	b292      	uxth	r2, r2
 8004f16:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8004f1a:	e00e      	b.n	8004f3a <USB_EPStartXfer+0x2cc>
 8004f1c:	0972      	lsrs	r2, r6, #5
 8004f1e:	f016 0f1f 	tst.w	r6, #31
 8004f22:	d100      	bne.n	8004f26 <USB_EPStartXfer+0x2b8>
 8004f24:	3a01      	subs	r2, #1
 8004f26:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8004f2a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004f2e:	b292      	uxth	r2, r2
 8004f30:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8004f34:	e001      	b.n	8004f3a <USB_EPStartXfer+0x2cc>
 8004f36:	2a01      	cmp	r2, #1
 8004f38:	d027      	beq.n	8004f8a <USB_EPStartXfer+0x31c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f3a:	b2b3      	uxth	r3, r6
 8004f3c:	8922      	ldrh	r2, [r4, #8]
 8004f3e:	6961      	ldr	r1, [r4, #20]
 8004f40:	4628      	mov	r0, r5
 8004f42:	f7ff fe7f 	bl	8004c44 <USB_WritePMA>
            ep->xfer_buff += len;
 8004f46:	6963      	ldr	r3, [r4, #20]
 8004f48:	4433      	add	r3, r6
 8004f4a:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004f4c:	6a23      	ldr	r3, [r4, #32]
 8004f4e:	6922      	ldr	r2, [r4, #16]
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d923      	bls.n	8004f9c <USB_EPStartXfer+0x32e>
              ep->xfer_len_db -= len;
 8004f54:	1b9b      	subs	r3, r3, r6
 8004f56:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f58:	7863      	ldrb	r3, [r4, #1]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d13b      	bne.n	8004fd6 <USB_EPStartXfer+0x368>
 8004f5e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8004f62:	442b      	add	r3, r5
 8004f64:	7822      	ldrb	r2, [r4, #0]
 8004f66:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004f6a:	b9de      	cbnz	r6, 8004fa4 <USB_EPStartXfer+0x336>
 8004f6c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8004f70:	b292      	uxth	r2, r2
 8004f72:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004f76:	b292      	uxth	r2, r2
 8004f78:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004f7c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8004f80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f84:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004f88:	e027      	b.n	8004fda <USB_EPStartXfer+0x36c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f8a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004f8e:	4402      	add	r2, r0
 8004f90:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8004f94:	b2b2      	uxth	r2, r6
 8004f96:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8004f9a:	e7ce      	b.n	8004f3a <USB_EPStartXfer+0x2cc>
              ep->xfer_len_db = 0U;
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8004fa0:	461e      	mov	r6, r3
 8004fa2:	e7d9      	b.n	8004f58 <USB_EPStartXfer+0x2ea>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fa4:	2e3e      	cmp	r6, #62	; 0x3e
 8004fa6:	d809      	bhi.n	8004fbc <USB_EPStartXfer+0x34e>
 8004fa8:	0872      	lsrs	r2, r6, #1
 8004faa:	f016 0f01 	tst.w	r6, #1
 8004fae:	d000      	beq.n	8004fb2 <USB_EPStartXfer+0x344>
 8004fb0:	3201      	adds	r2, #1
 8004fb2:	0292      	lsls	r2, r2, #10
 8004fb4:	b292      	uxth	r2, r2
 8004fb6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004fba:	e00e      	b.n	8004fda <USB_EPStartXfer+0x36c>
 8004fbc:	0972      	lsrs	r2, r6, #5
 8004fbe:	f016 0f1f 	tst.w	r6, #31
 8004fc2:	d100      	bne.n	8004fc6 <USB_EPStartXfer+0x358>
 8004fc4:	3a01      	subs	r2, #1
 8004fc6:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8004fca:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004fce:	b292      	uxth	r2, r2
 8004fd0:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004fd4:	e001      	b.n	8004fda <USB_EPStartXfer+0x36c>
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d006      	beq.n	8004fe8 <USB_EPStartXfer+0x37a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fda:	b2b3      	uxth	r3, r6
 8004fdc:	8962      	ldrh	r2, [r4, #10]
 8004fde:	6961      	ldr	r1, [r4, #20]
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	f7ff fe2f 	bl	8004c44 <USB_WritePMA>
 8004fe6:	e6b5      	b.n	8004d54 <USB_EPStartXfer+0xe6>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fe8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8004fec:	442b      	add	r3, r5
 8004fee:	7822      	ldrb	r2, [r4, #0]
 8004ff0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004ff4:	b2b2      	uxth	r2, r6
 8004ff6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004ffa:	e7ee      	b.n	8004fda <USB_EPStartXfer+0x36c>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004ffc:	7809      	ldrb	r1, [r1, #0]
 8004ffe:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8005002:	b292      	uxth	r2, r2
 8005004:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8005008:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800500c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005010:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005014:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005018:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800501c:	4402      	add	r2, r0
 800501e:	7821      	ldrb	r1, [r4, #0]
 8005020:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005024:	b29b      	uxth	r3, r3
 8005026:	f8a2 3404 	strh.w	r3, [r2, #1028]	; 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800502a:	8922      	ldrh	r2, [r4, #8]
 800502c:	6961      	ldr	r1, [r4, #20]
 800502e:	f7ff fe09 	bl	8004c44 <USB_WritePMA>
 8005032:	e68f      	b.n	8004d54 <USB_EPStartXfer+0xe6>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005034:	2e3e      	cmp	r6, #62	; 0x3e
 8005036:	d809      	bhi.n	800504c <USB_EPStartXfer+0x3de>
 8005038:	0872      	lsrs	r2, r6, #1
 800503a:	f016 0f01 	tst.w	r6, #1
 800503e:	d000      	beq.n	8005042 <USB_EPStartXfer+0x3d4>
 8005040:	3201      	adds	r2, #1
 8005042:	0292      	lsls	r2, r2, #10
 8005044:	b292      	uxth	r2, r2
 8005046:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800504a:	e014      	b.n	8005076 <USB_EPStartXfer+0x408>
 800504c:	0972      	lsrs	r2, r6, #5
 800504e:	f016 0f1f 	tst.w	r6, #31
 8005052:	d100      	bne.n	8005056 <USB_EPStartXfer+0x3e8>
 8005054:	3a01      	subs	r2, #1
 8005056:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800505a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800505e:	b292      	uxth	r2, r2
 8005060:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005064:	e007      	b.n	8005076 <USB_EPStartXfer+0x408>
 8005066:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800506a:	4402      	add	r2, r0
 800506c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8005070:	b2b2      	uxth	r2, r6
 8005072:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
          pmabuffer = ep->pmaaddr1;
 8005076:	8962      	ldrh	r2, [r4, #10]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005078:	b2b3      	uxth	r3, r6
 800507a:	6961      	ldr	r1, [r4, #20]
 800507c:	4628      	mov	r0, r5
 800507e:	f7ff fde1 	bl	8004c44 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005082:	7863      	ldrb	r3, [r4, #1]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d147      	bne.n	8005118 <USB_EPStartXfer+0x4aa>
 8005088:	7822      	ldrb	r2, [r4, #0]
 800508a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800508e:	b29b      	uxth	r3, r3
 8005090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800509c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050a0:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80050a4:	e656      	b.n	8004d54 <USB_EPStartXfer+0xe6>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050a6:	bb6a      	cbnz	r2, 8005104 <USB_EPStartXfer+0x496>
 80050a8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80050ac:	4402      	add	r2, r0
 80050ae:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80050b2:	b976      	cbnz	r6, 80050d2 <USB_EPStartXfer+0x464>
 80050b4:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80050b8:	b292      	uxth	r2, r2
 80050ba:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80050be:	b292      	uxth	r2, r2
 80050c0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80050c4:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80050c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050cc:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80050d0:	e020      	b.n	8005114 <USB_EPStartXfer+0x4a6>
 80050d2:	2e3e      	cmp	r6, #62	; 0x3e
 80050d4:	d809      	bhi.n	80050ea <USB_EPStartXfer+0x47c>
 80050d6:	0872      	lsrs	r2, r6, #1
 80050d8:	f016 0f01 	tst.w	r6, #1
 80050dc:	d000      	beq.n	80050e0 <USB_EPStartXfer+0x472>
 80050de:	3201      	adds	r2, #1
 80050e0:	0292      	lsls	r2, r2, #10
 80050e2:	b292      	uxth	r2, r2
 80050e4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80050e8:	e014      	b.n	8005114 <USB_EPStartXfer+0x4a6>
 80050ea:	0972      	lsrs	r2, r6, #5
 80050ec:	f016 0f1f 	tst.w	r6, #31
 80050f0:	d100      	bne.n	80050f4 <USB_EPStartXfer+0x486>
 80050f2:	3a01      	subs	r2, #1
 80050f4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80050f8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80050fc:	b292      	uxth	r2, r2
 80050fe:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005102:	e007      	b.n	8005114 <USB_EPStartXfer+0x4a6>
 8005104:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005108:	4402      	add	r2, r0
 800510a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800510e:	b2b2      	uxth	r2, r6
 8005110:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
          pmabuffer = ep->pmaaddr0;
 8005114:	8922      	ldrh	r2, [r4, #8]
 8005116:	e7af      	b.n	8005078 <USB_EPStartXfer+0x40a>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005118:	2b01      	cmp	r3, #1
 800511a:	f47f ae1b 	bne.w	8004d54 <USB_EPStartXfer+0xe6>
 800511e:	7822      	ldrb	r2, [r4, #0]
 8005120:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005124:	b29b      	uxth	r3, r3
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005136:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800513a:	e60b      	b.n	8004d54 <USB_EPStartXfer+0xe6>
        ep->xfer_len = 0U;
 800513c:	2200      	movs	r2, #0
 800513e:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 8005140:	461a      	mov	r2, r3
 8005142:	e5a3      	b.n	8004c8c <USB_EPStartXfer+0x1e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005144:	2a3e      	cmp	r2, #62	; 0x3e
 8005146:	d809      	bhi.n	800515c <USB_EPStartXfer+0x4ee>
 8005148:	0854      	lsrs	r4, r2, #1
 800514a:	f012 0f01 	tst.w	r2, #1
 800514e:	d000      	beq.n	8005152 <USB_EPStartXfer+0x4e4>
 8005150:	3401      	adds	r4, #1
 8005152:	02a4      	lsls	r4, r4, #10
 8005154:	b2a4      	uxth	r4, r4
 8005156:	f8a3 440c 	strh.w	r4, [r3, #1036]	; 0x40c
 800515a:	e5ae      	b.n	8004cba <USB_EPStartXfer+0x4c>
 800515c:	0954      	lsrs	r4, r2, #5
 800515e:	f012 0f1f 	tst.w	r2, #31
 8005162:	d100      	bne.n	8005166 <USB_EPStartXfer+0x4f8>
 8005164:	3c01      	subs	r4, #1
 8005166:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 800516a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800516e:	b2a4      	uxth	r4, r4
 8005170:	f8a3 440c 	strh.w	r4, [r3, #1036]	; 0x40c
 8005174:	e5a1      	b.n	8004cba <USB_EPStartXfer+0x4c>
      if (ep->type == EP_TYPE_BULK)
 8005176:	78cb      	ldrb	r3, [r1, #3]
 8005178:	2b02      	cmp	r3, #2
 800517a:	d004      	beq.n	8005186 <USB_EPStartXfer+0x518>
      else if (ep->type == EP_TYPE_ISOC)
 800517c:	2b01      	cmp	r3, #1
 800517e:	f000 808e 	beq.w	800529e <USB_EPStartXfer+0x630>
        return HAL_ERROR;
 8005182:	2001      	movs	r0, #1
 8005184:	e5aa      	b.n	8004cdc <USB_EPStartXfer+0x6e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005186:	b9aa      	cbnz	r2, 80051b4 <USB_EPStartXfer+0x546>
 8005188:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800518c:	4403      	add	r3, r0
 800518e:	780a      	ldrb	r2, [r1, #0]
 8005190:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005194:	690a      	ldr	r2, [r1, #16]
 8005196:	bb3a      	cbnz	r2, 80051e8 <USB_EPStartXfer+0x57a>
 8005198:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 800519c:	b292      	uxth	r2, r2
 800519e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80051a2:	b292      	uxth	r2, r2
 80051a4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80051a8:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80051ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051b0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80051b4:	784b      	ldrb	r3, [r1, #1]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d148      	bne.n	800524c <USB_EPStartXfer+0x5de>
 80051ba:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80051be:	4403      	add	r3, r0
 80051c0:	780a      	ldrb	r2, [r1, #0]
 80051c2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80051c6:	690a      	ldr	r2, [r1, #16]
 80051c8:	bb3a      	cbnz	r2, 800521a <USB_EPStartXfer+0x5ac>
 80051ca:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80051ce:	b292      	uxth	r2, r2
 80051d0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80051d4:	b292      	uxth	r2, r2
 80051d6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80051da:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80051de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051e2:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80051e6:	e033      	b.n	8005250 <USB_EPStartXfer+0x5e2>
 80051e8:	2a3e      	cmp	r2, #62	; 0x3e
 80051ea:	d809      	bhi.n	8005200 <USB_EPStartXfer+0x592>
 80051ec:	0854      	lsrs	r4, r2, #1
 80051ee:	f012 0f01 	tst.w	r2, #1
 80051f2:	d000      	beq.n	80051f6 <USB_EPStartXfer+0x588>
 80051f4:	3401      	adds	r4, #1
 80051f6:	02a2      	lsls	r2, r4, #10
 80051f8:	b292      	uxth	r2, r2
 80051fa:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80051fe:	e7d9      	b.n	80051b4 <USB_EPStartXfer+0x546>
 8005200:	0954      	lsrs	r4, r2, #5
 8005202:	f012 0f1f 	tst.w	r2, #31
 8005206:	d100      	bne.n	800520a <USB_EPStartXfer+0x59c>
 8005208:	3c01      	subs	r4, #1
 800520a:	ea6f 62c4 	mvn.w	r2, r4, lsl #27
 800520e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005212:	b292      	uxth	r2, r2
 8005214:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8005218:	e7cc      	b.n	80051b4 <USB_EPStartXfer+0x546>
 800521a:	2a3e      	cmp	r2, #62	; 0x3e
 800521c:	d809      	bhi.n	8005232 <USB_EPStartXfer+0x5c4>
 800521e:	0854      	lsrs	r4, r2, #1
 8005220:	f012 0f01 	tst.w	r2, #1
 8005224:	d000      	beq.n	8005228 <USB_EPStartXfer+0x5ba>
 8005226:	3401      	adds	r4, #1
 8005228:	02a2      	lsls	r2, r4, #10
 800522a:	b292      	uxth	r2, r2
 800522c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005230:	e00e      	b.n	8005250 <USB_EPStartXfer+0x5e2>
 8005232:	0954      	lsrs	r4, r2, #5
 8005234:	f012 0f1f 	tst.w	r2, #31
 8005238:	d100      	bne.n	800523c <USB_EPStartXfer+0x5ce>
 800523a:	3c01      	subs	r4, #1
 800523c:	ea6f 62c4 	mvn.w	r2, r4, lsl #27
 8005240:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005244:	b292      	uxth	r2, r2
 8005246:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800524a:	e001      	b.n	8005250 <USB_EPStartXfer+0x5e2>
 800524c:	2b01      	cmp	r3, #1
 800524e:	d01c      	beq.n	800528a <USB_EPStartXfer+0x61c>
        if (ep->xfer_count != 0U)
 8005250:	69cb      	ldr	r3, [r1, #28]
 8005252:	2b00      	cmp	r3, #0
 8005254:	f43f ad31 	beq.w	8004cba <USB_EPStartXfer+0x4c>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005258:	780a      	ldrb	r2, [r1, #0]
 800525a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800525e:	f244 0440 	movw	r4, #16448	; 0x4040
 8005262:	4023      	ands	r3, r4
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005264:	42a3      	cmp	r3, r4
 8005266:	d002      	beq.n	800526e <USB_EPStartXfer+0x600>
 8005268:	2b00      	cmp	r3, #0
 800526a:	f47f ad26 	bne.w	8004cba <USB_EPStartXfer+0x4c>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800526e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005272:	b29b      	uxth	r3, r3
 8005274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005280:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005284:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005288:	e517      	b.n	8004cba <USB_EPStartXfer+0x4c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800528a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800528e:	4403      	add	r3, r0
 8005290:	780a      	ldrb	r2, [r1, #0]
 8005292:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005296:	8a0a      	ldrh	r2, [r1, #16]
 8005298:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800529c:	e7d8      	b.n	8005250 <USB_EPStartXfer+0x5e2>
        if (ep->xfer_len > ep->maxpacket)
 800529e:	698c      	ldr	r4, [r1, #24]
 80052a0:	690b      	ldr	r3, [r1, #16]
 80052a2:	429c      	cmp	r4, r3
 80052a4:	d930      	bls.n	8005308 <USB_EPStartXfer+0x69a>
          ep->xfer_len -= len;
 80052a6:	1ae4      	subs	r4, r4, r3
 80052a8:	618c      	str	r4, [r1, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80052aa:	b9a2      	cbnz	r2, 80052d6 <USB_EPStartXfer+0x668>
 80052ac:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80052b0:	4402      	add	r2, r0
 80052b2:	780c      	ldrb	r4, [r1, #0]
 80052b4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80052b8:	bb53      	cbnz	r3, 8005310 <USB_EPStartXfer+0x6a2>
 80052ba:	f8b2 4404 	ldrh.w	r4, [r2, #1028]	; 0x404
 80052be:	b2a4      	uxth	r4, r4
 80052c0:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80052c4:	b2a4      	uxth	r4, r4
 80052c6:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 80052ca:	f8b2 4404 	ldrh.w	r4, [r2, #1028]	; 0x404
 80052ce:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80052d2:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 80052d6:	784a      	ldrb	r2, [r1, #1]
 80052d8:	2a00      	cmp	r2, #0
 80052da:	d14b      	bne.n	8005374 <USB_EPStartXfer+0x706>
 80052dc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80052e0:	4402      	add	r2, r0
 80052e2:	780c      	ldrb	r4, [r1, #0]
 80052e4:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80052e8:	bb5b      	cbnz	r3, 8005342 <USB_EPStartXfer+0x6d4>
 80052ea:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 80052fa:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 80052fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005302:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8005306:	e4d8      	b.n	8004cba <USB_EPStartXfer+0x4c>
          ep->xfer_len = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	618b      	str	r3, [r1, #24]
          len = ep->xfer_len;
 800530c:	4623      	mov	r3, r4
 800530e:	e7cc      	b.n	80052aa <USB_EPStartXfer+0x63c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005310:	2b3e      	cmp	r3, #62	; 0x3e
 8005312:	d809      	bhi.n	8005328 <USB_EPStartXfer+0x6ba>
 8005314:	085c      	lsrs	r4, r3, #1
 8005316:	f013 0f01 	tst.w	r3, #1
 800531a:	d000      	beq.n	800531e <USB_EPStartXfer+0x6b0>
 800531c:	3401      	adds	r4, #1
 800531e:	02a4      	lsls	r4, r4, #10
 8005320:	b2a4      	uxth	r4, r4
 8005322:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 8005326:	e7d6      	b.n	80052d6 <USB_EPStartXfer+0x668>
 8005328:	095c      	lsrs	r4, r3, #5
 800532a:	f013 0f1f 	tst.w	r3, #31
 800532e:	d100      	bne.n	8005332 <USB_EPStartXfer+0x6c4>
 8005330:	3c01      	subs	r4, #1
 8005332:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8005336:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800533a:	b2a4      	uxth	r4, r4
 800533c:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 8005340:	e7c9      	b.n	80052d6 <USB_EPStartXfer+0x668>
 8005342:	2b3e      	cmp	r3, #62	; 0x3e
 8005344:	d809      	bhi.n	800535a <USB_EPStartXfer+0x6ec>
 8005346:	085c      	lsrs	r4, r3, #1
 8005348:	f013 0f01 	tst.w	r3, #1
 800534c:	d000      	beq.n	8005350 <USB_EPStartXfer+0x6e2>
 800534e:	3401      	adds	r4, #1
 8005350:	02a3      	lsls	r3, r4, #10
 8005352:	b29b      	uxth	r3, r3
 8005354:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8005358:	e4af      	b.n	8004cba <USB_EPStartXfer+0x4c>
 800535a:	095c      	lsrs	r4, r3, #5
 800535c:	f013 0f1f 	tst.w	r3, #31
 8005360:	d100      	bne.n	8005364 <USB_EPStartXfer+0x6f6>
 8005362:	3c01      	subs	r4, #1
 8005364:	ea6f 63c4 	mvn.w	r3, r4, lsl #27
 8005368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800536c:	b29b      	uxth	r3, r3
 800536e:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8005372:	e4a2      	b.n	8004cba <USB_EPStartXfer+0x4c>
 8005374:	2a01      	cmp	r2, #1
 8005376:	f47f aca0 	bne.w	8004cba <USB_EPStartXfer+0x4c>
 800537a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800537e:	4402      	add	r2, r0
 8005380:	780c      	ldrb	r4, [r1, #0]
 8005382:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8005386:	b29b      	uxth	r3, r3
 8005388:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 800538c:	e495      	b.n	8004cba <USB_EPStartXfer+0x4c>

0800538e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800538e:	b430      	push	{r4, r5}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005390:	085d      	lsrs	r5, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005392:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8005396:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800539a:	e007      	b.n	80053ac <USB_ReadPMA+0x1e>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800539c:	f832 4b04 	ldrh.w	r4, [r2], #4
 80053a0:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80053a2:	700c      	strb	r4, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80053a4:	0a24      	lsrs	r4, r4, #8
 80053a6:	704c      	strb	r4, [r1, #1]
    pBuf++;
 80053a8:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 80053aa:	3d01      	subs	r5, #1
 80053ac:	2d00      	cmp	r5, #0
 80053ae:	d1f5      	bne.n	800539c <USB_ReadPMA+0xe>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80053b0:	f013 0f01 	tst.w	r3, #1
 80053b4:	d001      	beq.n	80053ba <USB_ReadPMA+0x2c>
  {
    temp = *pdwVal;
 80053b6:	8813      	ldrh	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80053b8:	700b      	strb	r3, [r1, #0]
  }
}
 80053ba:	bc30      	pop	{r4, r5}
 80053bc:	4770      	bx	lr

080053be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80053be:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053c0:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80053c4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80053c8:	b15b      	cbz	r3, 80053e2 <USBD_CDC_EP0_RxReady+0x24>
 80053ca:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80053ce:	28ff      	cmp	r0, #255	; 0xff
 80053d0:	d007      	beq.n	80053e2 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80053d8:	4621      	mov	r1, r4
 80053da:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80053dc:	23ff      	movs	r3, #255	; 0xff
 80053de:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80053e2:	2000      	movs	r0, #0
 80053e4:	bd10      	pop	{r4, pc}

080053e6 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80053e6:	2343      	movs	r3, #67	; 0x43
 80053e8:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80053ea:	f240 102c 	movw	r0, #300	; 0x12c
 80053ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80053f2:	4770      	bx	lr

080053f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80053f4:	2343      	movs	r3, #67	; 0x43
 80053f6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80053f8:	f240 1070 	movw	r0, #368	; 0x170
 80053fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005400:	4770      	bx	lr

08005402 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005402:	2343      	movs	r3, #67	; 0x43
 8005404:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005406:	f240 10c0 	movw	r0, #448	; 0x1c0
 800540a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800540e:	4770      	bx	lr

08005410 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005410:	230a      	movs	r3, #10
 8005412:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8005414:	f240 10b4 	movw	r0, #436	; 0x1b4
 8005418:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800541c:	4770      	bx	lr

0800541e <USBD_CDC_DataOut>:
{
 800541e:	b538      	push	{r3, r4, r5, lr}
 8005420:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005422:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005426:	f001 f8b7 	bl	8006598 <USBD_LL_GetRxDataSize>
 800542a:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 800542e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005432:	b14b      	cbz	r3, 8005448 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005434:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800543e:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005442:	4798      	blx	r3
    return USBD_OK;
 8005444:	2000      	movs	r0, #0
}
 8005446:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005448:	2002      	movs	r0, #2
 800544a:	e7fc      	b.n	8005446 <USBD_CDC_DataOut+0x28>

0800544c <USBD_CDC_DataIn>:
{
 800544c:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800544e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005452:	f8d0 52c0 	ldr.w	r5, [r0, #704]	; 0x2c0
  if (pdev->pClassData != NULL)
 8005456:	b1fa      	cbz	r2, 8005498 <USBD_CDC_DataIn+0x4c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005458:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800545c:	00a3      	lsls	r3, r4, #2
 800545e:	4403      	add	r3, r0
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	b14b      	cbz	r3, 8005478 <USBD_CDC_DataIn+0x2c>
 8005464:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 8005468:	00f4      	lsls	r4, r6, #3
 800546a:	4425      	add	r5, r4
 800546c:	6bad      	ldr	r5, [r5, #56]	; 0x38
 800546e:	fbb3 f4f5 	udiv	r4, r3, r5
 8005472:	fb05 3314 	mls	r3, r5, r4, r3
 8005476:	b11b      	cbz	r3, 8005480 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 8005478:	2000      	movs	r0, #0
 800547a:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 800547e:	bd70      	pop	{r4, r5, r6, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8005480:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8005484:	0093      	lsls	r3, r2, #2
 8005486:	4403      	add	r3, r0
 8005488:	2400      	movs	r4, #0
 800548a:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800548c:	4623      	mov	r3, r4
 800548e:	4622      	mov	r2, r4
 8005490:	f001 f872 	bl	8006578 <USBD_LL_Transmit>
    return USBD_OK;
 8005494:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005496:	e7f2      	b.n	800547e <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8005498:	2002      	movs	r0, #2
 800549a:	e7f0      	b.n	800547e <USBD_CDC_DataIn+0x32>

0800549c <USBD_CDC_Setup>:
{
 800549c:	b570      	push	{r4, r5, r6, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	4605      	mov	r5, r0
 80054a2:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80054a4:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 80054ae:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054b2:	780b      	ldrb	r3, [r1, #0]
 80054b4:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 80054b8:	d027      	beq.n	800550a <USBD_CDC_Setup+0x6e>
 80054ba:	2a20      	cmp	r2, #32
 80054bc:	d156      	bne.n	800556c <USBD_CDC_Setup+0xd0>
      if (req->wLength)
 80054be:	88ca      	ldrh	r2, [r1, #6]
 80054c0:	b93a      	cbnz	r2, 80054d2 <USBD_CDC_Setup+0x36>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054c2:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2200      	movs	r2, #0
 80054ca:	7848      	ldrb	r0, [r1, #1]
 80054cc:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 80054ce:	2000      	movs	r0, #0
 80054d0:	e04f      	b.n	8005572 <USBD_CDC_Setup+0xd6>
        if (req->bmRequest & 0x80U)
 80054d2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80054d6:	d00c      	beq.n	80054f2 <USBD_CDC_Setup+0x56>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054d8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	4631      	mov	r1, r6
 80054e0:	7860      	ldrb	r0, [r4, #1]
 80054e2:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80054e4:	88e2      	ldrh	r2, [r4, #6]
 80054e6:	4631      	mov	r1, r6
 80054e8:	4628      	mov	r0, r5
 80054ea:	f000 fdb3 	bl	8006054 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80054ee:	2000      	movs	r0, #0
 80054f0:	e03f      	b.n	8005572 <USBD_CDC_Setup+0xd6>
          hcdc->CmdOpCode = req->bRequest;
 80054f2:	784b      	ldrb	r3, [r1, #1]
 80054f4:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80054f8:	798b      	ldrb	r3, [r1, #6]
 80054fa:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80054fe:	88ca      	ldrh	r2, [r1, #6]
 8005500:	4631      	mov	r1, r6
 8005502:	f000 fdbc 	bl	800607e <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8005506:	2000      	movs	r0, #0
 8005508:	e033      	b.n	8005572 <USBD_CDC_Setup+0xd6>
      switch (req->bRequest)
 800550a:	784b      	ldrb	r3, [r1, #1]
 800550c:	2b0a      	cmp	r3, #10
 800550e:	d014      	beq.n	800553a <USBD_CDC_Setup+0x9e>
 8005510:	2b0b      	cmp	r3, #11
 8005512:	d021      	beq.n	8005558 <USBD_CDC_Setup+0xbc>
 8005514:	b11b      	cbz	r3, 800551e <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8005516:	f000 fa77 	bl	8005a08 <USBD_CtlError>
          ret = USBD_FAIL;
 800551a:	2002      	movs	r0, #2
          break;
 800551c:	e029      	b.n	8005572 <USBD_CDC_Setup+0xd6>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800551e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005522:	2b03      	cmp	r3, #3
 8005524:	d105      	bne.n	8005532 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005526:	2202      	movs	r2, #2
 8005528:	a901      	add	r1, sp, #4
 800552a:	f000 fd93 	bl	8006054 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800552e:	2000      	movs	r0, #0
 8005530:	e01f      	b.n	8005572 <USBD_CDC_Setup+0xd6>
            USBD_CtlError(pdev, req);
 8005532:	f000 fa69 	bl	8005a08 <USBD_CtlError>
            ret = USBD_FAIL;
 8005536:	2002      	movs	r0, #2
 8005538:	e01b      	b.n	8005572 <USBD_CDC_Setup+0xd6>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800553a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800553e:	2b03      	cmp	r3, #3
 8005540:	d106      	bne.n	8005550 <USBD_CDC_Setup+0xb4>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005542:	2201      	movs	r2, #1
 8005544:	f10d 0107 	add.w	r1, sp, #7
 8005548:	f000 fd84 	bl	8006054 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800554c:	2000      	movs	r0, #0
 800554e:	e010      	b.n	8005572 <USBD_CDC_Setup+0xd6>
            USBD_CtlError(pdev, req);
 8005550:	f000 fa5a 	bl	8005a08 <USBD_CtlError>
            ret = USBD_FAIL;
 8005554:	2002      	movs	r0, #2
 8005556:	e00c      	b.n	8005572 <USBD_CDC_Setup+0xd6>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005558:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800555c:	2b03      	cmp	r3, #3
 800555e:	d101      	bne.n	8005564 <USBD_CDC_Setup+0xc8>
  uint8_t ret = USBD_OK;
 8005560:	2000      	movs	r0, #0
 8005562:	e006      	b.n	8005572 <USBD_CDC_Setup+0xd6>
            USBD_CtlError(pdev, req);
 8005564:	f000 fa50 	bl	8005a08 <USBD_CtlError>
            ret = USBD_FAIL;
 8005568:	2002      	movs	r0, #2
 800556a:	e002      	b.n	8005572 <USBD_CDC_Setup+0xd6>
      USBD_CtlError(pdev, req);
 800556c:	f000 fa4c 	bl	8005a08 <USBD_CtlError>
      ret = USBD_FAIL;
 8005570:	2002      	movs	r0, #2
}
 8005572:	b002      	add	sp, #8
 8005574:	bd70      	pop	{r4, r5, r6, pc}

08005576 <USBD_CDC_DeInit>:
{
 8005576:	b538      	push	{r3, r4, r5, lr}
 8005578:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800557a:	2181      	movs	r1, #129	; 0x81
 800557c:	f000 ffc5 	bl	800650a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005580:	2500      	movs	r5, #0
 8005582:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005584:	2101      	movs	r1, #1
 8005586:	4620      	mov	r0, r4
 8005588:	f000 ffbf 	bl	800650a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800558c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005590:	2182      	movs	r1, #130	; 0x82
 8005592:	4620      	mov	r0, r4
 8005594:	f000 ffb9 	bl	800650a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005598:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 800559a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800559e:	b14b      	cbz	r3, 80055b4 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80055a0:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80055a8:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 80055ac:	f000 ffff 	bl	80065ae <USBD_static_free>
    pdev->pClassData = NULL;
 80055b0:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 80055b4:	2000      	movs	r0, #0
 80055b6:	bd38      	pop	{r3, r4, r5, pc}

080055b8 <USBD_CDC_Init>:
{
 80055b8:	b538      	push	{r3, r4, r5, lr}
 80055ba:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055bc:	7c03      	ldrb	r3, [r0, #16]
 80055be:	bba3      	cbnz	r3, 800562a <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80055c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055c4:	2202      	movs	r2, #2
 80055c6:	2181      	movs	r1, #129	; 0x81
 80055c8:	f000 ff94 	bl	80064f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80055cc:	2501      	movs	r5, #1
 80055ce:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80055d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055d4:	2202      	movs	r2, #2
 80055d6:	4629      	mov	r1, r5
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 ff8b 	bl	80064f4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80055de:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80055e2:	2308      	movs	r3, #8
 80055e4:	2203      	movs	r2, #3
 80055e6:	2182      	movs	r1, #130	; 0x82
 80055e8:	4620      	mov	r0, r4
 80055ea:	f000 ff83 	bl	80064f4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80055ee:	2301      	movs	r3, #1
 80055f0:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80055f2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80055f6:	f000 ffd5 	bl	80065a4 <USBD_static_malloc>
 80055fa:	4605      	mov	r5, r0
 80055fc:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8005600:	b368      	cbz	r0, 800565e <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005602:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4798      	blx	r3
    hcdc->TxState = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8005610:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005614:	7c23      	ldrb	r3, [r4, #16]
 8005616:	b1c3      	cbz	r3, 800564a <USBD_CDC_Init+0x92>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005618:	2340      	movs	r3, #64	; 0x40
 800561a:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800561e:	2101      	movs	r1, #1
 8005620:	4620      	mov	r0, r4
 8005622:	f000 ffb1 	bl	8006588 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8005626:	2000      	movs	r0, #0
}
 8005628:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800562a:	2340      	movs	r3, #64	; 0x40
 800562c:	2202      	movs	r2, #2
 800562e:	2181      	movs	r1, #129	; 0x81
 8005630:	f000 ff60 	bl	80064f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005634:	2501      	movs	r5, #1
 8005636:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005638:	2340      	movs	r3, #64	; 0x40
 800563a:	2202      	movs	r2, #2
 800563c:	4629      	mov	r1, r5
 800563e:	4620      	mov	r0, r4
 8005640:	f000 ff58 	bl	80064f4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005644:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8005648:	e7cb      	b.n	80055e2 <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800564a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800564e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005652:	2101      	movs	r1, #1
 8005654:	4620      	mov	r0, r4
 8005656:	f000 ff97 	bl	8006588 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800565a:	2000      	movs	r0, #0
 800565c:	e7e4      	b.n	8005628 <USBD_CDC_Init+0x70>
    ret = 1U;
 800565e:	2001      	movs	r0, #1
 8005660:	e7e2      	b.n	8005628 <USBD_CDC_Init+0x70>

08005662 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8005662:	b119      	cbz	r1, 800566c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8005664:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8005668:	2000      	movs	r0, #0
 800566a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800566c:	2002      	movs	r0, #2
  }

  return ret;
}
 800566e:	4770      	bx	lr

08005670 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005670:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 8005674:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005678:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 800567c:	2000      	movs	r0, #0
 800567e:	4770      	bx	lr

08005680 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005680:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 8005684:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8005688:	2000      	movs	r0, #0
 800568a:	4770      	bx	lr

0800568c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800568c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 8005690:	b1a2      	cbz	r2, 80056bc <USBD_CDC_TransmitPacket+0x30>
{
 8005692:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 8005694:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8005698:	b10b      	cbz	r3, 800569e <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 800569a:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 800569c:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 800569e:	2301      	movs	r3, #1
 80056a0:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80056a4:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 80056a8:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80056aa:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 80056ae:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80056b2:	2181      	movs	r1, #129	; 0x81
 80056b4:	f000 ff60 	bl	8006578 <USBD_LL_Transmit>
      return USBD_OK;
 80056b8:	2000      	movs	r0, #0
 80056ba:	e7ef      	b.n	800569c <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 80056bc:	2002      	movs	r0, #2
}
 80056be:	4770      	bx	lr

080056c0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056c0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80056c4:	b19a      	cbz	r2, 80056ee <USBD_CDC_ReceivePacket+0x2e>
{
 80056c6:	b508      	push	{r3, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056c8:	7c03      	ldrb	r3, [r0, #16]
 80056ca:	b13b      	cbz	r3, 80056dc <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80056cc:	2340      	movs	r3, #64	; 0x40
 80056ce:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80056d2:	2101      	movs	r1, #1
 80056d4:	f000 ff58 	bl	8006588 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80056d8:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80056da:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 80056dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056e0:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80056e4:	2101      	movs	r1, #1
 80056e6:	f000 ff4f 	bl	8006588 <USBD_LL_PrepareReceive>
    return USBD_OK;
 80056ea:	2000      	movs	r0, #0
 80056ec:	e7f5      	b.n	80056da <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 80056ee:	2002      	movs	r0, #2
}
 80056f0:	4770      	bx	lr

080056f2 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80056f2:	b198      	cbz	r0, 800571c <USBD_Init+0x2a>
{
 80056f4:	b508      	push	{r3, lr}
 80056f6:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80056f8:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 80056fc:	b110      	cbz	r0, 8005704 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 80056fe:	2000      	movs	r0, #0
 8005700:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005704:	b109      	cbz	r1, 800570a <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8005706:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
 800570a:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800570c:	2301      	movs	r3, #1
 800570e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8005712:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005714:	f000 fea2 	bl	800645c <USBD_LL_Init>

  return USBD_OK;
 8005718:	2000      	movs	r0, #0
}
 800571a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800571c:	2002      	movs	r0, #2
}
 800571e:	4770      	bx	lr

08005720 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8005720:	b119      	cbz	r1, 800572a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005722:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8005726:	2000      	movs	r0, #0
 8005728:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800572a:	2002      	movs	r0, #2
  }

  return status;
}
 800572c:	4770      	bx	lr

0800572e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800572e:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005730:	f000 fed8 	bl	80064e4 <USBD_LL_Start>

  return USBD_OK;
}
 8005734:	2000      	movs	r0, #0
 8005736:	bd08      	pop	{r3, pc}

08005738 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005738:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800573a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800573e:	b133      	cbz	r3, 800574e <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4798      	blx	r3
 8005744:	b908      	cbnz	r0, 800574a <USBD_SetClassConfig+0x12>
    {
      ret = USBD_OK;
 8005746:	2000      	movs	r0, #0
    }
  }

  return ret;
}
 8005748:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800574a:	2002      	movs	r0, #2
 800574c:	e7fc      	b.n	8005748 <USBD_SetClassConfig+0x10>
 800574e:	2002      	movs	r0, #2
 8005750:	e7fa      	b.n	8005748 <USBD_SetClassConfig+0x10>

08005752 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005752:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005754:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4798      	blx	r3

  return USBD_OK;
}
 800575c:	2000      	movs	r0, #0
 800575e:	bd08      	pop	{r3, pc}

08005760 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005760:	b538      	push	{r3, r4, r5, lr}
 8005762:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005764:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8005768:	4628      	mov	r0, r5
 800576a:	f000 f939 	bl	80059e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800576e:	2301      	movs	r3, #1
 8005770:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005774:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8005778:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800577c:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8005780:	f001 031f 	and.w	r3, r1, #31
 8005784:	2b01      	cmp	r3, #1
 8005786:	d00e      	beq.n	80057a6 <USBD_LL_SetupStage+0x46>
 8005788:	b13b      	cbz	r3, 800579a <USBD_LL_SetupStage+0x3a>
 800578a:	2b02      	cmp	r3, #2
 800578c:	d010      	beq.n	80057b0 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800578e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005792:	4620      	mov	r0, r4
 8005794:	f000 fec1 	bl	800651a <USBD_LL_StallEP>
      break;
 8005798:	e003      	b.n	80057a2 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 800579a:	4629      	mov	r1, r5
 800579c:	4620      	mov	r0, r4
 800579e:	f000 fad2 	bl	8005d46 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80057a2:	2000      	movs	r0, #0
 80057a4:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80057a6:	4629      	mov	r1, r5
 80057a8:	4620      	mov	r0, r4
 80057aa:	f000 fb00 	bl	8005dae <USBD_StdItfReq>
      break;
 80057ae:	e7f8      	b.n	80057a2 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 80057b0:	4629      	mov	r1, r5
 80057b2:	4620      	mov	r0, r4
 80057b4:	f000 fb2b 	bl	8005e0e <USBD_StdEPReq>
      break;
 80057b8:	e7f3      	b.n	80057a2 <USBD_LL_SetupStage+0x42>

080057ba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80057ba:	b538      	push	{r3, r4, r5, lr}
 80057bc:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80057be:	bba1      	cbnz	r1, 800582a <USBD_LL_DataOutStage+0x70>
 80057c0:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80057c2:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d003      	beq.n	80057d2 <USBD_LL_DataOutStage+0x18>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80057ca:	2b05      	cmp	r3, #5
 80057cc:	d024      	beq.n	8005818 <USBD_LL_DataOutStage+0x5e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80057ce:	2000      	movs	r0, #0
 80057d0:	e037      	b.n	8005842 <USBD_LL_DataOutStage+0x88>
      if (pep->rem_length > pep->maxpacket)
 80057d2:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 80057d6:	f8d4 2164 	ldr.w	r2, [r4, #356]	; 0x164
 80057da:	4293      	cmp	r3, r2
 80057dc:	d90d      	bls.n	80057fa <USBD_LL_DataOutStage+0x40>
        pep->rem_length -= pep->maxpacket;
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d906      	bls.n	80057f6 <USBD_LL_DataOutStage+0x3c>
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	4601      	mov	r1, r0
 80057ec:	4620      	mov	r0, r4
 80057ee:	f000 fc55 	bl	800609c <USBD_CtlContinueRx>
  return USBD_OK;
 80057f2:	2000      	movs	r0, #0
 80057f4:	e025      	b.n	8005842 <USBD_LL_DataOutStage+0x88>
        USBD_CtlContinueRx(pdev, pdata,
 80057f6:	b292      	uxth	r2, r2
 80057f8:	e7f7      	b.n	80057ea <USBD_LL_DataOutStage+0x30>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80057fa:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	b12b      	cbz	r3, 800580e <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005802:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005806:	2a03      	cmp	r2, #3
 8005808:	d101      	bne.n	800580e <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 800580a:	4620      	mov	r0, r4
 800580c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800580e:	4620      	mov	r0, r4
 8005810:	f000 fc4c 	bl	80060ac <USBD_CtlSendStatus>
  return USBD_OK;
 8005814:	2000      	movs	r0, #0
 8005816:	e014      	b.n	8005842 <USBD_LL_DataOutStage+0x88>
        pdev->ep0_state = USBD_EP0_IDLE;
 8005818:	2500      	movs	r5, #0
 800581a:	f8c4 5294 	str.w	r5, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800581e:	4629      	mov	r1, r5
 8005820:	4620      	mov	r0, r4
 8005822:	f000 fe7a 	bl	800651a <USBD_LL_StallEP>
  return USBD_OK;
 8005826:	4628      	mov	r0, r5
 8005828:	e00b      	b.n	8005842 <USBD_LL_DataOutStage+0x88>
 800582a:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataOut != NULL) &&
 800582c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	b13b      	cbz	r3, 8005844 <USBD_LL_DataOutStage+0x8a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005834:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005838:	2903      	cmp	r1, #3
 800583a:	d105      	bne.n	8005848 <USBD_LL_DataOutStage+0x8e>
    pdev->pClass->DataOut(pdev, epnum);
 800583c:	4611      	mov	r1, r2
 800583e:	4798      	blx	r3
  return USBD_OK;
 8005840:	2000      	movs	r0, #0
}
 8005842:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005844:	2002      	movs	r0, #2
 8005846:	e7fc      	b.n	8005842 <USBD_LL_DataOutStage+0x88>
 8005848:	2002      	movs	r0, #2
 800584a:	e7fa      	b.n	8005842 <USBD_LL_DataOutStage+0x88>

0800584c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800584c:	b510      	push	{r4, lr}
 800584e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005850:	2900      	cmp	r1, #0
 8005852:	d153      	bne.n	80058fc <USBD_LL_DataInStage+0xb0>
 8005854:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005856:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800585a:	2b02      	cmp	r3, #2
 800585c:	d00c      	beq.n	8005878 <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800585e:	2b04      	cmp	r3, #4
 8005860:	d000      	beq.n	8005864 <USBD_LL_DataInStage+0x18>
 8005862:	b91b      	cbnz	r3, 800586c <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005864:	2180      	movs	r1, #128	; 0x80
 8005866:	4620      	mov	r0, r4
 8005868:	f000 fe57 	bl	800651a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800586c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8005870:	2b01      	cmp	r3, #1
 8005872:	d03f      	beq.n	80058f4 <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005874:	2000      	movs	r0, #0
 8005876:	e04d      	b.n	8005914 <USBD_LL_DataInStage+0xc8>
      if (pep->rem_length > pep->maxpacket)
 8005878:	6a23      	ldr	r3, [r4, #32]
 800587a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800587c:	4293      	cmp	r3, r2
 800587e:	d81d      	bhi.n	80058bc <USBD_LL_DataInStage+0x70>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005880:	69e1      	ldr	r1, [r4, #28]
 8005882:	fbb1 f3f2 	udiv	r3, r1, r2
 8005886:	fb02 1313 	mls	r3, r2, r3, r1
 800588a:	b92b      	cbnz	r3, 8005898 <USBD_LL_DataInStage+0x4c>
 800588c:	428a      	cmp	r2, r1
 800588e:	d803      	bhi.n	8005898 <USBD_LL_DataInStage+0x4c>
            (pep->total_length < pdev->ep0_data_len))
 8005890:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005894:	4299      	cmp	r1, r3
 8005896:	d31f      	bcc.n	80058d8 <USBD_LL_DataInStage+0x8c>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005898:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	b12b      	cbz	r3, 80058ac <USBD_LL_DataInStage+0x60>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058a0:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80058a4:	2a03      	cmp	r2, #3
 80058a6:	d101      	bne.n	80058ac <USBD_LL_DataInStage+0x60>
            pdev->pClass->EP0_TxSent(pdev);
 80058a8:	4620      	mov	r0, r4
 80058aa:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80058ac:	2180      	movs	r1, #128	; 0x80
 80058ae:	4620      	mov	r0, r4
 80058b0:	f000 fe33 	bl	800651a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80058b4:	4620      	mov	r0, r4
 80058b6:	f000 fc04 	bl	80060c2 <USBD_CtlReceiveStatus>
 80058ba:	e7d7      	b.n	800586c <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 80058bc:	1a9a      	subs	r2, r3, r2
 80058be:	6222      	str	r2, [r4, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80058c0:	b292      	uxth	r2, r2
 80058c2:	4601      	mov	r1, r0
 80058c4:	4620      	mov	r0, r4
 80058c6:	f000 fbd2 	bl	800606e <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058ca:	2300      	movs	r3, #0
 80058cc:	461a      	mov	r2, r3
 80058ce:	4619      	mov	r1, r3
 80058d0:	4620      	mov	r0, r4
 80058d2:	f000 fe59 	bl	8006588 <USBD_LL_PrepareReceive>
 80058d6:	e7c9      	b.n	800586c <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80058d8:	2200      	movs	r2, #0
 80058da:	4611      	mov	r1, r2
 80058dc:	4620      	mov	r0, r4
 80058de:	f000 fbc6 	bl	800606e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80058e2:	2100      	movs	r1, #0
 80058e4:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058e8:	460b      	mov	r3, r1
 80058ea:	460a      	mov	r2, r1
 80058ec:	4620      	mov	r0, r4
 80058ee:	f000 fe4b 	bl	8006588 <USBD_LL_PrepareReceive>
 80058f2:	e7bb      	b.n	800586c <USBD_LL_DataInStage+0x20>
      pdev->dev_test_mode = 0U;
 80058f4:	2000      	movs	r0, #0
 80058f6:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 80058fa:	e00b      	b.n	8005914 <USBD_LL_DataInStage+0xc8>
 80058fc:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataIn != NULL) &&
 80058fe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	b13b      	cbz	r3, 8005916 <USBD_LL_DataInStage+0xca>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005906:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800590a:	2903      	cmp	r1, #3
 800590c:	d105      	bne.n	800591a <USBD_LL_DataInStage+0xce>
    pdev->pClass->DataIn(pdev, epnum);
 800590e:	4611      	mov	r1, r2
 8005910:	4798      	blx	r3
  return USBD_OK;
 8005912:	2000      	movs	r0, #0
}
 8005914:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005916:	2002      	movs	r0, #2
 8005918:	e7fc      	b.n	8005914 <USBD_LL_DataInStage+0xc8>
 800591a:	2002      	movs	r0, #2
 800591c:	e7fa      	b.n	8005914 <USBD_LL_DataInStage+0xc8>

0800591e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800591e:	b570      	push	{r4, r5, r6, lr}
 8005920:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005922:	2340      	movs	r3, #64	; 0x40
 8005924:	2200      	movs	r2, #0
 8005926:	4611      	mov	r1, r2
 8005928:	f000 fde4 	bl	80064f4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800592c:	2501      	movs	r5, #1
 800592e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005932:	2640      	movs	r6, #64	; 0x40
 8005934:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005938:	4633      	mov	r3, r6
 800593a:	2200      	movs	r2, #0
 800593c:	2180      	movs	r1, #128	; 0x80
 800593e:	4620      	mov	r0, r4
 8005940:	f000 fdd8 	bl	80064f4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005944:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005946:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005948:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800594c:	2300      	movs	r3, #0
 800594e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8005952:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005954:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 8005958:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800595c:	b12b      	cbz	r3, 800596a <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800595e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2100      	movs	r1, #0
 8005966:	4620      	mov	r0, r4
 8005968:	4798      	blx	r3
  }

  return USBD_OK;
}
 800596a:	2000      	movs	r0, #0
 800596c:	bd70      	pop	{r4, r5, r6, pc}

0800596e <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800596e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005970:	2000      	movs	r0, #0
 8005972:	4770      	bx	lr

08005974 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005974:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005978:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800597c:	2304      	movs	r3, #4
 800597e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8005982:	2000      	movs	r0, #0
 8005984:	4770      	bx	lr

08005986 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005986:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800598a:	2b04      	cmp	r3, #4
 800598c:	d001      	beq.n	8005992 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800598e:	2000      	movs	r0, #0
 8005990:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8005992:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8005996:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800599a:	e7f8      	b.n	800598e <USBD_LL_Resume+0x8>

0800599c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800599c:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800599e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d001      	beq.n	80059aa <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80059a6:	2000      	movs	r0, #0
 80059a8:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80059aa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0f8      	beq.n	80059a6 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80059b4:	4798      	blx	r3
 80059b6:	e7f6      	b.n	80059a6 <USBD_LL_SOF+0xa>

080059b8 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
 80059b8:	2300      	movs	r3, #0

  while (*buf != '\0')
 80059ba:	e002      	b.n	80059c2 <USBD_GetLen+0xa>
  {
    len++;
 80059bc:	3301      	adds	r3, #1
 80059be:	b2db      	uxtb	r3, r3
    buf++;
 80059c0:	3001      	adds	r0, #1
  while (*buf != '\0')
 80059c2:	7802      	ldrb	r2, [r0, #0]
 80059c4:	2a00      	cmp	r2, #0
 80059c6:	d1f9      	bne.n	80059bc <USBD_GetLen+0x4>
  }

  return len;
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	4770      	bx	lr

080059cc <USBD_SetFeature>:
{
 80059cc:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80059ce:	884b      	ldrh	r3, [r1, #2]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d000      	beq.n	80059d6 <USBD_SetFeature+0xa>
}
 80059d4:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80059d6:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80059da:	f000 fb67 	bl	80060ac <USBD_CtlSendStatus>
}
 80059de:	e7f9      	b.n	80059d4 <USBD_SetFeature+0x8>

080059e0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80059e0:	780b      	ldrb	r3, [r1, #0]
 80059e2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80059e4:	784b      	ldrb	r3, [r1, #1]
 80059e6:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80059e8:	788b      	ldrb	r3, [r1, #2]
 80059ea:	78ca      	ldrb	r2, [r1, #3]
 80059ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80059f0:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80059f2:	790b      	ldrb	r3, [r1, #4]
 80059f4:	794a      	ldrb	r2, [r1, #5]
 80059f6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80059fa:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80059fc:	798b      	ldrb	r3, [r1, #6]
 80059fe:	79ca      	ldrb	r2, [r1, #7]
 8005a00:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005a04:	80c3      	strh	r3, [r0, #6]
}
 8005a06:	4770      	bx	lr

08005a08 <USBD_CtlError>:
{
 8005a08:	b510      	push	{r4, lr}
 8005a0a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005a0c:	2180      	movs	r1, #128	; 0x80
 8005a0e:	f000 fd84 	bl	800651a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005a12:	2100      	movs	r1, #0
 8005a14:	4620      	mov	r0, r4
 8005a16:	f000 fd80 	bl	800651a <USBD_LL_StallEP>
}
 8005a1a:	bd10      	pop	{r4, pc}

08005a1c <USBD_GetDescriptor>:
{
 8005a1c:	b530      	push	{r4, r5, lr}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	4605      	mov	r5, r0
 8005a22:	460c      	mov	r4, r1
  uint16_t len = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005a2a:	884a      	ldrh	r2, [r1, #2]
 8005a2c:	0a13      	lsrs	r3, r2, #8
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	2b06      	cmp	r3, #6
 8005a32:	f200 80a4 	bhi.w	8005b7e <USBD_GetDescriptor+0x162>
 8005a36:	e8df f003 	tbb	[pc, r3]
 8005a3a:	1804      	.short	0x1804
 8005a3c:	86a2a22c 	.word	0x86a2a22c
 8005a40:	93          	.byte	0x93
 8005a41:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a42:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f10d 0106 	add.w	r1, sp, #6
 8005a4c:	7c00      	ldrb	r0, [r0, #16]
 8005a4e:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8005a50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005a54:	b11a      	cbz	r2, 8005a5e <USBD_GetDescriptor+0x42>
 8005a56:	88e3      	ldrh	r3, [r4, #6]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f040 8094 	bne.w	8005b86 <USBD_GetDescriptor+0x16a>
    if (req->wLength == 0U)
 8005a5e:	88e3      	ldrh	r3, [r4, #6]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 809a 	beq.w	8005b9a <USBD_GetDescriptor+0x17e>
}
 8005a66:	b003      	add	sp, #12
 8005a68:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a6a:	7c03      	ldrb	r3, [r0, #16]
 8005a6c:	b943      	cbnz	r3, 8005a80 <USBD_GetDescriptor+0x64>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005a6e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a74:	f10d 0006 	add.w	r0, sp, #6
 8005a78:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	7043      	strb	r3, [r0, #1]
 8005a7e:	e7e7      	b.n	8005a50 <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005a80:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	f10d 0006 	add.w	r0, sp, #6
 8005a8a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	7043      	strb	r3, [r0, #1]
 8005a90:	e7de      	b.n	8005a50 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	2a05      	cmp	r2, #5
 8005a96:	d852      	bhi.n	8005b3e <USBD_GetDescriptor+0x122>
 8005a98:	e8df f002 	tbb	[pc, r2]
 8005a9c:	2a1d1003 	.word	0x2a1d1003
 8005aa0:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005aa2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	b123      	cbz	r3, 8005ab4 <USBD_GetDescriptor+0x98>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005aaa:	f10d 0106 	add.w	r1, sp, #6
 8005aae:	7c00      	ldrb	r0, [r0, #16]
 8005ab0:	4798      	blx	r3
 8005ab2:	e7cd      	b.n	8005a50 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	f7ff ffa7 	bl	8005a08 <USBD_CtlError>
 8005aba:	e7d4      	b.n	8005a66 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005abc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	b123      	cbz	r3, 8005ace <USBD_GetDescriptor+0xb2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005ac4:	f10d 0106 	add.w	r1, sp, #6
 8005ac8:	7c00      	ldrb	r0, [r0, #16]
 8005aca:	4798      	blx	r3
 8005acc:	e7c0      	b.n	8005a50 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8005ace:	4621      	mov	r1, r4
 8005ad0:	f7ff ff9a 	bl	8005a08 <USBD_CtlError>
 8005ad4:	e7c7      	b.n	8005a66 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005ad6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	b123      	cbz	r3, 8005ae8 <USBD_GetDescriptor+0xcc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005ade:	f10d 0106 	add.w	r1, sp, #6
 8005ae2:	7c00      	ldrb	r0, [r0, #16]
 8005ae4:	4798      	blx	r3
 8005ae6:	e7b3      	b.n	8005a50 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8005ae8:	4621      	mov	r1, r4
 8005aea:	f7ff ff8d 	bl	8005a08 <USBD_CtlError>
 8005aee:	e7ba      	b.n	8005a66 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005af0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	b123      	cbz	r3, 8005b02 <USBD_GetDescriptor+0xe6>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005af8:	f10d 0106 	add.w	r1, sp, #6
 8005afc:	7c00      	ldrb	r0, [r0, #16]
 8005afe:	4798      	blx	r3
 8005b00:	e7a6      	b.n	8005a50 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8005b02:	4621      	mov	r1, r4
 8005b04:	f7ff ff80 	bl	8005a08 <USBD_CtlError>
 8005b08:	e7ad      	b.n	8005a66 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b0a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	b123      	cbz	r3, 8005b1c <USBD_GetDescriptor+0x100>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b12:	f10d 0106 	add.w	r1, sp, #6
 8005b16:	7c00      	ldrb	r0, [r0, #16]
 8005b18:	4798      	blx	r3
 8005b1a:	e799      	b.n	8005a50 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	f7ff ff73 	bl	8005a08 <USBD_CtlError>
 8005b22:	e7a0      	b.n	8005a66 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b24:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	b123      	cbz	r3, 8005b36 <USBD_GetDescriptor+0x11a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005b2c:	f10d 0106 	add.w	r1, sp, #6
 8005b30:	7c00      	ldrb	r0, [r0, #16]
 8005b32:	4798      	blx	r3
 8005b34:	e78c      	b.n	8005a50 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8005b36:	4621      	mov	r1, r4
 8005b38:	f7ff ff66 	bl	8005a08 <USBD_CtlError>
 8005b3c:	e793      	b.n	8005a66 <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 8005b3e:	4621      	mov	r1, r4
 8005b40:	f7ff ff62 	bl	8005a08 <USBD_CtlError>
 8005b44:	e78f      	b.n	8005a66 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b46:	7c03      	ldrb	r3, [r0, #16]
 8005b48:	b933      	cbnz	r3, 8005b58 <USBD_GetDescriptor+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005b4a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b50:	f10d 0006 	add.w	r0, sp, #6
 8005b54:	4798      	blx	r3
 8005b56:	e77b      	b.n	8005a50 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8005b58:	4621      	mov	r1, r4
 8005b5a:	f7ff ff55 	bl	8005a08 <USBD_CtlError>
 8005b5e:	e782      	b.n	8005a66 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b60:	7c03      	ldrb	r3, [r0, #16]
 8005b62:	b943      	cbnz	r3, 8005b76 <USBD_GetDescriptor+0x15a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005b64:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	f10d 0006 	add.w	r0, sp, #6
 8005b6e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005b70:	2307      	movs	r3, #7
 8005b72:	7043      	strb	r3, [r0, #1]
 8005b74:	e76c      	b.n	8005a50 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8005b76:	4621      	mov	r1, r4
 8005b78:	f7ff ff46 	bl	8005a08 <USBD_CtlError>
 8005b7c:	e773      	b.n	8005a66 <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 8005b7e:	4621      	mov	r1, r4
 8005b80:	f7ff ff42 	bl	8005a08 <USBD_CtlError>
 8005b84:	e76f      	b.n	8005a66 <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 8005b86:	429a      	cmp	r2, r3
 8005b88:	bf28      	it	cs
 8005b8a:	461a      	movcs	r2, r3
 8005b8c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b90:	4601      	mov	r1, r0
 8005b92:	4628      	mov	r0, r5
 8005b94:	f000 fa5e 	bl	8006054 <USBD_CtlSendData>
 8005b98:	e761      	b.n	8005a5e <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	f000 fa86 	bl	80060ac <USBD_CtlSendStatus>
 8005ba0:	e761      	b.n	8005a66 <USBD_GetDescriptor+0x4a>

08005ba2 <USBD_SetAddress>:
{
 8005ba2:	b538      	push	{r3, r4, r5, lr}
 8005ba4:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005ba6:	888b      	ldrh	r3, [r1, #4]
 8005ba8:	b9f3      	cbnz	r3, 8005be8 <USBD_SetAddress+0x46>
 8005baa:	88cb      	ldrh	r3, [r1, #6]
 8005bac:	b9e3      	cbnz	r3, 8005be8 <USBD_SetAddress+0x46>
 8005bae:	884b      	ldrh	r3, [r1, #2]
 8005bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8005bb2:	d819      	bhi.n	8005be8 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005bb4:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d00c      	beq.n	8005bda <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8005bc0:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	f000 fccf 	bl	8006568 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f000 fa6e 	bl	80060ac <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005bd0:	b135      	cbz	r5, 8005be0 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005bd8:	e009      	b.n	8005bee <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8005bda:	f7ff ff15 	bl	8005a08 <USBD_CtlError>
 8005bde:	e006      	b.n	8005bee <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005be0:	2301      	movs	r3, #1
 8005be2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005be6:	e002      	b.n	8005bee <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8005be8:	4620      	mov	r0, r4
 8005bea:	f7ff ff0d 	bl	8005a08 <USBD_CtlError>
}
 8005bee:	bd38      	pop	{r3, r4, r5, pc}

08005bf0 <USBD_SetConfig>:
{
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 8005bf6:	7889      	ldrb	r1, [r1, #2]
 8005bf8:	f240 4359 	movw	r3, #1113	; 0x459
 8005bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c00:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005c02:	2901      	cmp	r1, #1
 8005c04:	d811      	bhi.n	8005c2a <USBD_SetConfig+0x3a>
    switch (pdev->dev_state)
 8005c06:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d011      	beq.n	8005c32 <USBD_SetConfig+0x42>
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d024      	beq.n	8005c5c <USBD_SetConfig+0x6c>
        USBD_CtlError(pdev, req);
 8005c12:	4629      	mov	r1, r5
 8005c14:	f7ff fef8 	bl	8005a08 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005c18:	f240 4359 	movw	r3, #1113	; 0x459
 8005c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c20:	7819      	ldrb	r1, [r3, #0]
 8005c22:	4620      	mov	r0, r4
 8005c24:	f7ff fd95 	bl	8005752 <USBD_ClrClassConfig>
        break;
 8005c28:	e002      	b.n	8005c30 <USBD_SetConfig+0x40>
    USBD_CtlError(pdev, req);
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	f7ff feec 	bl	8005a08 <USBD_CtlError>
}
 8005c30:	bd38      	pop	{r3, r4, r5, pc}
        if (cfgidx)
 8005c32:	b181      	cbz	r1, 8005c56 <USBD_SetConfig+0x66>
          pdev->dev_config = cfgidx;
 8005c34:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005c36:	2303      	movs	r3, #3
 8005c38:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005c3c:	f7ff fd7c 	bl	8005738 <USBD_SetClassConfig>
 8005c40:	2802      	cmp	r0, #2
 8005c42:	d003      	beq.n	8005c4c <USBD_SetConfig+0x5c>
          USBD_CtlSendStatus(pdev);
 8005c44:	4620      	mov	r0, r4
 8005c46:	f000 fa31 	bl	80060ac <USBD_CtlSendStatus>
 8005c4a:	e7f1      	b.n	8005c30 <USBD_SetConfig+0x40>
            USBD_CtlError(pdev, req);
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f7ff feda 	bl	8005a08 <USBD_CtlError>
            return;
 8005c54:	e7ec      	b.n	8005c30 <USBD_SetConfig+0x40>
          USBD_CtlSendStatus(pdev);
 8005c56:	f000 fa29 	bl	80060ac <USBD_CtlSendStatus>
 8005c5a:	e7e9      	b.n	8005c30 <USBD_SetConfig+0x40>
        if (cfgidx == 0U)
 8005c5c:	b1a1      	cbz	r1, 8005c88 <USBD_SetConfig+0x98>
        else if (cfgidx != pdev->dev_config)
 8005c5e:	6843      	ldr	r3, [r0, #4]
 8005c60:	4299      	cmp	r1, r3
 8005c62:	d020      	beq.n	8005ca6 <USBD_SetConfig+0xb6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c64:	b2d9      	uxtb	r1, r3
 8005c66:	f7ff fd74 	bl	8005752 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005c6a:	f240 4359 	movw	r3, #1113	; 0x459
 8005c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c72:	7819      	ldrb	r1, [r3, #0]
 8005c74:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005c76:	4620      	mov	r0, r4
 8005c78:	f7ff fd5e 	bl	8005738 <USBD_SetClassConfig>
 8005c7c:	2802      	cmp	r0, #2
 8005c7e:	d00d      	beq.n	8005c9c <USBD_SetConfig+0xac>
          USBD_CtlSendStatus(pdev);
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 fa13 	bl	80060ac <USBD_CtlSendStatus>
 8005c86:	e7d3      	b.n	8005c30 <USBD_SetConfig+0x40>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c88:	2302      	movs	r3, #2
 8005c8a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005c8e:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005c90:	f7ff fd5f 	bl	8005752 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005c94:	4620      	mov	r0, r4
 8005c96:	f000 fa09 	bl	80060ac <USBD_CtlSendStatus>
 8005c9a:	e7c9      	b.n	8005c30 <USBD_SetConfig+0x40>
            USBD_CtlError(pdev, req);
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	f7ff feb2 	bl	8005a08 <USBD_CtlError>
            return;
 8005ca4:	e7c4      	b.n	8005c30 <USBD_SetConfig+0x40>
          USBD_CtlSendStatus(pdev);
 8005ca6:	f000 fa01 	bl	80060ac <USBD_CtlSendStatus>
 8005caa:	e7c1      	b.n	8005c30 <USBD_SetConfig+0x40>

08005cac <USBD_GetConfig>:
{
 8005cac:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8005cae:	88cb      	ldrh	r3, [r1, #6]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d10b      	bne.n	8005ccc <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8005cb4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005cb8:	b19b      	cbz	r3, 8005ce2 <USBD_GetConfig+0x36>
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d909      	bls.n	8005cd2 <USBD_GetConfig+0x26>
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d10f      	bne.n	8005ce2 <USBD_GetConfig+0x36>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	1d01      	adds	r1, r0, #4
 8005cc6:	f000 f9c5 	bl	8006054 <USBD_CtlSendData>
        break;
 8005cca:	e001      	b.n	8005cd0 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8005ccc:	f7ff fe9c 	bl	8005a08 <USBD_CtlError>
}
 8005cd0:	bd08      	pop	{r3, pc}
        pdev->dev_default_config = 0U;
 8005cd2:	4601      	mov	r1, r0
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f000 f9ba 	bl	8006054 <USBD_CtlSendData>
        break;
 8005ce0:	e7f6      	b.n	8005cd0 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 8005ce2:	f7ff fe91 	bl	8005a08 <USBD_CtlError>
}
 8005ce6:	e7f3      	b.n	8005cd0 <USBD_GetConfig+0x24>

08005ce8 <USBD_GetStatus>:
{
 8005ce8:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8005cea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d812      	bhi.n	8005d1a <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8005cf4:	88cb      	ldrh	r3, [r1, #6]
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d10c      	bne.n	8005d14 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8005cfe:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8005d02:	b10b      	cbz	r3, 8005d08 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005d04:	2303      	movs	r3, #3
 8005d06:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005d08:	2202      	movs	r2, #2
 8005d0a:	f100 010c 	add.w	r1, r0, #12
 8005d0e:	f000 f9a1 	bl	8006054 <USBD_CtlSendData>
}
 8005d12:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8005d14:	f7ff fe78 	bl	8005a08 <USBD_CtlError>
        break;
 8005d18:	e7fb      	b.n	8005d12 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8005d1a:	f7ff fe75 	bl	8005a08 <USBD_CtlError>
}
 8005d1e:	e7f8      	b.n	8005d12 <USBD_GetStatus+0x2a>

08005d20 <USBD_ClrFeature>:
{
 8005d20:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8005d22:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005d26:	3b01      	subs	r3, #1
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d809      	bhi.n	8005d40 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005d2c:	884b      	ldrh	r3, [r1, #2]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d000      	beq.n	8005d34 <USBD_ClrFeature+0x14>
}
 8005d32:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005d3a:	f000 f9b7 	bl	80060ac <USBD_CtlSendStatus>
 8005d3e:	e7f8      	b.n	8005d32 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8005d40:	f7ff fe62 	bl	8005a08 <USBD_CtlError>
}
 8005d44:	e7f5      	b.n	8005d32 <USBD_ClrFeature+0x12>

08005d46 <USBD_StdDevReq>:
{
 8005d46:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d48:	780b      	ldrb	r3, [r1, #0]
 8005d4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d005      	beq.n	8005d5e <USBD_StdDevReq+0x18>
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d003      	beq.n	8005d5e <USBD_StdDevReq+0x18>
 8005d56:	b143      	cbz	r3, 8005d6a <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 8005d58:	f7ff fe56 	bl	8005a08 <USBD_CtlError>
      break;
 8005d5c:	e003      	b.n	8005d66 <USBD_StdDevReq+0x20>
      pdev->pClass->Setup(pdev, req);
 8005d5e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	4798      	blx	r3
}
 8005d66:	2000      	movs	r0, #0
 8005d68:	bd08      	pop	{r3, pc}
      switch (req->bRequest)
 8005d6a:	784b      	ldrb	r3, [r1, #1]
 8005d6c:	2b09      	cmp	r3, #9
 8005d6e:	d81b      	bhi.n	8005da8 <USBD_StdDevReq+0x62>
 8005d70:	e8df f003 	tbb	[pc, r3]
 8005d74:	141a1711 	.word	0x141a1711
 8005d78:	1a05081a 	.word	0x1a05081a
 8005d7c:	0b0e      	.short	0x0b0e
          USBD_GetDescriptor(pdev, req);
 8005d7e:	f7ff fe4d 	bl	8005a1c <USBD_GetDescriptor>
          break;
 8005d82:	e7f0      	b.n	8005d66 <USBD_StdDevReq+0x20>
          USBD_SetAddress(pdev, req);
 8005d84:	f7ff ff0d 	bl	8005ba2 <USBD_SetAddress>
          break;
 8005d88:	e7ed      	b.n	8005d66 <USBD_StdDevReq+0x20>
          USBD_SetConfig(pdev, req);
 8005d8a:	f7ff ff31 	bl	8005bf0 <USBD_SetConfig>
          break;
 8005d8e:	e7ea      	b.n	8005d66 <USBD_StdDevReq+0x20>
          USBD_GetConfig(pdev, req);
 8005d90:	f7ff ff8c 	bl	8005cac <USBD_GetConfig>
          break;
 8005d94:	e7e7      	b.n	8005d66 <USBD_StdDevReq+0x20>
          USBD_GetStatus(pdev, req);
 8005d96:	f7ff ffa7 	bl	8005ce8 <USBD_GetStatus>
          break;
 8005d9a:	e7e4      	b.n	8005d66 <USBD_StdDevReq+0x20>
          USBD_SetFeature(pdev, req);
 8005d9c:	f7ff fe16 	bl	80059cc <USBD_SetFeature>
          break;
 8005da0:	e7e1      	b.n	8005d66 <USBD_StdDevReq+0x20>
          USBD_ClrFeature(pdev, req);
 8005da2:	f7ff ffbd 	bl	8005d20 <USBD_ClrFeature>
          break;
 8005da6:	e7de      	b.n	8005d66 <USBD_StdDevReq+0x20>
          USBD_CtlError(pdev, req);
 8005da8:	f7ff fe2e 	bl	8005a08 <USBD_CtlError>
          break;
 8005dac:	e7db      	b.n	8005d66 <USBD_StdDevReq+0x20>

08005dae <USBD_StdItfReq>:
{
 8005dae:	b538      	push	{r3, r4, r5, lr}
 8005db0:	4605      	mov	r5, r0
 8005db2:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005db4:	780b      	ldrb	r3, [r1, #0]
 8005db6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d006      	beq.n	8005dcc <USBD_StdItfReq+0x1e>
 8005dbe:	2b40      	cmp	r3, #64	; 0x40
 8005dc0:	d004      	beq.n	8005dcc <USBD_StdItfReq+0x1e>
 8005dc2:	b11b      	cbz	r3, 8005dcc <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 8005dc4:	f7ff fe20 	bl	8005a08 <USBD_CtlError>
}
 8005dc8:	2000      	movs	r0, #0
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8005dcc:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d816      	bhi.n	8005e04 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005dd6:	7923      	ldrb	r3, [r4, #4]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d80e      	bhi.n	8005dfa <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ddc:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	4621      	mov	r1, r4
 8005de4:	4628      	mov	r0, r5
 8005de6:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005de8:	88e3      	ldrh	r3, [r4, #6]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1ec      	bne.n	8005dc8 <USBD_StdItfReq+0x1a>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d1ea      	bne.n	8005dc8 <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8005df2:	4628      	mov	r0, r5
 8005df4:	f000 f95a 	bl	80060ac <USBD_CtlSendStatus>
 8005df8:	e7e6      	b.n	8005dc8 <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8005dfa:	4621      	mov	r1, r4
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	f7ff fe03 	bl	8005a08 <USBD_CtlError>
 8005e02:	e7e1      	b.n	8005dc8 <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8005e04:	4621      	mov	r1, r4
 8005e06:	4628      	mov	r0, r5
 8005e08:	f7ff fdfe 	bl	8005a08 <USBD_CtlError>
          break;
 8005e0c:	e7dc      	b.n	8005dc8 <USBD_StdItfReq+0x1a>

08005e0e <USBD_StdEPReq>:
{
 8005e0e:	b538      	push	{r3, r4, r5, lr}
 8005e10:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8005e12:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e14:	780b      	ldrb	r3, [r1, #0]
 8005e16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e1a:	2b20      	cmp	r3, #32
 8005e1c:	d008      	beq.n	8005e30 <USBD_StdEPReq+0x22>
 8005e1e:	b2d0      	uxtb	r0, r2
 8005e20:	2b40      	cmp	r3, #64	; 0x40
 8005e22:	d005      	beq.n	8005e30 <USBD_StdEPReq+0x22>
 8005e24:	b15b      	cbz	r3, 8005e3e <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 8005e26:	4620      	mov	r0, r4
 8005e28:	f7ff fdee 	bl	8005a08 <USBD_CtlError>
  return ret;
 8005e2c:	2000      	movs	r0, #0
      break;
 8005e2e:	e005      	b.n	8005e3c <USBD_StdEPReq+0x2e>
      pdev->pClass->Setup(pdev, req);
 8005e30:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	4620      	mov	r0, r4
 8005e38:	4798      	blx	r3
  return ret;
 8005e3a:	2000      	movs	r0, #0
}
 8005e3c:	bd38      	pop	{r3, r4, r5, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	d105      	bne.n	8005e4e <USBD_StdEPReq+0x40>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e42:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	4620      	mov	r0, r4
 8005e4a:	4798      	blx	r3
        return ret;
 8005e4c:	e7f6      	b.n	8005e3c <USBD_StdEPReq+0x2e>
      switch (req->bRequest)
 8005e4e:	784b      	ldrb	r3, [r1, #1]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d032      	beq.n	8005eba <USBD_StdEPReq+0xac>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d05e      	beq.n	8005f16 <USBD_StdEPReq+0x108>
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	f040 80d8 	bne.w	800600e <USBD_StdEPReq+0x200>
          switch (pdev->dev_state)
 8005e5e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d006      	beq.n	8005e74 <USBD_StdEPReq+0x66>
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d016      	beq.n	8005e98 <USBD_StdEPReq+0x8a>
              USBD_CtlError(pdev, req);
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f7ff fdcc 	bl	8005a08 <USBD_CtlError>
  return ret;
 8005e70:	2000      	movs	r0, #0
              break;
 8005e72:	e7e3      	b.n	8005e3c <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e74:	b108      	cbz	r0, 8005e7a <USBD_StdEPReq+0x6c>
 8005e76:	2880      	cmp	r0, #128	; 0x80
 8005e78:	d104      	bne.n	8005e84 <USBD_StdEPReq+0x76>
                USBD_CtlError(pdev, req);
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f7ff fdc4 	bl	8005a08 <USBD_CtlError>
  return ret;
 8005e80:	2000      	movs	r0, #0
 8005e82:	e7db      	b.n	8005e3c <USBD_StdEPReq+0x2e>
                USBD_LL_StallEP(pdev, ep_addr);
 8005e84:	4601      	mov	r1, r0
 8005e86:	4620      	mov	r0, r4
 8005e88:	f000 fb47 	bl	800651a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005e8c:	2180      	movs	r1, #128	; 0x80
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 fb43 	bl	800651a <USBD_LL_StallEP>
  return ret;
 8005e94:	2000      	movs	r0, #0
                USBD_LL_StallEP(pdev, 0x80U);
 8005e96:	e7d1      	b.n	8005e3c <USBD_StdEPReq+0x2e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e98:	884b      	ldrh	r3, [r1, #2]
 8005e9a:	b923      	cbnz	r3, 8005ea6 <USBD_StdEPReq+0x98>
                if ((ep_addr != 0x00U) &&
 8005e9c:	b118      	cbz	r0, 8005ea6 <USBD_StdEPReq+0x98>
 8005e9e:	2880      	cmp	r0, #128	; 0x80
 8005ea0:	d001      	beq.n	8005ea6 <USBD_StdEPReq+0x98>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ea2:	88cb      	ldrh	r3, [r1, #6]
 8005ea4:	b123      	cbz	r3, 8005eb0 <USBD_StdEPReq+0xa2>
              USBD_CtlSendStatus(pdev);
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f000 f900 	bl	80060ac <USBD_CtlSendStatus>
  return ret;
 8005eac:	2000      	movs	r0, #0
              break;
 8005eae:	e7c5      	b.n	8005e3c <USBD_StdEPReq+0x2e>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005eb0:	4601      	mov	r1, r0
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f000 fb31 	bl	800651a <USBD_LL_StallEP>
 8005eb8:	e7f5      	b.n	8005ea6 <USBD_StdEPReq+0x98>
          switch (pdev->dev_state)
 8005eba:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d006      	beq.n	8005ed0 <USBD_StdEPReq+0xc2>
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d016      	beq.n	8005ef4 <USBD_StdEPReq+0xe6>
              USBD_CtlError(pdev, req);
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f7ff fd9e 	bl	8005a08 <USBD_CtlError>
  return ret;
 8005ecc:	2000      	movs	r0, #0
              break;
 8005ece:	e7b5      	b.n	8005e3c <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ed0:	b108      	cbz	r0, 8005ed6 <USBD_StdEPReq+0xc8>
 8005ed2:	2880      	cmp	r0, #128	; 0x80
 8005ed4:	d104      	bne.n	8005ee0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f7ff fd96 	bl	8005a08 <USBD_CtlError>
  return ret;
 8005edc:	2000      	movs	r0, #0
 8005ede:	e7ad      	b.n	8005e3c <USBD_StdEPReq+0x2e>
                USBD_LL_StallEP(pdev, ep_addr);
 8005ee0:	4601      	mov	r1, r0
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 fb19 	bl	800651a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005ee8:	2180      	movs	r1, #128	; 0x80
 8005eea:	4620      	mov	r0, r4
 8005eec:	f000 fb15 	bl	800651a <USBD_LL_StallEP>
  return ret;
 8005ef0:	2000      	movs	r0, #0
                USBD_LL_StallEP(pdev, 0x80U);
 8005ef2:	e7a3      	b.n	8005e3c <USBD_StdEPReq+0x2e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ef4:	884b      	ldrh	r3, [r1, #2]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f040 808e 	bne.w	8006018 <USBD_StdEPReq+0x20a>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005efc:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8005f00:	d104      	bne.n	8005f0c <USBD_StdEPReq+0xfe>
                USBD_CtlSendStatus(pdev);
 8005f02:	4620      	mov	r0, r4
 8005f04:	f000 f8d2 	bl	80060ac <USBD_CtlSendStatus>
  return ret;
 8005f08:	2000      	movs	r0, #0
 8005f0a:	e797      	b.n	8005e3c <USBD_StdEPReq+0x2e>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f0c:	4601      	mov	r1, r0
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f000 fb0b 	bl	800652a <USBD_LL_ClearStallEP>
 8005f14:	e7f5      	b.n	8005f02 <USBD_StdEPReq+0xf4>
          switch (pdev->dev_state)
 8005f16:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d006      	beq.n	8005f2c <USBD_StdEPReq+0x11e>
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d02a      	beq.n	8005f78 <USBD_StdEPReq+0x16a>
              USBD_CtlError(pdev, req);
 8005f22:	4620      	mov	r0, r4
 8005f24:	f7ff fd70 	bl	8005a08 <USBD_CtlError>
  return ret;
 8005f28:	2000      	movs	r0, #0
              break;
 8005f2a:	e787      	b.n	8005e3c <USBD_StdEPReq+0x2e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f2c:	b108      	cbz	r0, 8005f32 <USBD_StdEPReq+0x124>
 8005f2e:	2880      	cmp	r0, #128	; 0x80
 8005f30:	d113      	bne.n	8005f5a <USBD_StdEPReq+0x14c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f32:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005f36:	d115      	bne.n	8005f64 <USBD_StdEPReq+0x156>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f38:	f000 007f 	and.w	r0, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f40:	0083      	lsls	r3, r0, #2
 8005f42:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 8005f46:	4421      	add	r1, r4
 8005f48:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8005f4a:	2500      	movs	r5, #0
 8005f4c:	600d      	str	r5, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005f4e:	2202      	movs	r2, #2
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 f87f 	bl	8006054 <USBD_CtlSendData>
  return ret;
 8005f56:	4628      	mov	r0, r5
              break;
 8005f58:	e770      	b.n	8005e3c <USBD_StdEPReq+0x2e>
                USBD_CtlError(pdev, req);
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f7ff fd54 	bl	8005a08 <USBD_CtlError>
  return ret;
 8005f60:	2000      	movs	r0, #0
                break;
 8005f62:	e76b      	b.n	8005e3c <USBD_StdEPReq+0x2e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f64:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005f68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f6c:	0083      	lsls	r3, r0, #2
 8005f6e:	f103 0110 	add.w	r1, r3, #16
 8005f72:	4421      	add	r1, r4
 8005f74:	3104      	adds	r1, #4
 8005f76:	e7e8      	b.n	8005f4a <USBD_StdEPReq+0x13c>
              if ((ep_addr & 0x80U) == 0x80U)
 8005f78:	b252      	sxtb	r2, r2
 8005f7a:	2a00      	cmp	r2, #0
 8005f7c:	db1f      	blt.n	8005fbe <USBD_StdEPReq+0x1b0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005f7e:	f000 030f 	and.w	r3, r0, #15
 8005f82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f86:	009d      	lsls	r5, r3, #2
 8005f88:	4425      	add	r5, r4
 8005f8a:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
 8005f8e:	b323      	cbz	r3, 8005fda <USBD_StdEPReq+0x1cc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f90:	2a00      	cmp	r2, #0
 8005f92:	db27      	blt.n	8005fe4 <USBD_StdEPReq+0x1d6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f94:	f000 027f 	and.w	r2, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f98:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005f9c:	0093      	lsls	r3, r2, #2
 8005f9e:	f503 75a8 	add.w	r5, r3, #336	; 0x150
 8005fa2:	4425      	add	r5, r4
 8005fa4:	3504      	adds	r5, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005fa6:	b108      	cbz	r0, 8005fac <USBD_StdEPReq+0x19e>
 8005fa8:	2880      	cmp	r0, #128	; 0x80
 8005faa:	d125      	bne.n	8005ff8 <USBD_StdEPReq+0x1ea>
                pep->status = 0x0000U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f000 f84d 	bl	8006054 <USBD_CtlSendData>
  return ret;
 8005fba:	2000      	movs	r0, #0
              break;
 8005fbc:	e73e      	b.n	8005e3c <USBD_StdEPReq+0x2e>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005fbe:	f000 030f 	and.w	r3, r0, #15
 8005fc2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005fc6:	009d      	lsls	r5, r3, #2
 8005fc8:	4425      	add	r5, r4
 8005fca:	69ab      	ldr	r3, [r5, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1df      	bne.n	8005f90 <USBD_StdEPReq+0x182>
                  USBD_CtlError(pdev, req);
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f7ff fd19 	bl	8005a08 <USBD_CtlError>
  return ret;
 8005fd6:	2000      	movs	r0, #0
                  break;
 8005fd8:	e730      	b.n	8005e3c <USBD_StdEPReq+0x2e>
                  USBD_CtlError(pdev, req);
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f7ff fd14 	bl	8005a08 <USBD_CtlError>
  return ret;
 8005fe0:	2000      	movs	r0, #0
                  break;
 8005fe2:	e72b      	b.n	8005e3c <USBD_StdEPReq+0x2e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fe4:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8005fe8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005fec:	0093      	lsls	r3, r2, #2
 8005fee:	f103 0510 	add.w	r5, r3, #16
 8005ff2:	4425      	add	r5, r4
 8005ff4:	3504      	adds	r5, #4
 8005ff6:	e7d6      	b.n	8005fa6 <USBD_StdEPReq+0x198>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005ff8:	4601      	mov	r1, r0
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f000 fa9d 	bl	800653a <USBD_LL_IsStallEP>
 8006000:	b110      	cbz	r0, 8006008 <USBD_StdEPReq+0x1fa>
                pep->status = 0x0001U;
 8006002:	2301      	movs	r3, #1
 8006004:	602b      	str	r3, [r5, #0]
 8006006:	e7d3      	b.n	8005fb0 <USBD_StdEPReq+0x1a2>
                pep->status = 0x0000U;
 8006008:	2300      	movs	r3, #0
 800600a:	602b      	str	r3, [r5, #0]
 800600c:	e7d0      	b.n	8005fb0 <USBD_StdEPReq+0x1a2>
          USBD_CtlError(pdev, req);
 800600e:	4620      	mov	r0, r4
 8006010:	f7ff fcfa 	bl	8005a08 <USBD_CtlError>
  return ret;
 8006014:	2000      	movs	r0, #0
          break;
 8006016:	e711      	b.n	8005e3c <USBD_StdEPReq+0x2e>
  return ret;
 8006018:	2000      	movs	r0, #0
 800601a:	e70f      	b.n	8005e3c <USBD_StdEPReq+0x2e>

0800601c <USBD_GetString>:
  if (desc != NULL)
 800601c:	b1c8      	cbz	r0, 8006052 <USBD_GetString+0x36>
{
 800601e:	b570      	push	{r4, r5, r6, lr}
 8006020:	460d      	mov	r5, r1
 8006022:	4616      	mov	r6, r2
 8006024:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006026:	f7ff fcc7 	bl	80059b8 <USBD_GetLen>
 800602a:	3001      	adds	r0, #1
 800602c:	0040      	lsls	r0, r0, #1
 800602e:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006030:	7028      	strb	r0, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006032:	2303      	movs	r3, #3
 8006034:	706b      	strb	r3, [r5, #1]
 8006036:	2302      	movs	r3, #2
    while (*desc != '\0')
 8006038:	e007      	b.n	800604a <USBD_GetString+0x2e>
      unicode[idx++] = *desc++;
 800603a:	3401      	adds	r4, #1
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	b2d2      	uxtb	r2, r2
 8006040:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0U;
 8006042:	3302      	adds	r3, #2
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2100      	movs	r1, #0
 8006048:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 800604a:	7821      	ldrb	r1, [r4, #0]
 800604c:	2900      	cmp	r1, #0
 800604e:	d1f4      	bne.n	800603a <USBD_GetString+0x1e>
}
 8006050:	bd70      	pop	{r4, r5, r6, pc}
 8006052:	4770      	bx	lr

08006054 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006054:	b510      	push	{r4, lr}
 8006056:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006058:	2202      	movs	r2, #2
 800605a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800605e:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8006060:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006062:	460a      	mov	r2, r1
 8006064:	2100      	movs	r1, #0
 8006066:	f000 fa87 	bl	8006578 <USBD_LL_Transmit>

  return USBD_OK;
}
 800606a:	2000      	movs	r0, #0
 800606c:	bd10      	pop	{r4, pc}

0800606e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800606e:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006070:	4613      	mov	r3, r2
 8006072:	460a      	mov	r2, r1
 8006074:	2100      	movs	r1, #0
 8006076:	f000 fa7f 	bl	8006578 <USBD_LL_Transmit>

  return USBD_OK;
}
 800607a:	2000      	movs	r0, #0
 800607c:	bd08      	pop	{r3, pc}

0800607e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800607e:	b510      	push	{r4, lr}
 8006080:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006082:	2203      	movs	r2, #3
 8006084:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006088:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800608c:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006090:	460a      	mov	r2, r1
 8006092:	2100      	movs	r1, #0
 8006094:	f000 fa78 	bl	8006588 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006098:	2000      	movs	r0, #0
 800609a:	bd10      	pop	{r4, pc}

0800609c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800609c:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800609e:	4613      	mov	r3, r2
 80060a0:	460a      	mov	r2, r1
 80060a2:	2100      	movs	r1, #0
 80060a4:	f000 fa70 	bl	8006588 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80060a8:	2000      	movs	r0, #0
 80060aa:	bd08      	pop	{r3, pc}

080060ac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80060ac:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80060ae:	2304      	movs	r3, #4
 80060b0:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80060b4:	2300      	movs	r3, #0
 80060b6:	461a      	mov	r2, r3
 80060b8:	4619      	mov	r1, r3
 80060ba:	f000 fa5d 	bl	8006578 <USBD_LL_Transmit>

  return USBD_OK;
}
 80060be:	2000      	movs	r0, #0
 80060c0:	bd08      	pop	{r3, pc}

080060c2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80060c2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80060c4:	2305      	movs	r3, #5
 80060c6:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060ca:	2300      	movs	r3, #0
 80060cc:	461a      	mov	r2, r3
 80060ce:	4619      	mov	r1, r3
 80060d0:	f000 fa5a 	bl	8006588 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80060d4:	2000      	movs	r0, #0
 80060d6:	bd08      	pop	{r3, pc}

080060d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80060d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80060da:	2200      	movs	r2, #0
 80060dc:	f240 2114 	movw	r1, #532	; 0x214
 80060e0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80060e4:	f240 7064 	movw	r0, #1892	; 0x764
 80060e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80060ec:	f7ff fb01 	bl	80056f2 <USBD_Init>
 80060f0:	b9e8      	cbnz	r0, 800612e <MX_USB_DEVICE_Init+0x56>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80060f2:	f240 01f4 	movw	r1, #244	; 0xf4
 80060f6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80060fa:	f240 7064 	movw	r0, #1892	; 0x764
 80060fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006102:	f7ff fb0d 	bl	8005720 <USBD_RegisterClass>
 8006106:	b9a8      	cbnz	r0, 8006134 <MX_USB_DEVICE_Init+0x5c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006108:	f240 2104 	movw	r1, #516	; 0x204
 800610c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8006110:	f240 7064 	movw	r0, #1892	; 0x764
 8006114:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006118:	f7ff faa3 	bl	8005662 <USBD_CDC_RegisterInterface>
 800611c:	b968      	cbnz	r0, 800613a <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800611e:	f240 7064 	movw	r0, #1892	; 0x764
 8006122:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006126:	f7ff fb02 	bl	800572e <USBD_Start>
 800612a:	b948      	cbnz	r0, 8006140 <MX_USB_DEVICE_Init+0x68>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800612c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800612e:	f7fa facf 	bl	80006d0 <Error_Handler>
 8006132:	e7de      	b.n	80060f2 <MX_USB_DEVICE_Init+0x1a>
    Error_Handler();
 8006134:	f7fa facc 	bl	80006d0 <Error_Handler>
 8006138:	e7e6      	b.n	8006108 <MX_USB_DEVICE_Init+0x30>
    Error_Handler();
 800613a:	f7fa fac9 	bl	80006d0 <Error_Handler>
 800613e:	e7ee      	b.n	800611e <MX_USB_DEVICE_Init+0x46>
    Error_Handler();
 8006140:	f7fa fac6 	bl	80006d0 <Error_Handler>
}
 8006144:	e7f2      	b.n	800612c <MX_USB_DEVICE_Init+0x54>

08006146 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006146:	2000      	movs	r0, #0
 8006148:	4770      	bx	lr

0800614a <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800614a:	2000      	movs	r0, #0
 800614c:	4770      	bx	lr

0800614e <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800614e:	b538      	push	{r3, r4, r5, lr}
 8006150:	4605      	mov	r5, r0
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006152:	f240 7464 	movw	r4, #1892	; 0x764
 8006156:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800615a:	4601      	mov	r1, r0
 800615c:	4620      	mov	r0, r4
 800615e:	f7ff fa8f 	bl	8005680 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006162:	4620      	mov	r0, r4
 8006164:	f7ff faac 	bl	80056c0 <USBD_CDC_ReceivePacket>
  pitch = atoi((char*)&Buf[0]);//89,002\n
 8006168:	4628      	mov	r0, r5
 800616a:	f000 fa22 	bl	80065b2 <atoi>
 800616e:	f240 4352 	movw	r3, #1106	; 0x452
 8006172:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006176:	8018      	strh	r0, [r3, #0]
  yaw = atoi((char*)&Buf[3]);
 8006178:	1ce8      	adds	r0, r5, #3
 800617a:	f000 fa1a 	bl	80065b2 <atoi>
 800617e:	f240 0300 	movw	r3, #0
 8006182:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006186:	8018      	strh	r0, [r3, #0]
  measureFlag = 1;
 8006188:	f240 4351 	movw	r3, #1105	; 0x451
 800618c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006190:	2201      	movs	r2, #1
 8006192:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8006194:	2000      	movs	r0, #0
 8006196:	bd38      	pop	{r3, r4, r5, pc}

08006198 <CDC_Init_FS>:
{
 8006198:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800619a:	f240 7464 	movw	r4, #1892	; 0x764
 800619e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80061a2:	2200      	movs	r2, #0
 80061a4:	f640 6110 	movw	r1, #3600	; 0xe10
 80061a8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80061ac:	4620      	mov	r0, r4
 80061ae:	f7ff fa5f 	bl	8005670 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80061b2:	f640 2128 	movw	r1, #2600	; 0xa28
 80061b6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80061ba:	4620      	mov	r0, r4
 80061bc:	f7ff fa60 	bl	8005680 <USBD_CDC_SetRxBuffer>
}
 80061c0:	2000      	movs	r0, #0
 80061c2:	bd10      	pop	{r4, pc}

080061c4 <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80061c4:	f240 7364 	movw	r3, #1892	; 0x764
 80061c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 80061d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061d4:	b10b      	cbz	r3, 80061da <CDC_Transmit_FS+0x16>
    return USBD_BUSY;
 80061d6:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 80061d8:	4770      	bx	lr
{
 80061da:	b510      	push	{r4, lr}
 80061dc:	460a      	mov	r2, r1
 80061de:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80061e0:	f240 7464 	movw	r4, #1892	; 0x764
 80061e4:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80061e8:	4620      	mov	r0, r4
 80061ea:	f7ff fa41 	bl	8005670 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80061ee:	4620      	mov	r0, r4
 80061f0:	f7ff fa4c 	bl	800568c <USBD_CDC_TransmitPacket>
}
 80061f4:	bd10      	pop	{r4, pc}

080061f6 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80061f6:	2312      	movs	r3, #18
 80061f8:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80061fa:	f240 2030 	movw	r0, #560	; 0x230
 80061fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006202:	4770      	bx	lr

08006204 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006204:	2304      	movs	r3, #4
 8006206:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8006208:	f240 2044 	movw	r0, #580	; 0x244
 800620c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006210:	4770      	bx	lr

08006212 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8006212:	2300      	movs	r3, #0
 8006214:	4293      	cmp	r3, r2
 8006216:	d216      	bcs.n	8006246 <IntToUnicode+0x34>
{
 8006218:	b430      	push	{r4, r5}
 800621a:	e00b      	b.n	8006234 <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800621c:	3437      	adds	r4, #55	; 0x37
 800621e:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8006222:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8006224:	005c      	lsls	r4, r3, #1
 8006226:	3401      	adds	r4, #1
 8006228:	2500      	movs	r5, #0
 800622a:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 800622c:	3301      	adds	r3, #1
 800622e:	b2db      	uxtb	r3, r3
 8006230:	4293      	cmp	r3, r2
 8006232:	d206      	bcs.n	8006242 <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 8006234:	0f04      	lsrs	r4, r0, #28
 8006236:	2c09      	cmp	r4, #9
 8006238:	d8f0      	bhi.n	800621c <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800623a:	3430      	adds	r4, #48	; 0x30
 800623c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8006240:	e7ef      	b.n	8006222 <IntToUnicode+0x10>
  }
}
 8006242:	bc30      	pop	{r4, r5}
 8006244:	4770      	bx	lr
 8006246:	4770      	bx	lr

08006248 <Get_SerialNum>:
{
 8006248:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800624a:	f24f 73e8 	movw	r3, #63464	; 0xf7e8
 800624e:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8006252:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006254:	f24f 73ec 	movw	r3, #63468	; 0xf7ec
 8006258:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800625c:	681d      	ldr	r5, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800625e:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
 8006262:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8006266:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8006268:	18c0      	adds	r0, r0, r3
 800626a:	d100      	bne.n	800626e <Get_SerialNum+0x26>
}
 800626c:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800626e:	f240 2448 	movw	r4, #584	; 0x248
 8006272:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8006276:	2208      	movs	r2, #8
 8006278:	1ca1      	adds	r1, r4, #2
 800627a:	f7ff ffca 	bl	8006212 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800627e:	2204      	movs	r2, #4
 8006280:	f104 0112 	add.w	r1, r4, #18
 8006284:	4628      	mov	r0, r5
 8006286:	f7ff ffc4 	bl	8006212 <IntToUnicode>
}
 800628a:	e7ef      	b.n	800626c <Get_SerialNum+0x24>

0800628c <USBD_FS_SerialStrDescriptor>:
{
 800628c:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800628e:	231a      	movs	r3, #26
 8006290:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8006292:	f7ff ffd9 	bl	8006248 <Get_SerialNum>
}
 8006296:	f240 2048 	movw	r0, #584	; 0x248
 800629a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800629e:	bd08      	pop	{r3, pc}

080062a0 <USBD_FS_ProductStrDescriptor>:
{
 80062a0:	b508      	push	{r3, lr}
 80062a2:	460a      	mov	r2, r1
  if(speed == 0)
 80062a4:	b170      	cbz	r0, 80062c4 <USBD_FS_ProductStrDescriptor+0x24>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80062a6:	f241 11f8 	movw	r1, #4600	; 0x11f8
 80062aa:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80062ae:	f646 00a0 	movw	r0, #26784	; 0x68a0
 80062b2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80062b6:	f7ff feb1 	bl	800601c <USBD_GetString>
}
 80062ba:	f241 10f8 	movw	r0, #4600	; 0x11f8
 80062be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80062c2:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80062c4:	f241 11f8 	movw	r1, #4600	; 0x11f8
 80062c8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80062cc:	f646 00a0 	movw	r0, #26784	; 0x68a0
 80062d0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80062d4:	f7ff fea2 	bl	800601c <USBD_GetString>
 80062d8:	e7ef      	b.n	80062ba <USBD_FS_ProductStrDescriptor+0x1a>

080062da <USBD_FS_ManufacturerStrDescriptor>:
{
 80062da:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80062dc:	f241 14f8 	movw	r4, #4600	; 0x11f8
 80062e0:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80062e4:	460a      	mov	r2, r1
 80062e6:	4621      	mov	r1, r4
 80062e8:	f646 0094 	movw	r0, #26772	; 0x6894
 80062ec:	f6c0 0000 	movt	r0, #2048	; 0x800
 80062f0:	f7ff fe94 	bl	800601c <USBD_GetString>
}
 80062f4:	4620      	mov	r0, r4
 80062f6:	bd10      	pop	{r4, pc}

080062f8 <USBD_FS_ConfigStrDescriptor>:
{
 80062f8:	b508      	push	{r3, lr}
 80062fa:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 80062fc:	b170      	cbz	r0, 800631c <USBD_FS_ConfigStrDescriptor+0x24>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80062fe:	f241 11f8 	movw	r1, #4600	; 0x11f8
 8006302:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8006306:	f646 0078 	movw	r0, #26744	; 0x6878
 800630a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800630e:	f7ff fe85 	bl	800601c <USBD_GetString>
}
 8006312:	f241 10f8 	movw	r0, #4600	; 0x11f8
 8006316:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800631a:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800631c:	f241 11f8 	movw	r1, #4600	; 0x11f8
 8006320:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8006324:	f646 0078 	movw	r0, #26744	; 0x6878
 8006328:	f6c0 0000 	movt	r0, #2048	; 0x800
 800632c:	f7ff fe76 	bl	800601c <USBD_GetString>
 8006330:	e7ef      	b.n	8006312 <USBD_FS_ConfigStrDescriptor+0x1a>

08006332 <USBD_FS_InterfaceStrDescriptor>:
{
 8006332:	b508      	push	{r3, lr}
 8006334:	460a      	mov	r2, r1
  if(speed == 0)
 8006336:	b170      	cbz	r0, 8006356 <USBD_FS_InterfaceStrDescriptor+0x24>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006338:	f241 11f8 	movw	r1, #4600	; 0x11f8
 800633c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8006340:	f646 0084 	movw	r0, #26756	; 0x6884
 8006344:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006348:	f7ff fe68 	bl	800601c <USBD_GetString>
}
 800634c:	f241 10f8 	movw	r0, #4600	; 0x11f8
 8006350:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006354:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006356:	f241 11f8 	movw	r1, #4600	; 0x11f8
 800635a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800635e:	f646 0084 	movw	r0, #26756	; 0x6884
 8006362:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006366:	f7ff fe59 	bl	800601c <USBD_GetString>
 800636a:	e7ef      	b.n	800634c <USBD_FS_InterfaceStrDescriptor+0x1a>

0800636c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800636c:	b118      	cbz	r0, 8006376 <USBD_Get_USB_Status+0xa>
 800636e:	2802      	cmp	r0, #2
 8006370:	d003      	beq.n	800637a <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006372:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8006374:	4770      	bx	lr
      usb_status = USBD_OK;
 8006376:	2000      	movs	r0, #0
 8006378:	4770      	bx	lr
      usb_status = USBD_BUSY;
 800637a:	2001      	movs	r0, #1
    break;
 800637c:	4770      	bx	lr

0800637e <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 800637e:	6802      	ldr	r2, [r0, #0]
 8006380:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8006384:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006388:	429a      	cmp	r2, r3
 800638a:	d000      	beq.n	800638e <HAL_PCD_MspInit+0x10>
 800638c:	4770      	bx	lr
{
 800638e:	b500      	push	{lr}
 8006390:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8006392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006396:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800639a:	69da      	ldr	r2, [r3, #28]
 800639c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80063a0:	61da      	str	r2, [r3, #28]
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80063ac:	2200      	movs	r2, #0
 80063ae:	4611      	mov	r1, r2
 80063b0:	2014      	movs	r0, #20
 80063b2:	f7fb f9ff 	bl	80017b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80063b6:	2014      	movs	r0, #20
 80063b8:	f7fb fa32 	bl	8001820 <HAL_NVIC_EnableIRQ>
}
 80063bc:	b003      	add	sp, #12
 80063be:	f85d fb04 	ldr.w	pc, [sp], #4

080063c2 <HAL_PCD_SetupStageCallback>:
{
 80063c2:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80063c4:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80063c8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80063cc:	f7ff f9c8 	bl	8005760 <USBD_LL_SetupStage>
}
 80063d0:	bd08      	pop	{r3, pc}

080063d2 <HAL_PCD_DataOutStageCallback>:
{
 80063d2:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80063d4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80063d8:	00d3      	lsls	r3, r2, #3
 80063da:	4403      	add	r3, r0
 80063dc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80063e0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80063e4:	f7ff f9e9 	bl	80057ba <USBD_LL_DataOutStage>
}
 80063e8:	bd08      	pop	{r3, pc}

080063ea <HAL_PCD_DataInStageCallback>:
{
 80063ea:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80063ec:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80063f0:	00d3      	lsls	r3, r2, #3
 80063f2:	4403      	add	r3, r0
 80063f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063f6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80063fa:	f7ff fa27 	bl	800584c <USBD_LL_DataInStage>
}
 80063fe:	bd08      	pop	{r3, pc}

08006400 <HAL_PCD_SOFCallback>:
{
 8006400:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006402:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006406:	f7ff fac9 	bl	800599c <USBD_LL_SOF>
}
 800640a:	bd08      	pop	{r3, pc}

0800640c <HAL_PCD_ResetCallback>:
{
 800640c:	b510      	push	{r4, lr}
 800640e:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006410:	6883      	ldr	r3, [r0, #8]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d001      	beq.n	800641a <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8006416:	f7fa f95b 	bl	80006d0 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800641a:	2101      	movs	r1, #1
 800641c:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8006420:	f7ff faa5 	bl	800596e <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006424:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8006428:	f7ff fa79 	bl	800591e <USBD_LL_Reset>
}
 800642c:	bd10      	pop	{r4, pc}

0800642e <HAL_PCD_SuspendCallback>:
{
 800642e:	b510      	push	{r4, lr}
 8006430:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006432:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006436:	f7ff fa9d 	bl	8005974 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800643a:	69a3      	ldr	r3, [r4, #24]
 800643c:	b13b      	cbz	r3, 800644e <HAL_PCD_SuspendCallback+0x20>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800643e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8006442:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	f042 0206 	orr.w	r2, r2, #6
 800644c:	611a      	str	r2, [r3, #16]
}
 800644e:	bd10      	pop	{r4, pc}

08006450 <HAL_PCD_ResumeCallback>:
{
 8006450:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006452:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006456:	f7ff fa96 	bl	8005986 <USBD_LL_Resume>
}
 800645a:	bd08      	pop	{r3, pc}

0800645c <USBD_LL_Init>:
{
 800645c:	b510      	push	{r4, lr}
 800645e:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8006460:	f241 30f8 	movw	r0, #5112	; 0x13f8
 8006464:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006468:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800646c:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 8006470:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8006474:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006478:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800647a:	2308      	movs	r3, #8
 800647c:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800647e:	2302      	movs	r3, #2
 8006480:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006482:	2300      	movs	r3, #0
 8006484:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006486:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006488:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800648a:	f7fc f983 	bl	8002794 <HAL_PCD_Init>
 800648e:	bb30      	cbnz	r0, 80064de <USBD_LL_Init+0x82>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006490:	2318      	movs	r3, #24
 8006492:	2200      	movs	r2, #0
 8006494:	4611      	mov	r1, r2
 8006496:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800649a:	f7fc ffaa 	bl	80033f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800649e:	2358      	movs	r3, #88	; 0x58
 80064a0:	2200      	movs	r2, #0
 80064a2:	2180      	movs	r1, #128	; 0x80
 80064a4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80064a8:	f7fc ffa3 	bl	80033f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80064ac:	23c0      	movs	r3, #192	; 0xc0
 80064ae:	2200      	movs	r2, #0
 80064b0:	2181      	movs	r1, #129	; 0x81
 80064b2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80064b6:	f7fc ff9c 	bl	80033f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80064ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 80064be:	2200      	movs	r2, #0
 80064c0:	2101      	movs	r1, #1
 80064c2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80064c6:	f7fc ff94 	bl	80033f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80064ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064ce:	2200      	movs	r2, #0
 80064d0:	2182      	movs	r1, #130	; 0x82
 80064d2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80064d6:	f7fc ff8c 	bl	80033f2 <HAL_PCDEx_PMAConfig>
}
 80064da:	2000      	movs	r0, #0
 80064dc:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80064de:	f7fa f8f7 	bl	80006d0 <Error_Handler>
 80064e2:	e7d5      	b.n	8006490 <USBD_LL_Init+0x34>

080064e4 <USBD_LL_Start>:
{
 80064e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80064e6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80064ea:	f7fc f9d9 	bl	80028a0 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80064ee:	f7ff ff3d 	bl	800636c <USBD_Get_USB_Status>
}
 80064f2:	bd08      	pop	{r3, pc}

080064f4 <USBD_LL_OpenEP>:
{
 80064f4:	b510      	push	{r4, lr}
 80064f6:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80064f8:	4613      	mov	r3, r2
 80064fa:	4622      	mov	r2, r4
 80064fc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006500:	f7fc fe48 	bl	8003194 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006504:	f7ff ff32 	bl	800636c <USBD_Get_USB_Status>
}
 8006508:	bd10      	pop	{r4, pc}

0800650a <USBD_LL_CloseEP>:
{
 800650a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800650c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006510:	f7fc fe7a 	bl	8003208 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006514:	f7ff ff2a 	bl	800636c <USBD_Get_USB_Status>
}
 8006518:	bd08      	pop	{r3, pc}

0800651a <USBD_LL_StallEP>:
{
 800651a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800651c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006520:	f7fc fef2 	bl	8003308 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006524:	f7ff ff22 	bl	800636c <USBD_Get_USB_Status>
}
 8006528:	bd08      	pop	{r3, pc}

0800652a <USBD_LL_ClearStallEP>:
{
 800652a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800652c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006530:	f7fc ff25 	bl	800337e <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006534:	f7ff ff1a 	bl	800636c <USBD_Get_USB_Status>
}
 8006538:	bd08      	pop	{r3, pc}

0800653a <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800653a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 800653e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006542:	d108      	bne.n	8006556 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006544:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006548:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800654c:	00ca      	lsls	r2, r1, #3
 800654e:	4413      	add	r3, r2
 8006550:	f893 016a 	ldrb.w	r0, [r3, #362]	; 0x16a
}
 8006554:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006556:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800655a:	3101      	adds	r1, #1
 800655c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006560:	00ca      	lsls	r2, r1, #3
 8006562:	4413      	add	r3, r2
 8006564:	7898      	ldrb	r0, [r3, #2]
 8006566:	4770      	bx	lr

08006568 <USBD_LL_SetUSBAddress>:
{
 8006568:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800656a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800656e:	f7fc fd16 	bl	8002f9e <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006572:	f7ff fefb 	bl	800636c <USBD_Get_USB_Status>
}
 8006576:	bd08      	pop	{r3, pc}

08006578 <USBD_LL_Transmit>:
{
 8006578:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800657a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800657e:	f7fc fe9e 	bl	80032be <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006582:	f7ff fef3 	bl	800636c <USBD_Get_USB_Status>
}
 8006586:	bd08      	pop	{r3, pc}

08006588 <USBD_LL_PrepareReceive>:
{
 8006588:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800658a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800658e:	f7fc fe6c 	bl	800326a <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006592:	f7ff feeb 	bl	800636c <USBD_Get_USB_Status>
}
 8006596:	bd08      	pop	{r3, pc}

08006598 <USBD_LL_GetRxDataSize>:
{
 8006598:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800659a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800659e:	f7fc fe85 	bl	80032ac <HAL_PCD_EP_GetRxCount>
}
 80065a2:	bd08      	pop	{r3, pc}

080065a4 <USBD_static_malloc>:
}
 80065a4:	f240 405c 	movw	r0, #1116	; 0x45c
 80065a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80065ac:	4770      	bx	lr

080065ae <USBD_static_free>:
}
 80065ae:	4770      	bx	lr

080065b0 <HAL_PCDEx_SetConnectionState>:
}
 80065b0:	4770      	bx	lr

080065b2 <atoi>:
 80065b2:	220a      	movs	r2, #10
 80065b4:	2100      	movs	r1, #0
 80065b6:	f000 b8c5 	b.w	8006744 <strtol>
	...

080065bc <__libc_init_array>:
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	2500      	movs	r5, #0
 80065c0:	4e0c      	ldr	r6, [pc, #48]	; (80065f4 <__libc_init_array+0x38>)
 80065c2:	4c0d      	ldr	r4, [pc, #52]	; (80065f8 <__libc_init_array+0x3c>)
 80065c4:	1ba4      	subs	r4, r4, r6
 80065c6:	10a4      	asrs	r4, r4, #2
 80065c8:	42a5      	cmp	r5, r4
 80065ca:	d109      	bne.n	80065e0 <__libc_init_array+0x24>
 80065cc:	f000 f930 	bl	8006830 <_init>
 80065d0:	2500      	movs	r5, #0
 80065d2:	4e0a      	ldr	r6, [pc, #40]	; (80065fc <__libc_init_array+0x40>)
 80065d4:	4c0a      	ldr	r4, [pc, #40]	; (8006600 <__libc_init_array+0x44>)
 80065d6:	1ba4      	subs	r4, r4, r6
 80065d8:	10a4      	asrs	r4, r4, #2
 80065da:	42a5      	cmp	r5, r4
 80065dc:	d105      	bne.n	80065ea <__libc_init_array+0x2e>
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065e4:	4798      	blx	r3
 80065e6:	3501      	adds	r5, #1
 80065e8:	e7ee      	b.n	80065c8 <__libc_init_array+0xc>
 80065ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065ee:	4798      	blx	r3
 80065f0:	3501      	adds	r5, #1
 80065f2:	e7f2      	b.n	80065da <__libc_init_array+0x1e>
 80065f4:	080069dc 	.word	0x080069dc
 80065f8:	080069dc 	.word	0x080069dc
 80065fc:	080069dc 	.word	0x080069dc
 8006600:	080069e0 	.word	0x080069e0

08006604 <__itoa>:
 8006604:	1e93      	subs	r3, r2, #2
 8006606:	2b22      	cmp	r3, #34	; 0x22
 8006608:	b510      	push	{r4, lr}
 800660a:	460c      	mov	r4, r1
 800660c:	d904      	bls.n	8006618 <__itoa+0x14>
 800660e:	2300      	movs	r3, #0
 8006610:	461c      	mov	r4, r3
 8006612:	700b      	strb	r3, [r1, #0]
 8006614:	4620      	mov	r0, r4
 8006616:	bd10      	pop	{r4, pc}
 8006618:	2a0a      	cmp	r2, #10
 800661a:	d109      	bne.n	8006630 <__itoa+0x2c>
 800661c:	2800      	cmp	r0, #0
 800661e:	da07      	bge.n	8006630 <__itoa+0x2c>
 8006620:	232d      	movs	r3, #45	; 0x2d
 8006622:	700b      	strb	r3, [r1, #0]
 8006624:	2101      	movs	r1, #1
 8006626:	4240      	negs	r0, r0
 8006628:	4421      	add	r1, r4
 800662a:	f000 f8a1 	bl	8006770 <__utoa>
 800662e:	e7f1      	b.n	8006614 <__itoa+0x10>
 8006630:	2100      	movs	r1, #0
 8006632:	e7f9      	b.n	8006628 <__itoa+0x24>

08006634 <itoa>:
 8006634:	f7ff bfe6 	b.w	8006604 <__itoa>

08006638 <memcpy>:
 8006638:	b510      	push	{r4, lr}
 800663a:	1e43      	subs	r3, r0, #1
 800663c:	440a      	add	r2, r1
 800663e:	4291      	cmp	r1, r2
 8006640:	d100      	bne.n	8006644 <memcpy+0xc>
 8006642:	bd10      	pop	{r4, pc}
 8006644:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006648:	f803 4f01 	strb.w	r4, [r3, #1]!
 800664c:	e7f7      	b.n	800663e <memcpy+0x6>

0800664e <_strtol_l.isra.0>:
 800664e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006652:	4680      	mov	r8, r0
 8006654:	4689      	mov	r9, r1
 8006656:	4692      	mov	sl, r2
 8006658:	461e      	mov	r6, r3
 800665a:	460f      	mov	r7, r1
 800665c:	463d      	mov	r5, r7
 800665e:	9808      	ldr	r0, [sp, #32]
 8006660:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006664:	f000 f8c2 	bl	80067ec <__locale_ctype_ptr_l>
 8006668:	4420      	add	r0, r4
 800666a:	7843      	ldrb	r3, [r0, #1]
 800666c:	f013 0308 	ands.w	r3, r3, #8
 8006670:	d132      	bne.n	80066d8 <_strtol_l.isra.0+0x8a>
 8006672:	2c2d      	cmp	r4, #45	; 0x2d
 8006674:	d132      	bne.n	80066dc <_strtol_l.isra.0+0x8e>
 8006676:	2201      	movs	r2, #1
 8006678:	787c      	ldrb	r4, [r7, #1]
 800667a:	1cbd      	adds	r5, r7, #2
 800667c:	2e00      	cmp	r6, #0
 800667e:	d05d      	beq.n	800673c <_strtol_l.isra.0+0xee>
 8006680:	2e10      	cmp	r6, #16
 8006682:	d109      	bne.n	8006698 <_strtol_l.isra.0+0x4a>
 8006684:	2c30      	cmp	r4, #48	; 0x30
 8006686:	d107      	bne.n	8006698 <_strtol_l.isra.0+0x4a>
 8006688:	782b      	ldrb	r3, [r5, #0]
 800668a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800668e:	2b58      	cmp	r3, #88	; 0x58
 8006690:	d14f      	bne.n	8006732 <_strtol_l.isra.0+0xe4>
 8006692:	2610      	movs	r6, #16
 8006694:	786c      	ldrb	r4, [r5, #1]
 8006696:	3502      	adds	r5, #2
 8006698:	2a00      	cmp	r2, #0
 800669a:	bf14      	ite	ne
 800669c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80066a0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80066a4:	2700      	movs	r7, #0
 80066a6:	fbb1 fcf6 	udiv	ip, r1, r6
 80066aa:	4638      	mov	r0, r7
 80066ac:	fb06 1e1c 	mls	lr, r6, ip, r1
 80066b0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80066b4:	2b09      	cmp	r3, #9
 80066b6:	d817      	bhi.n	80066e8 <_strtol_l.isra.0+0x9a>
 80066b8:	461c      	mov	r4, r3
 80066ba:	42a6      	cmp	r6, r4
 80066bc:	dd23      	ble.n	8006706 <_strtol_l.isra.0+0xb8>
 80066be:	1c7b      	adds	r3, r7, #1
 80066c0:	d007      	beq.n	80066d2 <_strtol_l.isra.0+0x84>
 80066c2:	4584      	cmp	ip, r0
 80066c4:	d31c      	bcc.n	8006700 <_strtol_l.isra.0+0xb2>
 80066c6:	d101      	bne.n	80066cc <_strtol_l.isra.0+0x7e>
 80066c8:	45a6      	cmp	lr, r4
 80066ca:	db19      	blt.n	8006700 <_strtol_l.isra.0+0xb2>
 80066cc:	2701      	movs	r7, #1
 80066ce:	fb00 4006 	mla	r0, r0, r6, r4
 80066d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066d6:	e7eb      	b.n	80066b0 <_strtol_l.isra.0+0x62>
 80066d8:	462f      	mov	r7, r5
 80066da:	e7bf      	b.n	800665c <_strtol_l.isra.0+0xe>
 80066dc:	2c2b      	cmp	r4, #43	; 0x2b
 80066de:	bf04      	itt	eq
 80066e0:	1cbd      	addeq	r5, r7, #2
 80066e2:	787c      	ldrbeq	r4, [r7, #1]
 80066e4:	461a      	mov	r2, r3
 80066e6:	e7c9      	b.n	800667c <_strtol_l.isra.0+0x2e>
 80066e8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80066ec:	2b19      	cmp	r3, #25
 80066ee:	d801      	bhi.n	80066f4 <_strtol_l.isra.0+0xa6>
 80066f0:	3c37      	subs	r4, #55	; 0x37
 80066f2:	e7e2      	b.n	80066ba <_strtol_l.isra.0+0x6c>
 80066f4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80066f8:	2b19      	cmp	r3, #25
 80066fa:	d804      	bhi.n	8006706 <_strtol_l.isra.0+0xb8>
 80066fc:	3c57      	subs	r4, #87	; 0x57
 80066fe:	e7dc      	b.n	80066ba <_strtol_l.isra.0+0x6c>
 8006700:	f04f 37ff 	mov.w	r7, #4294967295
 8006704:	e7e5      	b.n	80066d2 <_strtol_l.isra.0+0x84>
 8006706:	1c7b      	adds	r3, r7, #1
 8006708:	d108      	bne.n	800671c <_strtol_l.isra.0+0xce>
 800670a:	2322      	movs	r3, #34	; 0x22
 800670c:	4608      	mov	r0, r1
 800670e:	f8c8 3000 	str.w	r3, [r8]
 8006712:	f1ba 0f00 	cmp.w	sl, #0
 8006716:	d107      	bne.n	8006728 <_strtol_l.isra.0+0xda>
 8006718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800671c:	b102      	cbz	r2, 8006720 <_strtol_l.isra.0+0xd2>
 800671e:	4240      	negs	r0, r0
 8006720:	f1ba 0f00 	cmp.w	sl, #0
 8006724:	d0f8      	beq.n	8006718 <_strtol_l.isra.0+0xca>
 8006726:	b10f      	cbz	r7, 800672c <_strtol_l.isra.0+0xde>
 8006728:	f105 39ff 	add.w	r9, r5, #4294967295
 800672c:	f8ca 9000 	str.w	r9, [sl]
 8006730:	e7f2      	b.n	8006718 <_strtol_l.isra.0+0xca>
 8006732:	2430      	movs	r4, #48	; 0x30
 8006734:	2e00      	cmp	r6, #0
 8006736:	d1af      	bne.n	8006698 <_strtol_l.isra.0+0x4a>
 8006738:	2608      	movs	r6, #8
 800673a:	e7ad      	b.n	8006698 <_strtol_l.isra.0+0x4a>
 800673c:	2c30      	cmp	r4, #48	; 0x30
 800673e:	d0a3      	beq.n	8006688 <_strtol_l.isra.0+0x3a>
 8006740:	260a      	movs	r6, #10
 8006742:	e7a9      	b.n	8006698 <_strtol_l.isra.0+0x4a>

08006744 <strtol>:
 8006744:	4b08      	ldr	r3, [pc, #32]	; (8006768 <strtol+0x24>)
 8006746:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006748:	681c      	ldr	r4, [r3, #0]
 800674a:	4d08      	ldr	r5, [pc, #32]	; (800676c <strtol+0x28>)
 800674c:	6a23      	ldr	r3, [r4, #32]
 800674e:	2b00      	cmp	r3, #0
 8006750:	bf08      	it	eq
 8006752:	462b      	moveq	r3, r5
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	4613      	mov	r3, r2
 8006758:	460a      	mov	r2, r1
 800675a:	4601      	mov	r1, r0
 800675c:	4620      	mov	r0, r4
 800675e:	f7ff ff76 	bl	800664e <_strtol_l.isra.0>
 8006762:	b003      	add	sp, #12
 8006764:	bd30      	pop	{r4, r5, pc}
 8006766:	bf00      	nop
 8006768:	20000264 	.word	0x20000264
 800676c:	200002c8 	.word	0x200002c8

08006770 <__utoa>:
 8006770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006772:	b08b      	sub	sp, #44	; 0x2c
 8006774:	4605      	mov	r5, r0
 8006776:	460c      	mov	r4, r1
 8006778:	466e      	mov	r6, sp
 800677a:	4b1b      	ldr	r3, [pc, #108]	; (80067e8 <__utoa+0x78>)
 800677c:	f103 0c20 	add.w	ip, r3, #32
 8006780:	4637      	mov	r7, r6
 8006782:	6818      	ldr	r0, [r3, #0]
 8006784:	6859      	ldr	r1, [r3, #4]
 8006786:	3308      	adds	r3, #8
 8006788:	c703      	stmia	r7!, {r0, r1}
 800678a:	4563      	cmp	r3, ip
 800678c:	463e      	mov	r6, r7
 800678e:	d1f7      	bne.n	8006780 <__utoa+0x10>
 8006790:	6818      	ldr	r0, [r3, #0]
 8006792:	791b      	ldrb	r3, [r3, #4]
 8006794:	6038      	str	r0, [r7, #0]
 8006796:	713b      	strb	r3, [r7, #4]
 8006798:	1e93      	subs	r3, r2, #2
 800679a:	2b22      	cmp	r3, #34	; 0x22
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	d904      	bls.n	80067ac <__utoa+0x3c>
 80067a2:	7023      	strb	r3, [r4, #0]
 80067a4:	461c      	mov	r4, r3
 80067a6:	4620      	mov	r0, r4
 80067a8:	b00b      	add	sp, #44	; 0x2c
 80067aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ac:	1e66      	subs	r6, r4, #1
 80067ae:	fbb5 f0f2 	udiv	r0, r5, r2
 80067b2:	fb02 5510 	mls	r5, r2, r0, r5
 80067b6:	af0a      	add	r7, sp, #40	; 0x28
 80067b8:	443d      	add	r5, r7
 80067ba:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80067be:	1c59      	adds	r1, r3, #1
 80067c0:	f806 5f01 	strb.w	r5, [r6, #1]!
 80067c4:	4605      	mov	r5, r0
 80067c6:	b968      	cbnz	r0, 80067e4 <__utoa+0x74>
 80067c8:	4622      	mov	r2, r4
 80067ca:	5460      	strb	r0, [r4, r1]
 80067cc:	4423      	add	r3, r4
 80067ce:	1b19      	subs	r1, r3, r4
 80067d0:	1b10      	subs	r0, r2, r4
 80067d2:	4281      	cmp	r1, r0
 80067d4:	dde7      	ble.n	80067a6 <__utoa+0x36>
 80067d6:	7811      	ldrb	r1, [r2, #0]
 80067d8:	7818      	ldrb	r0, [r3, #0]
 80067da:	f802 0b01 	strb.w	r0, [r2], #1
 80067de:	f803 1901 	strb.w	r1, [r3], #-1
 80067e2:	e7f4      	b.n	80067ce <__utoa+0x5e>
 80067e4:	460b      	mov	r3, r1
 80067e6:	e7e2      	b.n	80067ae <__utoa+0x3e>
 80067e8:	080068ac 	.word	0x080068ac

080067ec <__locale_ctype_ptr_l>:
 80067ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80067f0:	4770      	bx	lr

080067f2 <__ascii_mbtowc>:
 80067f2:	b082      	sub	sp, #8
 80067f4:	b901      	cbnz	r1, 80067f8 <__ascii_mbtowc+0x6>
 80067f6:	a901      	add	r1, sp, #4
 80067f8:	b142      	cbz	r2, 800680c <__ascii_mbtowc+0x1a>
 80067fa:	b14b      	cbz	r3, 8006810 <__ascii_mbtowc+0x1e>
 80067fc:	7813      	ldrb	r3, [r2, #0]
 80067fe:	600b      	str	r3, [r1, #0]
 8006800:	7812      	ldrb	r2, [r2, #0]
 8006802:	1c10      	adds	r0, r2, #0
 8006804:	bf18      	it	ne
 8006806:	2001      	movne	r0, #1
 8006808:	b002      	add	sp, #8
 800680a:	4770      	bx	lr
 800680c:	4610      	mov	r0, r2
 800680e:	e7fb      	b.n	8006808 <__ascii_mbtowc+0x16>
 8006810:	f06f 0001 	mvn.w	r0, #1
 8006814:	e7f8      	b.n	8006808 <__ascii_mbtowc+0x16>

08006816 <__ascii_wctomb>:
 8006816:	b149      	cbz	r1, 800682c <__ascii_wctomb+0x16>
 8006818:	2aff      	cmp	r2, #255	; 0xff
 800681a:	bf8b      	itete	hi
 800681c:	238a      	movhi	r3, #138	; 0x8a
 800681e:	700a      	strbls	r2, [r1, #0]
 8006820:	6003      	strhi	r3, [r0, #0]
 8006822:	2001      	movls	r0, #1
 8006824:	bf88      	it	hi
 8006826:	f04f 30ff 	movhi.w	r0, #4294967295
 800682a:	4770      	bx	lr
 800682c:	4608      	mov	r0, r1
 800682e:	4770      	bx	lr

08006830 <_init>:
 8006830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006832:	bf00      	nop
 8006834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006836:	bc08      	pop	{r3}
 8006838:	469e      	mov	lr, r3
 800683a:	4770      	bx	lr

0800683c <_fini>:
 800683c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683e:	bf00      	nop
 8006840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006842:	bc08      	pop	{r3}
 8006844:	469e      	mov	lr, r3
 8006846:	4770      	bx	lr
